<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Vercel部署mac风格网易云音乐</title>
      <link href="posts/dff3835f/"/>
      <url>posts/dff3835f/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天在Github上发现了一个网易云音乐的项目，<a href="https://github.com/sl1673495/vue-netease-music">vue-netease-music</a>它是基于 Vue2、Vue-CLI3 的高仿网易云 mac 客户端播放器，已经有1.5k的star。根据他给的演示地址发现几乎实现了所有的网易云功能(不包括需要VIP的部分)。但是他的README写的很简陋，很多小白不知道如何搭建，担心需不需要域名和服务器。。本教程的部署方法是不需要域名和服务器的，只需要简单的几步就可以部署成功。请提前准备好Github账号。</p><a class="btn-beautify button--animated pink larger" href="https://music.imgyh.com/"   title="演示地址"><i class="far fa-hand-point-right fa-fw"></i><span>演示地址</span></a><h1 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h1><ol><li>首先fork项目到自己的Github仓库：<a href="https://github.com/sl1673495/vue-netease-music">https://github.com/sl1673495/vue-netease-music</a></li><li>进入<a href="https://vercel.com/">Vercel</a>选择Github登录，点击 <code>New Project</code>。</li><li>在搜索框内搜索项目名称，并点击<code>import</code>导入项目。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210223133506.webp" alt="导入项目"></li><li>之后选择项目所有者。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210223134246.webp" alt="选择所有者"></li><li>接下来进行部署的设置，<code>PROJECT NAME</code>随便起一个，<code>FRAMEWORK PRESET</code>自动识别的不用管。需要注意的是<code>Build and Output Settings</code>，勾选<code>OUTPUT DIRECTORY</code>后的按钮，并将<code>dist</code>改为<code>music</code>，这是编译后的输出目录，因为编译好后的文件输出在<code>music</code>目录下，不是<code>dist</code>所以需要修改。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210223134827.webp" alt="部署设置"></li><li>最后点击下面的<code>Deploy</code>等待3分钟左右就会出现烟花的景象，代表部署成功。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210223135821.webp" alt="部署成功"></li><li>点击<code>visit</code>即可查看，点击<code>open dashbord</code>可进行相应设置。点击<code>setting</code>-&gt;<code>domains</code>可以添加自定义域名。</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.imzjw.cn/posts/vue-netease-music/">无需服务器和域名快速搭建部署Vue仿网易云</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用workbox-build和gulp为Hexo博客开启PWA</title>
      <link href="posts/74ba30cc/"/>
      <url>posts/74ba30cc/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在以前我也使用hexo-pwa插件开启pwa，但是需要使用老版本的hexo，很不方便，今天升级主题，正好换一种方法来安装PWA</p><p>PWA的相关介绍在以前的文章介绍很详细了。<a href="/posts/805d5d89/" title="hexo博客开启pwa">hexo博客开启pwa</a></p><div class="note info flat"><p>本文的环境是hexo5.3.0和butterfly3.6.2，如果你是其他主题可能有出入</p></div><h1 id="生成网站图标素材"><a href="#生成网站图标素材" class="headerlink" title="生成网站图标素材"></a>生成网站图标素材</h1><p>因为我们最终目的是要制作一个全平台的 WEB APP，所以对于图标的大小、类型适配显得格外重要。可以访问 <a href="https://realfavicongenerator.net/">realfavicongenerator</a> 进行图标制作及 manifest 的生成。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214223809.png" alt="选择图片"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214223925.png" alt="创建所有图片"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214224105.png" alt="调整windows磁贴颜色"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214224213.png" alt="设置路径"></p><p>此处设置的是 <code>/pwa</code>,生成的<code>manifest.json</code>如下一步所示，就是图标的相对路径</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214224420.png" alt="设置网站名字"></p><p>之后点击生成 <code>Generate your Favicons and HTML code</code></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214224536.png" alt="下载"></p><p>最后解压文件，重命名为pwa，并复制到Hexo博客下的<code>source</code>文件夹内</p><h1 id="开启设置和配置manifest-json"><a href="#开启设置和配置manifest-json" class="headerlink" title="开启设置和配置manifest.json"></a>开启设置和配置manifest.json</h1><p>在主题配置文件中中开启 <code>pwa</code> 选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwa:</span><br><span class="line">  enable: true</span><br><span class="line">  manifest: &#x2F;pwa&#x2F;manifest.json</span><br><span class="line">  apple_touch_icon: &#x2F;pwa&#x2F;apple-touch-icon.png</span><br><span class="line">  favicon_32_32: &#x2F;pwa&#x2F;favicon-32x32.png</span><br><span class="line">  favicon_16_16: &#x2F;pwa&#x2F;favicon-16x16.png</span><br><span class="line">  mask_icon: &#x2F;pwa&#x2F;safari-pinned-tab.svg</span><br></pre></td></tr></table></figure><p>在Hexo的<code>source/pwa/</code>目录下创建<code>/pwa/manifest.json</code>文件。和主题的<code>/pwa/manifest.json</code>保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;GYH&#39;s Blog&quot;,</span><br><span class="line">    &quot;short_name&quot;: &quot;GYH&#39;s Blog&quot;,</span><br><span class="line">    &quot;icons&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-36x36.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;36x36&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-48x48.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;48x48&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-72x72.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;72x72&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-96x96.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;96x96&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-144x144.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;144x144&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-192x192.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;192x192&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-256x256.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;256x256&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-384x384.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;384x384&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;src&quot;: &quot;&#x2F;pwa&#x2F;android-chrome-512x512.png&quot;,</span><br><span class="line">            &quot;sizes&quot;: &quot;512x512&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;theme_color&quot;: &quot;#ffffff&quot;,</span><br><span class="line">    &quot;background_color&quot;: &quot;#ffffff&quot;,</span><br><span class="line">    &quot;display&quot;: &quot;standalone&quot;,</span><br><span class="line">    &quot;splash_pages&quot;: null,</span><br><span class="line">    &quot;scope&quot;: &quot;&#x2F;&quot;,</span><br><span class="line">    &quot;start_url&quot;: &quot;&#x2F;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以通过 <a href="https://app-manifest.firebaseapp.com/">Web App Manifest</a>快速创建<code>manifest.json</code>。（Web App Manifest 要求至少包含一个 512*512 像素的图标）</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>在博客根目录下输入命令安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install workbox-build gulp --save-dev</span><br></pre></td></tr></table></figure><p>我安装的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;gulp&quot;: &quot;^4.0.2&quot;,</span><br><span class="line">&quot;workbox-build&quot;: &quot;^6.1.0&quot;</span><br></pre></td></tr></table></figure><h1 id="创建gulpfile-js-文件"><a href="#创建gulpfile-js-文件" class="headerlink" title="创建gulpfile.js 文件"></a>创建gulpfile.js 文件</h1><p>在Hexo的根目录，创建一个 <code>gulpfile.js</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const gulp &#x3D; require(&quot;gulp&quot;);</span><br><span class="line">const workbox &#x3D; require(&quot;workbox-build&quot;);</span><br><span class="line"></span><br><span class="line">gulp.task(&#39;generate-service-worker&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    return workbox.injectManifest(&#123;</span><br><span class="line">        swSrc: &#39;.&#x2F;sw-template.js&#39;,</span><br><span class="line">        swDest: &#39;.&#x2F;public&#x2F;sw.js&#39;,</span><br><span class="line">        globDirectory: &#39;.&#x2F;public&#39;,</span><br><span class="line">        globPatterns: [</span><br><span class="line">            &quot;**&#x2F;*.&#123;html,css,js,json,woff2&#125;&quot;</span><br><span class="line">        ],</span><br><span class="line">        modifyURLPrefix: &#123;</span><br><span class="line">            &quot;&quot;: &quot;.&#x2F;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&quot;build&quot;, gulp.series(&quot;generate-service-worker&quot;));</span><br></pre></td></tr></table></figure><h1 id="创建-sw-template-js-文件"><a href="#创建-sw-template-js-文件" class="headerlink" title="创建 sw-template.js 文件"></a>创建 sw-template.js 文件</h1><p>在Hexo的根目录，创建一个<code>sw-template.js</code>文件，第一行的 <code>const workboxVersion = &#39;6.1.0&#39;;</code> 可能需要根据你的安装版本来修改，我是修改了的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">const workboxVersion &#x3D; &#39;6.1.0&#39;;</span><br><span class="line"></span><br><span class="line">importScripts(&#96;https:&#x2F;&#x2F;storage.googleapis.com&#x2F;workbox-cdn&#x2F;releases&#x2F;$&#123;workboxVersion&#125;&#x2F;workbox-sw.js&#96;);</span><br><span class="line"></span><br><span class="line">workbox.core.setCacheNameDetails(&#123;</span><br><span class="line">    prefix: &quot;Your Name&quot;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.core.skipWaiting();</span><br><span class="line"></span><br><span class="line">workbox.core.clientsClaim();</span><br><span class="line"></span><br><span class="line">workbox.precaching.precacheAndRoute(self.__WB_MANIFEST,&#123;</span><br><span class="line">    directoryIndex: null</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.precaching.cleanupOutdatedCaches();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Images</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    &#x2F;\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$&#x2F;,</span><br><span class="line">    new workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: &quot;images&quot;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: 1000,</span><br><span class="line">                maxAgeSeconds: 60 * 60 * 24 * 30</span><br><span class="line">            &#125;),</span><br><span class="line">            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [0, 200]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Fonts</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    &#x2F;\.(?:eot|ttf|woff|woff2)$&#x2F;,</span><br><span class="line">    new workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: &quot;fonts&quot;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: 1000,</span><br><span class="line">                maxAgeSeconds: 60 * 60 * 24 * 30</span><br><span class="line">            &#125;),</span><br><span class="line">            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [0, 200]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Google Fonts</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    &#x2F;^https:\&#x2F;\&#x2F;fonts\.googleapis\.com&#x2F;,</span><br><span class="line">    new workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">        cacheName: &quot;google-fonts-stylesheets&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    &#x2F;^https:\&#x2F;\&#x2F;fonts\.gstatic\.com&#x2F;,</span><br><span class="line">    new workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: &#39;google-fonts-webfonts&#39;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: 1000,</span><br><span class="line">                maxAgeSeconds: 60 * 60 * 24 * 30</span><br><span class="line">            &#125;),</span><br><span class="line">            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [0, 200]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Static Libraries</span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">    &#x2F;^https:\&#x2F;\&#x2F;cdn\.jsdelivr\.net&#x2F;,</span><br><span class="line">    new workbox.strategies.CacheFirst(&#123;</span><br><span class="line">        cacheName: &quot;static-libs&quot;,</span><br><span class="line">        plugins: [</span><br><span class="line">            new workbox.expiration.ExpirationPlugin(&#123;</span><br><span class="line">                maxEntries: 1000,</span><br><span class="line">                maxAgeSeconds: 60 * 60 * 24 * 30</span><br><span class="line">            &#125;),</span><br><span class="line">            new workbox.cacheableResponse.CacheableResponsePlugin(&#123;</span><br><span class="line">                statuses: [0, 200]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.googleAnalytics.initialize();</span><br></pre></td></tr></table></figure><p>把<code>prefix</code> 修改为你博客的名字（英文），如果你想用其它缓存策略，请自行查看<a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies">相关文档</a></p><h1 id="添加css和js进主题"><a href="#添加css和js进主题" class="headerlink" title="添加css和js进主题"></a>添加css和js进主题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &#39;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;.app-refresh&#123;position:fixed;top:-2.2rem;left:0;right:0;z-index:99999;padding:0 1rem;font-size:15px;height:2.2rem;transition:all .3s ease&#125;.app-refresh-wrap&#123;display:flex;color:#fff;height:100%;align-items:center;justify-content:center&#125;.app-refresh-wrap a&#123;color:#fff;text-decoration:underline;cursor:pointer&#125;&lt;&#x2F;style&gt;&#39;</span><br><span class="line">  bottom:</span><br><span class="line">    - &#39;&lt;div class&#x3D;&quot;app-refresh&quot; id&#x3D;&quot;app-refresh&quot;&gt; &lt;div class&#x3D;&quot;app-refresh-wrap&quot;&gt; &lt;label&gt;✨ 网站已更新最新版本 👉&lt;&#x2F;label&gt; &lt;a href&#x3D;&quot;javascript:void(0)&quot; onclick&#x3D;&quot;location.reload()&quot;&gt;点击刷新&lt;&#x2F;a&gt; &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;script&gt;function showNotification()&#123;if(GLOBAL_CONFIG.Snackbar)&#123;var t&#x3D;&quot;light&quot;&#x3D;&#x3D;&#x3D;document.documentElement.getAttribute(&quot;data-theme&quot;)?GLOBAL_CONFIG.Snackbar.bgLight:GLOBAL_CONFIG.Snackbar.bgDark,e&#x3D;GLOBAL_CONFIG.Snackbar.position;Snackbar.show(&#123;text:&quot;已更新最新版本&quot;,backgroundColor:t,duration:5e5,pos:e,actionText:&quot;点击刷新&quot;,actionTextColor:&quot;#fff&quot;,onActionClick:function(t)&#123;location.reload()&#125;&#125;)&#125;else&#123;var o&#x3D;&#96;top: 0; background: $&#123;&quot;light&quot;&#x3D;&#x3D;&#x3D;document.documentElement.getAttribute(&quot;data-theme&quot;)?&quot;#49b1f5&quot;:&quot;#1f1f1f&quot;&#125;;&#96;;document.getElementById(&quot;app-refresh&quot;).style.cssText&#x3D;o&#125;&#125;&quot;serviceWorker&quot;in navigator&amp;&amp;(navigator.serviceWorker.controller&amp;&amp;navigator.serviceWorker.addEventListener(&quot;controllerchange&quot;,function()&#123;showNotification()&#125;),window.addEventListener(&quot;load&quot;,function()&#123;navigator.serviceWorker.register(&quot;&#x2F;sw.js&quot;)&#125;));&lt;&#x2F;script&gt;&#39;</span><br></pre></td></tr></table></figure><p>上面的代码是压缩过的，具体相关代码如下，可供理解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;app-refresh&quot; id&#x3D;&quot;app-refresh&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;app-refresh-wrap&quot;&gt;</span><br><span class="line">    &lt;label&gt;✨ 网站已更新最新版本 👉&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;javascript:void(0)&quot; onclick&#x3D;&quot;location.reload()&quot;&gt;点击刷新&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  if (&#39;serviceWorker&#39; in navigator) &#123;</span><br><span class="line">    if (navigator.serviceWorker.controller) &#123;</span><br><span class="line">      navigator.serviceWorker.addEventListener(&#39;controllerchange&#39;, function () &#123;</span><br><span class="line">        showNotification()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.addEventListener(&#39;load&#39;, function () &#123;</span><br><span class="line">      navigator.serviceWorker.register(&#39;&#x2F;sw.js&#39;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function showNotification() &#123;</span><br><span class="line">    if (GLOBAL_CONFIG.Snackbar) &#123;</span><br><span class="line">      var snackbarBg &#x3D;</span><br><span class="line">        document.documentElement.getAttribute(&#39;data-theme&#39;) &#x3D;&#x3D;&#x3D; &#39;light&#39;</span><br><span class="line">          ? GLOBAL_CONFIG.Snackbar.bgLight</span><br><span class="line">          : GLOBAL_CONFIG.Snackbar.bgDark</span><br><span class="line">      var snackbarPos &#x3D; GLOBAL_CONFIG.Snackbar.position</span><br><span class="line">      Snackbar.show(&#123;</span><br><span class="line">        text: &#39;已更新最新版本&#39;,</span><br><span class="line">        backgroundColor: snackbarBg,</span><br><span class="line">        duration: 500000,</span><br><span class="line">        pos: snackbarPos,</span><br><span class="line">        actionText: &#39;点击刷新&#39;,</span><br><span class="line">        actionTextColor: &#39;#fff&#39;,</span><br><span class="line">        onActionClick: function (e) &#123;</span><br><span class="line">          location.reload()</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      var showBg &#x3D;</span><br><span class="line">        document.documentElement.getAttribute(&#39;data-theme&#39;) &#x3D;&#x3D;&#x3D; &#39;light&#39;</span><br><span class="line">          ? &#39;#49b1f5&#39;</span><br><span class="line">          : &#39;#1f1f1f&#39;</span><br><span class="line">      var cssText &#x3D; &#96;top: 0; background: $&#123;showBg&#125;;&#96;</span><br><span class="line">      document.getElementById(&#39;app-refresh&#39;).style.cssText &#x3D; cssText</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">  .app-refresh &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: -2.2rem;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    z-index: 99999;</span><br><span class="line">    padding: 0 1rem;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    height: 2.2rem;</span><br><span class="line">    transition: all 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line">  .app-refresh-wrap &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    color: #fff;</span><br><span class="line">    height: 100%;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .app-refresh-wrap span &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h1 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h1><p>在原来的基础上增加了一句命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">.&#x2F;node_modules&#x2F;gulp&#x2F;bin&#x2F;gulp.js build   #生成sw.js</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://butterfly.js.org/posts/4073eda/#PWA">butterfly文档</a><br><a href="https://io-oi.me/tech/pwa-via-workbox/">利用 Workbox 实现博客的 PWA</a><br><a href="https://akilar.top/posts/8f31c3d0/">基于 Butterfly 主题的 PWA 实现方案</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时自动提交博客网址给百度</title>
      <link href="posts/7db32d68/"/>
      <url>posts/7db32d68/</url>
      
        <content type="html"><![CDATA[<h1 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h1><p>本项目是基于 GitHub Action 每天定时提交博客网址给百度，实现快速收录。百度的资源提交有三种方式，分别是API推送，sitemap提交以及手动提交。根据百度官方的三种提交方式中API推送最为快速，故本文将基于 GitHub Action 实现API推送。以下是百度官方说明</p><ul><li><p>API推送：最为快速的提交方式，建议您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。</p></li><li><p>sitemap：您可以定期将网站链接放到Sitemap中，然后将Sitemap提交给百度。百度会周期性的抓取检查您提交的Sitemap，对其中的链接进行处理，但收录速度慢于API推送。</p></li><li><p>手动提交：如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度。</p></li><li><p>自动推送：轻量级链接提交组件，将自动推送的JS代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现。</p></li></ul><h1 id="安装Sitemap插件"><a href="#安装Sitemap插件" class="headerlink" title="安装Sitemap插件"></a>安装Sitemap插件</h1><div class="note info flat"><p>如果以前已经安装了 <code>hexo-generator-sitemap</code> 和 <code>hexo-generator-baidu-sitemap</code> 两个插件的同学可以跳到下一步。</p></div><p>首先本项目是基于sitemap的，如果你还没有sitemap文件可以按如下方法操作</p><p>安装在博客根目录下执行以下命令，安装两个插件,分别是<a href="https://github.com/hexojs/hexo-generator-sitemap">hexo-generator-sitemap</a>和<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">hexo-generator-baidu-sitemap</a>，看两个的名字就知道后面一个的是专门为百度生成sitemap的插件，前一个是给别的搜索引擎使用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>然后修改博客 <code>_config.yml</code>,添加如下配置，下面的是针对于 <code>hexo-generator-sitemap</code> 插件的配置，<code>hexo-generator-baidu-sitemap</code> 可以不用配置，安装好后可以直接使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: .&#x2F;sitemap_template.xml</span><br><span class="line">  rel: false</span><br><span class="line">  tags: true</span><br><span class="line">  categories: true</span><br></pre></td></tr></table></figure><h1 id="配置Github-Action"><a href="#配置Github-Action" class="headerlink" title="配置Github Action"></a>配置Github Action</h1><p>首先需要fork我的GitHub仓库：<a href="https://github.com/imgyh/script">https://github.com/imgyh/script</a></p><p>在GitHub 仓库中有如下文件，到我写这篇文章时只有这些文件，可能以后有其他项目还会加进去。废话不多说，其中 <code>.github/workflows</code> 和 <code>baidu_submit</code> 两个文件夹是本次项目所需要的。<code>valine_wake_up</code> 是另一个项目的文件。如果你想了解 <code>Valine</code> 防止Leancloud流控无法唤醒，可以参考这篇博客 <a href="/posts/ef89201e/" title="解决Leancloud流控导致无法唤醒问题">解决Leancloud流控导致无法唤醒问题</a></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214213154.png" alt="Github仓库结构"></p><p>然后我们需要添加两个 <code>secrets</code>。在你fork的仓库下的 <code>settings</code> -&gt; <code>Secrets</code> -&gt; <code>New repository secret</code> 添加如下两个<code>Secrets</code></p><table><thead><tr><th align="left">Name</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">BAIDU_SUBMIT_API</td><td align="left">百度的API提交url如下图</td></tr><tr><td align="left">BAIDU_SITEMAP_URL</td><td align="left">你自己博客的百度sitemap地址 示例：</td></tr></tbody></table><p>BAIDU_SUBMIT_API 示例：<a href="http://data.zz.baidu.com/urls?site=https://www.imgyh.com&amp;token=XXXX">http://data.zz.baidu.com/urls?site=https://www.imgyh.com&amp;token=XXXX</a><br>BAIDU_SITEMAP_URL 示例：<a href="https://www.imgyh.com/baidusitemap.xml">https://www.imgyh.com/baidusitemap.xml</a></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210214214716.png" alt="百度推送API"></p><p>之后会在每天的 8, 12, 16, 20点向百度定时提交你博客的url。当然当你向仓库push时也可触发推送。调用成功会打印所有的url并打印 <code>&#123;&quot;remain&quot;:2816,&quot;success&quot;:46&#125;</code>类似的语句，<code>remain</code>表示当天剩余的可推送url条数，<code>success</code>表示成功推送的url条数。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests详解</title>
      <link href="posts/9b8ebfa5/"/>
      <url>posts/9b8ebfa5/</url>
      
        <content type="html"><![CDATA[<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><p>HTTP请求类型有这么几种：GET，POST，PUT，DELETE，HEAD 以及 OPTIONS，下面分别进行介绍</p><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>request是requests中的一个重要方法，所有的HTTP请求都是基于这个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request(method, url, **kwargs)</span><br></pre></td></tr></table></figure><ul><li>method：请求方式<code>OPTIONS</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, or <code>DELETE</code></li><li>url：请求的网址</li></ul><p>**kwargs：其他可选参数</p><ul><li><p>params：字典或字节序列，作为参数增加到url中</p></li><li><p>data：字典、字节序列或文件对象，作为Request的内容</p></li><li><p>json：JSON格式的数据，作为Request的内容。</p></li><li><p>headers：字典，HTTP定制请求头</p></li><li><p>cookies：字典或CookieJar，Request中的cookie</p></li><li><p>files：字典，用于传输文件</p></li><li><p>auth：元组，支持HTTP的认证功能</p></li><li><p>timeout：设定超时时间，单位为秒</p></li><li><p>allow_redirects：布尔，重定向开关。默认True</p></li><li><p>proxies：字典，设定代理服务器，可以增加登录认证</p></li><li><p>verify：布尔，认证SSL证书的开关。默认True</p></li><li><p>stream：布尔，获取内容立即下载开关。默认True</p></li><li><p>cert：本地SSL证书路径</p></li><li><p>stream：布尔，获取内容立即下载开关。默认True</p></li></ul><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get(url, params&#x3D;None, **kwargs)</span><br></pre></td></tr></table></figure><p>参数与上面的request一致，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;events&#39;)</span><br></pre></td></tr></table></figure><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post(url, data&#x3D;None, json&#x3D;None, **kwargs)</span><br></pre></td></tr></table></figure><p>参数与上面的request一致，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)</span><br></pre></td></tr></table></figure><h2 id="PUT请求"><a href="#PUT请求" class="headerlink" title="PUT请求"></a>PUT请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put(url, data&#x3D;None, **kwargs)</span><br></pre></td></tr></table></figure><p>参数与上面的request一致，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.put(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;put&#39;, data &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;)</span><br></pre></td></tr></table></figure><h2 id="DELETE请求"><a href="#DELETE请求" class="headerlink" title="DELETE请求"></a>DELETE请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(url, **kwargs)</span><br></pre></td></tr></table></figure><p>参数与上面的request一致，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.delete(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;delete&#39;)</span><br></pre></td></tr></table></figure><h2 id="HEAD请求"><a href="#HEAD请求" class="headerlink" title="HEAD请求"></a>HEAD请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head(url, **kwargs)</span><br></pre></td></tr></table></figure><p>参数与上面的request一致，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.head(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</span><br></pre></td></tr></table></figure><h2 id="OPTIONS请求"><a href="#OPTIONS请求" class="headerlink" title="OPTIONS请求"></a>OPTIONS请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">options(url, **kwargs)</span><br></pre></td></tr></table></figure><p>参数与上面的request一致，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.options(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)</span><br></pre></td></tr></table></figure><h1 id="向url传递参数"><a href="#向url传递参数" class="headerlink" title="向url传递参数"></a>向url传递参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url_params &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;       #    字典传递参数，如果值为None的键不会被添加到url中</span><br><span class="line">r &#x3D; requests.get(&#39;your url&#39;,params &#x3D; url_params)</span><br><span class="line">print(r.url)    # 打印内容your url?key&#x3D;value</span><br></pre></td></tr></table></figure><h1 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">r.encoding                       #获取当前的编码</span><br><span class="line">r.encoding &#x3D; &#39;utf-8&#39;             #设置编码</span><br><span class="line">r.text                           #以encoding解析返回内容。字符串方式的响应体，会自动根据响应头部的字符编码进行解码。</span><br><span class="line">r.content                        #以字节形式（二进制）返回。字节方式的响应体，会自动为你解码 gzip 和 deflate 压缩。</span><br><span class="line"></span><br><span class="line">r.request.headers                #获取请求头</span><br><span class="line">r.headers                        #以字典对象存储服务器响应头，但是这个字典比较特殊，字典键不区分大小写，若键不存在则返回None</span><br><span class="line">r.headers[&#39;Content-Type&#39;]        #访问headers的Content-Type内容</span><br><span class="line">r.headers.get(&#39;Content-Type&#39;)    #访问响应头部分内容的两种方式</span><br><span class="line"></span><br><span class="line">r.request._cookies               #获取请求的cookie</span><br><span class="line">r.cookies                        #获取响应的cookie</span><br><span class="line">r.cookies[&#39;example_cookie_name&#39;]    #读取cookies</span><br><span class="line"></span><br><span class="line">r.history                        #返回重定向信息,当然可以在请求是加上allow_redirects &#x3D; false 阻止重定向</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.status_code                     #响应状态码</span><br><span class="line">r.raw                             #返回原始响应体，也就是 urllib 的 response 对象，使用 r.raw.read()   </span><br><span class="line">r.ok                              # 查看r.ok的布尔值便可以知道是否登陆成功</span><br><span class="line"></span><br><span class="line"> #*特殊方法*#</span><br><span class="line">r.json()                         #Requests中内置的JSON解码器，以json形式返回,前提返回的内容确保是json格式的，不然解析出错会抛异常</span><br><span class="line">r.raise_for_status()             #失败请求(非200响应)抛出异常</span><br></pre></td></tr></table></figure><h1 id="定制请求头"><a href="#定制请求头" class="headerlink" title="定制请求头"></a>定制请求头</h1><p>如果你想为请求添加 HTTP 头部，只要简单地传递一个 dict 给 headers 参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;</span><br><span class="line">headers &#x3D; &#123;&#39;content-type&#39;: &#39;application&#x2F;json&#39;,</span><br><span class="line">           &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Linux; Android 6.0; Nexus 5 Build&#x2F;MRA58N) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.104 Mobile Safari&#x2F;537.36&#39;&#125;</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.get(url, headers&#x3D;headers)</span><br></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header &#x3D; &#123;&#39;user-agent&#39;: &#39;my-app&#x2F;0.0.1&#39;&#39;&#125;</span><br><span class="line">cookie &#x3D; &#123;&#39;key&#39;:&#39;value&#39;&#125;</span><br><span class="line">r &#x3D; requests.get&#x2F;post(&#39;your url&#39;,headers&#x3D;header,cookies&#x3D;cookie) </span><br></pre></td></tr></table></figure><h1 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h1><p>通常，你想要发送一些编码为表单形式的数据——非常像一个 HTML 表单。要实现这个，只需简单地传递一个字典给 data 参数。你的数据字典在发出请求时会自动编码为表单形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;payload)</span><br><span class="line">print(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;key2&quot;: &quot;value2&quot;,</span><br><span class="line">    &quot;key1&quot;: &quot;value1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post发送json请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">payload &#x3D; &#123;&#39;some&#39;: &#39;data&#39;&#125;</span><br><span class="line">r &#x3D; requests.post(&#39;https:&#x2F;&#x2F;api.github.com&#x2F;some&#x2F;endpoint&#39;, data&#x3D;json.dumps(&#123;&#39;some&#39;: &#39;data&#39;&#125;))    </span><br><span class="line">#如果传递的payload是string而不是dict，需要先调用dumps方法格式化一下</span><br><span class="line"># r &#x3D; requests.post(url, json&#x3D;payload)      #这中不用转json较方便</span><br><span class="line">print(r.json())</span><br></pre></td></tr></table></figure><h1 id="post多部分编码文件"><a href="#post多部分编码文件" class="headerlink" title="post多部分编码文件"></a>post多部分编码文件</h1><p>Requests 使得上传多部分编码文件变得很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;</span><br><span class="line">files &#x3D; &#123;&#39;file&#39;: open(&#39;report.xls&#39;, &#39;rb&#39;)&#125;</span><br><span class="line">r &#x3D; requests.post(url, files&#x3D;files)</span><br></pre></td></tr></table></figure><h1 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r &#x3D; requests.get(&#39;url&#39;,timeout&#x3D;1)           #设置秒数超时，仅对于连接有效</span><br></pre></td></tr></table></figure><h1 id="设置访问代理"><a href="#设置访问代理" class="headerlink" title="设置访问代理"></a>设置访问代理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proxies &#x3D; &#123;</span><br><span class="line">           &quot;http&quot;: &quot;http:&#x2F;&#x2F;10.10.1.10:3128&quot;,</span><br><span class="line">           &quot;https&quot;: &quot;http:&#x2F;&#x2F;10.10.1.100:4444&quot;,</span><br><span class="line">          &#125;</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;m.ctrip.com&#39;, proxies&#x3D;proxies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#如果代理需要用户名和密码，则需要这样：</span><br><span class="line">proxies &#x3D; &#123;</span><br><span class="line">    &quot;http&quot;: &quot;http:&#x2F;&#x2F;user:pass@10.10.1.10:3128&#x2F;&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="会话对象"><a href="#会话对象" class="headerlink" title="会话对象"></a>会话对象</h1><p>会话对象让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># 请求数据url</span><br><span class="line">member_url &#x3D; &#39;https:&#x2F;&#x2F;www.yaozh.com&#x2F;member&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.67 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line"># session 类 可以自动保存cookies &#x3D;&#x3D;&#x3D; cookiesJar</span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line"># 1.代码登录</span><br><span class="line">login_url &#x3D; &#39;https:&#x2F;&#x2F;www.yaozh.com&#x2F;login&#39;</span><br><span class="line">login_form_data &#x3D; &#123;</span><br><span class="line">    &#39;username&#39;:&#39;xiaomaoera12&#39;,</span><br><span class="line">    &#39;pwd&#39;: &#39;lina081012&#39;,</span><br><span class="line">    &#39;formhash&#39;: &#39;54AC1EE419&#39;,</span><br><span class="line">    &#39;backurl&#39;: &#39;https%3A%2F%2Fwww.yaozh.com%2F&#39;,</span><br><span class="line">&#125;</span><br><span class="line">login_response &#x3D; session.post(login_url,data&#x3D;login_form_data,headers&#x3D;headers)</span><br><span class="line">print(login_response.content.decode())</span><br><span class="line"># 2.登录成功之后 带着 有效的cookies 访问 请求目标数据</span><br><span class="line">data &#x3D; session.get(member_url,headers&#x3D;headers).content.decode()</span><br></pre></td></tr></table></figure><h1 id="SSL-证书验证"><a href="#SSL-证书验证" class="headerlink" title="SSL 证书验证"></a>SSL 证书验证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;https:&#x2F;&#x2F;www.12306.cn&#x2F;mormhweb&#x2F;&#39;</span><br><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.67 Safari&#x2F;537.36&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 因为hhtps  是有第三方 CA 证书认证的</span><br><span class="line"># 但是 12306  虽然是https 但是 它不是 CA证书, 他是自己 颁布的证书</span><br><span class="line"># 解决方法 是: 告诉 web 忽略证书 访问</span><br><span class="line">response &#x3D; requests.get(url&#x3D;url, headers&#x3D;headers, verify&#x3D;False)</span><br><span class="line">data &#x3D; response.content.deco</span><br></pre></td></tr></table></figure><h1 id="客户端证书"><a href="#客户端证书" class="headerlink" title="客户端证书"></a>客户端证书</h1><p>你也可以指定一个本地证书用作客户端证书，可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requests.get(&#39;https:&#x2F;&#x2F;kennethreitz.org&#39;, cert&#x3D;(&#39;&#x2F;path&#x2F;client.cert&#39;, &#39;&#x2F;path&#x2F;client.key&#39;))</span><br><span class="line">&lt;Response [200]&gt;</span><br></pre></td></tr></table></figure><p>或者保持在会话中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s &#x3D; requests.Session()</span><br><span class="line">s.cert &#x3D; &#39;&#x2F;path&#x2F;client.cert&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup详解</title>
      <link href="posts/e74af289/"/>
      <url>posts/e74af289/</url>
      
        <content type="html"><![CDATA[<h1 id="BeautifulSoup4简介"><a href="#BeautifulSoup4简介" class="headerlink" title="BeautifulSoup4简介"></a>BeautifulSoup4简介</h1><p>参考： <a href="http://www.jsphp.net/python/show-24-214-1.html">http://www.jsphp.net/python/show-24-214-1.html</a></p><p>BeautifulSoup4是爬虫必学的技能。BeautifulSoup最主要的功能是从网页抓取数据，Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。BeautifulSoup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python默认的解析器，lxml 解析器更加强大，速度更快，推荐使用lxml 解析器。</p><p>BeautifulSoup4和 lxml 一样，Beautiful Soup 也是一个HTML/XML的解析器，主要的功能也是如何解析和提取 HTML/XML 数据。</p><p>BeautifulSoup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python默认的解析器，lxml 解析器更加强大，速度更快，推荐使用lxml 解析器。</p><p>Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。</p><h1 id="BeautifulSoup4主要解析器，以及优缺点"><a href="#BeautifulSoup4主要解析器，以及优缺点" class="headerlink" title="BeautifulSoup4主要解析器，以及优缺点"></a>BeautifulSoup4主要解析器，以及优缺点</h1><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210126142604.png"></p><h1 id="BeautifulSoup4简单使用"><a href="#BeautifulSoup4简单使用" class="headerlink" title="BeautifulSoup4简单使用"></a>BeautifulSoup4简单使用</h1><p>假设有这样一个Html，具体内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8&quot; http-equiv&#x3D;&quot;content-type&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta content&#x3D;&quot;IE&#x3D;Edge&quot; http-equiv&#x3D;&quot;X-UA-Compatible&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta content&#x3D;&quot;always&quot; name&#x3D;&quot;referrer&quot; &#x2F;&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;ss1.bdstatic.com&#x2F;5eN1bjq8AAUYm2zgoY3K&#x2F;r&#x2F;www&#x2F;cache&#x2F;bdorz&#x2F;baidu.min.css&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;百度一下，你就知道 &lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body link&#x3D;&quot;#0000cc&quot;&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;head&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;head_wrapper&quot;&gt;</span><br><span class="line">          &lt;div id&#x3D;&quot;u1&quot;&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;mnav&quot; href&#x3D;&quot;http:&#x2F;&#x2F;news.baidu.com&quot; name&#x3D;&quot;tj_trnews&quot;&gt;新闻 &lt;&#x2F;a&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;mnav&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.hao123.com&quot; name&#x3D;&quot;tj_trhao123&quot;&gt;hao123 &lt;&#x2F;a&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;mnav&quot; href&#x3D;&quot;http:&#x2F;&#x2F;map.baidu.com&quot; name&#x3D;&quot;tj_trmap&quot;&gt;地图 &lt;&#x2F;a&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;mnav&quot; href&#x3D;&quot;http:&#x2F;&#x2F;v.baidu.com&quot; name&#x3D;&quot;tj_trvideo&quot;&gt;视频 &lt;&#x2F;a&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;mnav&quot; href&#x3D;&quot;http:&#x2F;&#x2F;tieba.baidu.com&quot; name&#x3D;&quot;tj_trtieba&quot;&gt;贴吧 &lt;&#x2F;a&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;bri&quot; href&#x3D;&quot;&#x2F;&#x2F;www.baidu.com&#x2F;more&#x2F;&quot; name&#x3D;&quot;tj_briicon&quot; style&#x3D;&quot;display: block;&quot;&gt;更多产品 &lt;&#x2F;a&gt;</span><br><span class="line">          &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) # 缩进格式</span><br><span class="line">print(bs.prettify()) # 格式化html结构</span><br><span class="line">print(bs.title) # 获取title标签的名称</span><br><span class="line">print(bs.title.name) # 获取title的name</span><br><span class="line">print(bs.title.string) # 获取head标签的所有内容</span><br><span class="line">print(bs.head) </span><br><span class="line">print(bs.div)  # 获取第一个div标签中的所有内容</span><br><span class="line">print(bs.div[&quot;id&quot;]) # 获取第一个div标签的id的值</span><br><span class="line">print(bs.a) </span><br><span class="line">print(bs.find_all(&quot;a&quot;)) # 获取所有的a标签</span><br><span class="line">print(bs.find(id&#x3D;&quot;u1&quot;)) # 获取id&#x3D;&quot;u1&quot;</span><br><span class="line">for item in bs.find_all(&quot;a&quot;): </span><br><span class="line">    print(item.get(&quot;href&quot;)) # 获取所有的a标签，并遍历打印a标签中的href的值</span><br><span class="line">for item in bs.find_all(&quot;a&quot;): </span><br><span class="line">    print(item.get_text())  # 获取所有的a标签，并遍历打印a标签中的内容</span><br></pre></td></tr></table></figure><h1 id="BeautifulSoup4四大对象种类"><a href="#BeautifulSoup4四大对象种类" class="headerlink" title="BeautifulSoup4四大对象种类"></a>BeautifulSoup4四大对象种类</h1><p>BeautifulSoup4将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:</p><ul><li>Tag</li><li>NavigableString</li><li>BeautifulSoup</li><li>Comment</li></ul><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>Tag通俗点讲就是HTML中的一个个标签，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line"># 获取title标签的所有内容</span><br><span class="line">print(bs.title) </span><br><span class="line"># 获取head标签的所有内容</span><br><span class="line">print(bs.head) </span><br><span class="line"># 获取第一个a标签的所有内容</span><br><span class="line">print(bs.a) </span><br><span class="line"># 类型</span><br><span class="line">print(type(bs.a))</span><br></pre></td></tr></table></figure><p>我们可以利用 soup 加标签名轻松地获取这些标签的内容，这些对象的类型是bs4.element.Tag。但是注意，它查找的是在所有内容中的第一个符合要求的标签。</p><p>对于 Tag，它有两个重要的属性，是 name 和 attrs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line"># [document] #bs 对象本身比较特殊，它的 name 即为 [document]</span><br><span class="line">print(bs.name) </span><br><span class="line"># head #对于其他内部标签，输出的值便为标签本身的名称</span><br><span class="line">print(bs.head.name) </span><br><span class="line"># 在这里，我们把 a 标签的所有属性打印输出了出来，得到的类型是一个字典。</span><br><span class="line">print(bs.a.attrs) </span><br><span class="line">#还可以利用get方法，传入属性的名称，二者是等价的</span><br><span class="line">print(bs.a[&#39;class&#39;]) # 等价 bs.a.get(&#39;class&#39;)</span><br><span class="line"># 可以对这些属性和内容等等进行修改</span><br><span class="line">bs.a[&#39;class&#39;] &#x3D; &quot;newClass&quot;</span><br><span class="line">print(bs.a) </span><br><span class="line"># 还可以对这个属性进行删除</span><br><span class="line">del bs.a[&#39;class&#39;] </span><br><span class="line">print(bs.a)</span><br></pre></td></tr></table></figure><h2 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h2><p>既然我们已经得到了标签的内容，那么问题来了，我们要想获取标签内部的文字怎么办呢？很简单，用 .string 即可，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;)</span><br><span class="line"> </span><br><span class="line">print(bs.title.string) </span><br><span class="line">print(type(bs.title.string))</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>BeautifulSoup对象表示的是一个文档的内容。大部分时候，可以把它当作 Tag 对象，是一个特殊的 Tag，我们可以分别获取它的类型，名称，以及属性，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read()</span><br><span class="line"> </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line">print(type(bs.name)) </span><br><span class="line">print(bs.name) </span><br><span class="line">print(bs.attrs)</span><br></pre></td></tr></table></figure><h2 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h2><p>Comment 对象是一个特殊类型的 NavigableString 对象，其输出的内容不包括注释符号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line">print(bs.a)</span><br><span class="line"># 此时不能出现空格和换行符，a标签如下：</span><br><span class="line"># &lt;a class&#x3D;&quot;mnav&quot; href&#x3D;&quot;http:&#x2F;&#x2F;news.baidu.com&quot; name&#x3D;&quot;tj_trnews&quot;&gt;&lt;!--新闻--&gt;&lt;&#x2F;a&gt;</span><br><span class="line">print(bs.a.string) # 新闻</span><br><span class="line">print(type(bs.a.string)) # &lt;class &#39;bs4.element.Comment&#39;&gt;</span><br></pre></td></tr></table></figure><h1 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h1><ol><li>.contents：获取Tag的所有子节点，返回一个list</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># tag的.content 属性可以将tag的子节点以列表的方式输出</span><br><span class="line">print(bs.head.contents)</span><br><span class="line"># 用列表索引来获取它的某一个元素</span><br><span class="line">print(bs.head.contents[1])</span><br></pre></td></tr></table></figure><ol start="2"><li>.children：获取Tag的所有子节点，返回一个生成器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for child in  bs.body.children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>.descendants：获取Tag的所有子孙节点</p></li><li><p>.strings：如果Tag包含多个字符串，即在子孙节点中有内容，可以用此获取，而后进行遍历</p></li><li><p>.stripped_strings：与strings用法一致，只不过可以去除掉那些多余的空白内容</p></li><li><p>.parent：获取Tag的父节点</p></li><li><p>.parents：递归得到父辈元素的所有节点，返回一个生成器</p></li><li><p>.previous_sibling：获取当前Tag的上一个节点，属性通常是字符串或空白，真实结果是当前标签与上一个标签之间的顿号和换行符</p></li><li><p>.next_sibling：获取当前Tag的下一个节点，属性通常是字符串或空白，真是结果是当前标签与下一个标签之间的顿号与换行符</p></li><li><p>.previous_siblings：获取当前Tag的上面所有的兄弟节点，返回一个生成器</p></li><li><p>.next_siblings：获取当前Tag的下面所有的兄弟节点，返回一个生成器</p></li><li><p>.previous_element：获取解析过程中上一个被解析的对象(字符串或tag)，可能与previous_sibling相同，但通常是不一样的</p></li><li><p>.next_element：获取解析过程中下一个被解析的对象(字符串或tag)，可能与next_sibling相同，但通常是不一样的</p></li><li><p>.previous_elements：返回一个生成器，可以向前访问文档的解析内容</p></li><li><p>.next_elements：返回一个生成器，可以向后访问文档的解析内容</p></li><li><p>.has_attr：判断Tag是否包含属性</p></li></ol><h1 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h1><p>find_all(name, attrs, recursive, text, **kwargs)</p><p>在上面的例子中我们简单介绍了find_all的使用，接下来介绍一下find_all的更多用法-过滤器。这些过滤器贯穿整个搜索API，过滤器可以被用在tag的name中，节点的属性等。</p><h2 id="name参数："><a href="#name参数：" class="headerlink" title="name参数："></a>name参数：</h2><p>字符串过滤：会查找与字符串完全匹配的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_list &#x3D; bs.find_all(&quot;a&quot;)</span><br><span class="line">print(a_list)</span><br></pre></td></tr></table></figure><p>正则表达式过滤：如果传入的是正则表达式，那么BeautifulSoup4会通过search()来匹配内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">import re </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line">t_list &#x3D; bs.find_all(re.compile(&quot;a&quot;)) </span><br><span class="line">for item in t_list: </span><br><span class="line">   print(item)</span><br></pre></td></tr></table></figure><p>列表：如果传入一个列表，BeautifulSoup4将会与列表中的任一元素匹配到的节点返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t_list &#x3D; bs.find_all([&quot;meta&quot;,&quot;link&quot;])</span><br><span class="line">for item in t_list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>方法：传入一个方法，根据方法来匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line">def name_is_exists(tag): </span><br><span class="line">    return tag.has_attr(&quot;name&quot;) </span><br><span class="line">t_list &#x3D; bs.find_all(name_is_exists) </span><br><span class="line">for item in t_list: </span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="kwargs参数："><a href="#kwargs参数：" class="headerlink" title="kwargs参数："></a>kwargs参数：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">import re </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html,&quot;html.parser&quot;) </span><br><span class="line"># 查询id&#x3D;head的Tag</span><br><span class="line">t_list &#x3D; bs.find_all(id&#x3D;&quot;head&quot;)</span><br><span class="line">print(t_list) </span><br><span class="line"># 查询href属性包含http:&#x2F;&#x2F;news.baidu.com的Tag</span><br><span class="line">t_list &#x3D; bs.find_all(href&#x3D;re.compile(&quot;http:&#x2F;&#x2F;news.baidu.com&quot;)) </span><br><span class="line">print(t_list) </span><br><span class="line"># 查询所有包含class的Tag(注意：class在Python中属于关键字，所以加_以示区别)</span><br><span class="line">t_list &#x3D; bs.find_all(class_&#x3D;True) </span><br><span class="line">for item in t_list: </span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="attrs参数："><a href="#attrs参数：" class="headerlink" title="attrs参数："></a>attrs参数：</h2><p>并不是所有的属性都可以使用上面这种方式进行搜索，比如HTML的data-*属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_list &#x3D; bs.find_all(data-foo&#x3D;&quot;value&quot;)</span><br></pre></td></tr></table></figure><p>如果执行这段代码，将会报错。我们可以使用attrs参数，定义一个字典来搜索包含特殊属性的tag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t_list &#x3D; bs.find_all(attrs&#x3D;&#123;&quot;data-foo&quot;:&quot;value&quot;&#125;)</span><br><span class="line">for item in t_list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="text参数："><a href="#text参数：" class="headerlink" title="text参数："></a>text参数：</h2><p>通过text参数可以搜索文档中的字符串内容，与name参数的可选值一样，text参数接受 字符串，正则表达式，列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">import re </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html, &quot;html.parser&quot;) </span><br><span class="line"></span><br><span class="line">t_list &#x3D; bs.find_all(text&#x3D;&quot;hao123&quot;) </span><br><span class="line">for item in t_list: </span><br><span class="line">    print(item) </span><br><span class="line">t_list &#x3D; bs.find_all(text&#x3D;[&quot;hao123&quot;, &quot;地图&quot;, &quot;贴吧&quot;]) </span><br><span class="line">for item in t_list: </span><br><span class="line">    print(item) </span><br><span class="line">t_list &#x3D; bs.find_all(text&#x3D;re.compile(&quot;\d&quot;)) </span><br><span class="line">for item in t_list: </span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>当我们搜索text中的一些特殊属性时，同样也可以传入一个方法来达到我们的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def length_is_two(text):</span><br><span class="line">    return text and len(text) &#x3D;&#x3D; 2</span><br><span class="line">t_list &#x3D; bs.find_all(text&#x3D;length_is_two)</span><br><span class="line">for item in t_list:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="limit参数："><a href="#limit参数：" class="headerlink" title="limit参数："></a>limit参数：</h2><p>可以传入一个limit参数来限制返回的数量，当搜索出的数据量为5，而设置了limit=2时，此时只会返回前2个数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">import re </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html, &quot;html.parser&quot;) </span><br><span class="line">t_list &#x3D; bs.find_all(&quot;a&quot;,limit&#x3D;2) </span><br><span class="line">for item in t_list: </span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>find_all除了上面一些常规的写法，还可以对其进行一些简写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 两者是相等的</span><br><span class="line"># t_list &#x3D; bs.find_all(&quot;a&quot;) &#x3D;&gt; t_list &#x3D; bs(&quot;a&quot;)</span><br><span class="line">t_list &#x3D; bs(&quot;a&quot;) # 两者是相等的</span><br><span class="line"># t_list &#x3D; bs.a.find_all(text&#x3D;&quot;新闻&quot;) &#x3D;&gt; t_list &#x3D; bs.a(text&#x3D;&quot;新闻&quot;)</span><br><span class="line">t_list &#x3D; bs.a(text&#x3D;&quot;新闻&quot;)</span><br></pre></td></tr></table></figure><p>find()</p><p>find()将返回符合条件的第一个Tag，有时我们只需要或一个Tag时，我们就可以用到find()方法了。当然了，也可以使用find_all()方法，传入一个limit=1，然后再取出第一个值也是可以的，不过未免繁琐。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup </span><br><span class="line">import re </span><br><span class="line">file &#x3D; open(&#39;.&#x2F;aa.html&#39;, &#39;rb&#39;) </span><br><span class="line">html &#x3D; file.read() </span><br><span class="line">bs &#x3D; BeautifulSoup(html, &quot;html.parser&quot;) </span><br><span class="line"># 返回只有一个结果的列表</span><br><span class="line">t_list &#x3D; bs.find_all(&quot;title&quot;,limit&#x3D;1) </span><br><span class="line">print(t_list) </span><br><span class="line"># 返回唯一值</span><br><span class="line">t &#x3D; bs.find(&quot;title&quot;) </span><br><span class="line">print(t) </span><br><span class="line"># 如果没有找到，则返回None</span><br><span class="line">t &#x3D; bs.find(&quot;abc&quot;) print(t)</span><br></pre></td></tr></table></figure><p>从结果可以看出find_all，尽管传入了limit=1，但是返回值仍然为一个列表，当我们只需要取一个值时，远不如find方法方便。但是如果未搜索到值时，将返回一个None</p><p>在上面介绍BeautifulSoup4的时候，我们知道可以通过bs.div来获取第一个div标签，如果我们需要获取第一个div下的第一个div，我们可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t &#x3D; bs.div.div</span><br><span class="line"># 等价于</span><br><span class="line">t &#x3D; bs.find(&quot;div&quot;).find(&quot;div&quot;)</span><br></pre></td></tr></table></figure><h1 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h1><p>BeautifulSoup支持发部分的CSS选择器，在Tag获取BeautifulSoup对象的.select()方法中传入字符串参数，即可使用CSS选择器的语法找到Tag:</p><h2 id="通过标签名查找"><a href="#通过标签名查找" class="headerlink" title="通过标签名查找"></a>通过标签名查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(bs.select(&#39;title&#39;))</span><br><span class="line">print(bs.select(&#39;a&#39;))</span><br></pre></td></tr></table></figure><h2 id="通过类名查找"><a href="#通过类名查找" class="headerlink" title="通过类名查找"></a>通过类名查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bs.select(&#39;.mnav&#39;))</span><br></pre></td></tr></table></figure><h2 id="通过id查找"><a href="#通过id查找" class="headerlink" title="通过id查找"></a>通过id查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bs.select(&#39;#u1&#39;))</span><br></pre></td></tr></table></figure><h2 id="组合查找"><a href="#组合查找" class="headerlink" title="组合查找"></a>组合查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bs.select(&#39;div .bri&#39;))</span><br></pre></td></tr></table></figure><h2 id="属性查找"><a href="#属性查找" class="headerlink" title="属性查找"></a>属性查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(bs.select(&#39;a[class&#x3D;&quot;bri&quot;]&#39;))</span><br><span class="line">print(bs.select(&#39;a[href&#x3D;&quot;http:&#x2F;&#x2F;tieba.baidu.com&quot;]&#39;))</span><br></pre></td></tr></table></figure><h2 id="直接子标签查找"><a href="#直接子标签查找" class="headerlink" title="直接子标签查找"></a>直接子标签查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t_list &#x3D; bs.select(&quot;head &gt; title&quot;)</span><br><span class="line">print(t_list)</span><br></pre></td></tr></table></figure><h2 id="兄弟节点标签查找"><a href="#兄弟节点标签查找" class="headerlink" title="兄弟节点标签查找"></a>兄弟节点标签查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t_list &#x3D; bs.select(&quot;.mnav ~ .bri&quot;)</span><br><span class="line">print(t_list)</span><br></pre></td></tr></table></figure><h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t_list &#x3D; bs.select(&quot;title&quot;)</span><br><span class="line">print(bs.select(&#39;title&#39;)[0].get_text())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> BeautifulSoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据可视化</title>
      <link href="posts/da913900/"/>
      <url>posts/da913900/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h1><h2 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h2><p>Flask作为Web框架，它的作用主要是为了开发Web应用程序。那么我们首先来了解下Web应用程序。Web应用程序 (World Wide Web)诞生最初的目的，是为了利用互联网交流工作文档。</p><p>一切从客户端发起请求开始。<br>所有Flask程序都必须创建一个程序实例。<br>当客户端想要获取资源时，一般会通过浏览器发起HTTP请求。<br>此时，Web服务器使用一种名为WEB服务器网关接口的WSGI（Web Server Gateway Interface）协议，把来自客户端的请求都交给Flask程序实例。<br>Flask使用Werkzeug来做路由分发（URL请求和视图函数之间的对应关系）。根据每个URL请求，找到具体的视图函数。<br>在Flask程序中，路由一般是通过程序实例的装饰器实现。通过调用视图函数，获取到数据后，把数据传入HTML模板文件中，模板引擎负责渲染HTTP响应数据，然后由Flask返回响应数据给浏览器，最后浏览器显示返回的结果。</p><p>Flask诞生于2010年，是Armin ronacher（人名）用Python语言基于Werkzeug工具箱编写的轻量级Web开发框架。它主要面向需求简单的小应用。<br>Flask本身相当于一个内核，其他几乎所有的功能都要用到扩展（邮件扩展Flask-Mail，用户认证FlaskLogin），都需要用第三方的扩展来实现。比如可以用Flask-extension加入ORM、窗体验证工具，文件上传、身份验证等。Flask没有默认使用的数据库，你可以选择MySQL，也可以用NoSQL。其 WSGI 工具箱采用 Werkzeug（路由模块） ，模板引擎则使用 Jinja2 。可以说Flask框架的核心就是Werkzeug和Jinja2。<br>Python最出名的框架要数Django，此外还有Flask、Tornado等框架。虽然Flask不是最出名的框架，但<br>是Flask应该算是最灵活的框架之一，这也是Flask受到广大开发者喜爱的原因。</p><p>Flask扩展包：</p><ul><li>Flask-SQLalchemy：操作数据库；</li><li>Flask-migrate：管理迁移数据库；</li><li>Flask-Mail:邮件；</li><li>Flask-WTF：表单；</li><li>Flask-script：插入脚本；</li><li>Flask-Login：认证用户状态；</li><li>Flask-RESTful：开发REST API的工具；</li><li>Flask-Bootstrap：集成前端Twitter Bootstrap框架；</li><li>Flask-Moment：本地化日期和时间；</li></ul><h2 id="Flask基本使用"><a href="#Flask基本使用" class="headerlink" title="Flask基本使用"></a>Flask基本使用</h2><h3 id="Hello-World-程序"><a href="#Hello-World-程序" class="headerlink" title="Hello World 程序"></a>Hello World 程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"># Flask类接收一个参数__name__</span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 路由解析通过用户访问的路径，匹配相应的函数</span><br><span class="line"># 装饰器的作用是将路由映射到视图函数index</span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;hello,world&quot;</span><br><span class="line"># Flask应用程序实例的run方法启动WEB服务器</span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)   #   debug 开启调试，更改代码内容，界面相应改变；</span><br><span class="line">                                                    #   host改成0.0.0.0让其他机器可以访问</span><br><span class="line">                                                    #   port&#x3D;3000端口号</span><br></pre></td></tr></table></figure><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><p>有时我们需要将同一类URL映射到同一个视图函数处理，比如：使用同一个视图函数 来显示不同用户的个人信息。<br>通过向规则参数添加变量部分，可以动态构建URL。此变量部分标记为。它作为关键字参数传递给与规则相关联的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;index&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;hello,world&quot;</span><br><span class="line"></span><br><span class="line"># 通过访问路径获取用户的字符串参数</span><br><span class="line">@app.route(&quot;&#x2F;user&#x2F;&lt;name&gt;&quot;)  # &lt;name&gt;表示name参数，需要将路径中的name参数传入下面的函数中</span><br><span class="line">def Wellcome(name):</span><br><span class="line">    return &quot;你好%s&quot;%name</span><br><span class="line"></span><br><span class="line"># 通过访问路径获取用户的整形参数</span><br><span class="line"># 路由传递的参数默认当做string处理，这里指定int，尖括号中冒号后面的内容是动态的</span><br><span class="line"># 除此之外还有 float 型</span><br><span class="line">@app.route(&quot;&#x2F;user&#x2F;&lt;int:id&gt;&quot;)</span><br><span class="line">def Wellcome1(id):</span><br><span class="line">    return &quot;你好%d号会员&quot;%id</span><br><span class="line"></span><br><span class="line"># 路由的路径不能重复，用户通过唯一路径访问特定函数</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)</span><br></pre></td></tr></table></figure><h3 id="使用-render-template-渲染界面"><a href="#使用-render-template-渲染界面" class="headerlink" title="使用 render_template 渲染界面"></a>使用 render_template 渲染界面</h3><p>上面的函数中可以 return HTML语句，达到渲染界面的效果，但这样做对于不方便可以使用 <code>render_template</code> 。首先从 <code>flask</code> 中导入 <code>render_template</code> 。在 同级目录下建立 <code>templates</code> 文件夹，在这个文件夹中创建一个 <code>HTML</code> 程序，取名 <code>index.html</code> 。在 <code>index</code> 函数中使用 <code>return render_template(&#39;index.html&#39;)</code> 就可以将写入相应的 <code>HTML</code> 程序在界面中渲染。</p><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)</span><br></pre></td></tr></table></figure><p>HTML程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="利用循环和判断语句控制-template-渲染"><a href="#利用循环和判断语句控制-template-渲染" class="headerlink" title="利用循环和判断语句控制 template 渲染"></a>利用循环和判断语句控制 template 渲染</h3><h4 id="使用-if-判断"><a href="#使用-if-判断" class="headerlink" title="使用 if 判断"></a>使用 if 判断</h4><p>在 <code>HTML</code> 程序中使用 <code>if</code> 判断，如下所示，其意义是当传入了 <code>title</code> 变量就是用传入的 <code>title</code> 变量，否则使用默认，此处默认设置的是 <code>Flask App</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt; &lt;!-- &#123;&#123;title&#125;&#125;变量传入此处 --&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;title&gt;Flask App&lt;&#x2F;title&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>当不传入参数时，网页名字就会变成 <code>Flask App</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br></pre></td></tr></table></figure><p>传入参数时，网页名字会使用传入的名字 <code>Home</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;index.html&#39;, title&#x3D;&#39;Home&#39;)</span><br></pre></td></tr></table></figure><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    return render_template(&#39;index.html&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)   #   debug 开启调试，更改代码内容，界面相应改变；</span><br><span class="line">                                                    #   host改成0.0.0.0让其他机器可以访问</span><br><span class="line">                                                    #   port&#x3D;3000端口号</span><br></pre></td></tr></table></figure><p><code>HTML</code> 程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt; &lt;!-- &#123;&#123;title&#125;&#125;变量传入此处 --&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;title&gt;Flask App&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="使用循环"><a href="#使用循环" class="headerlink" title="使用循环"></a>使用循环</h4><p>循环的基本语法如下，其意义是将 <code>data</code> 变量中的内容放到p标签中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for p in data %&#125;</span><br><span class="line">    &lt;p&gt; &#123;&#123;p&#125;&#125; &lt;&#x2F;p&gt;      </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>同样的需要传入 <code>data</code> 变量如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    paragraph&#x3D;[</span><br><span class="line">        &#39;section 1&#39;,</span><br><span class="line">        &#39;section 2&#39;,</span><br><span class="line">        &#39;section 3&#39;</span><br><span class="line">    ]</span><br><span class="line">    return render_template(&#39;index.html&#39;,title&#x3D;&#39;Home&#39;,data&#x3D;paragraph)</span><br></pre></td></tr></table></figure><p>显示结果效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210120201314.png"></p><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    paragraph&#x3D;[</span><br><span class="line">        &#39;section 1&#39;,</span><br><span class="line">        &#39;section 2&#39;,</span><br><span class="line">        &#39;section 3&#39;</span><br><span class="line">    ]</span><br><span class="line">    return render_template(&#39;index.html&#39;,title&#x3D;&#39;Home&#39;,data&#x3D;paragraph)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)   #   debug 开启调试，更改代码内容，界面相应改变；</span><br><span class="line">                                                    #   host改成0.0.0.0让其他机器可以访问</span><br><span class="line">                                                    #   port&#x3D;3000端口号</span><br></pre></td></tr></table></figure><p><code>HTML</code> 程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt; &lt;!-- &#123;&#123;title&#125;&#125;变量传入此处 --&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;title&gt;Flask App&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">        &#123;% for p in data %&#125;</span><br><span class="line">            &lt;p&gt; &#123;&#123;p&#125;&#125; &lt;&#x2F;p&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="向页面传递一个变量"><a href="#向页面传递一个变量" class="headerlink" title="向页面传递一个变量"></a>向页面传递一个变量</h3><p>值得注意的是，我们可以向 <code>HTML</code> 中传入变量。在 <code>render_template</code> 函数中自定义<code>title</code>变量，如：<code>render_template(&#39;index.html&#39;,title=title)</code> 。向 <code>render_template</code> 定义 <code>title</code> 变量后，需要在 <code>HTML</code> 中接收该变量。使用两个大括号，在两个大括号中间写入 <code>title</code> 如 <code>&#123;&#123;title&#125;&#125;</code> ，这样就实现向 <code>HTML</code> 传入变量。</p><h4 id="传递普通变量"><a href="#传递普通变量" class="headerlink" title="传递普通变量"></a>传递普通变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    title &#x3D; &quot;Flak App&quot;  #普通变量</span><br><span class="line">    return render_template(&quot;index.html&quot;,title&#x3D;title)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)</span><br></pre></td></tr></table></figure><p>HTML程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt;    &lt;!-- &#123;&#123;title&#125;&#125;变量传入此处 --&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h4><p>传递列表如何显示呢？可以用到上面讲的for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    title &#x3D; &quot;Flak App&quot;  #普通变量</span><br><span class="line">    name &#x3D; [&quot;小张&quot;,&quot;小赵&quot;,&quot;小王&quot;]   #列表</span><br><span class="line">    return render_template(&quot;index.html&quot;,title&#x3D;title,name&#x3D;name)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)</span><br></pre></td></tr></table></figure><p>HTML程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt;    &lt;!-- &#123;&#123;title&#125;&#125;变量传入此处 --&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">        今天值班的有：&lt;br&#x2F;&gt;</span><br><span class="line">        &#123;%for n in name%&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123;n&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &#123;%endfor%&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="传递字典"><a href="#传递字典" class="headerlink" title="传递字典"></a>传递字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    title &#x3D; &quot;Flak App&quot;  #普通变量</span><br><span class="line">    name &#x3D; [&quot;小张&quot;,&quot;小赵&quot;,&quot;小王&quot;]   #列表</span><br><span class="line">    task &#x3D; &#123;&quot;任务&quot;:&quot;打扫卫生&quot;,&quot;时间&quot;:&quot;3小时&quot;&#125;</span><br><span class="line">    return render_template(&quot;index.html&quot;,title&#x3D;title,name&#x3D;name,task&#x3D;task)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)</span><br></pre></td></tr></table></figure><p>HTML程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt;    &lt;!-- &#123;&#123;title&#125;&#125;变量传入此处 --&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;hello world&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">        今天值班的有：&lt;br&#x2F;&gt;</span><br><span class="line">        &#123;%for n in name%&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123;n&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &#123;%endfor%&#125;</span><br><span class="line"></span><br><span class="line">        &lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &#123;% for key,value in task.items()%&#125;  &lt;!-- 使用task.items()方法，将字典变成[( , ),( , ),( , )]形式 --&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;key&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;value&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &#123;%endfor%&#125;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="模板的继承和引用"><a href="#模板的继承和引用" class="headerlink" title="模板的继承和引用"></a>模板的继承和引用</h3><h4 id="模板继承和修改"><a href="#模板继承和修改" class="headerlink" title="模板继承和修改"></a>模板继承和修改</h4><p>模板中有很多共用的部分，我们可以把共用的部分写在一个文件中，可简化代码。<br>模板的继承，首先创建 <code>base.html</code> 写入一些内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;title&gt;Flask App&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Flask App&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在 <code>index.html</code> 中使用关键字 <code>extends</code> 继承模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210120211950.png"></p><p>有时会将继承的模板里面的内容进行更改，可以使用 <code>block</code> 语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;parent template&lt;&#x2F;h1&gt; &lt;!-- 可能要修改的内容 --&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">content 为该block的名字</span><br></pre></td></tr></table></figure><p>然后在 <code>index.html</code> 中同样使用上面的语句，对模板中的 <code>block</code> 里面的内容修改，如果不修改，就是原来 <code>block</code> 块中的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% for p in data %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123;p&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210120213308.png"></p><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    paragraph&#x3D;[</span><br><span class="line">        &#39;section 1&#39;,</span><br><span class="line">        &#39;section 2&#39;,</span><br><span class="line">        &#39;section 3&#39;</span><br><span class="line">    ]</span><br><span class="line">    return render_template(&#39;index.html&#39;,title&#x3D;&#39;Home&#39;,data&#x3D;paragraph)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)   #   debug 开启调试，更改代码内容，界面相应改变；</span><br><span class="line">                                                    #   host改成0.0.0.0让其他机器可以访问</span><br><span class="line">                                                    #   port&#x3D;3000端口号</span><br></pre></td></tr></table></figure><p><code>base.html</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;title&gt;Flask App&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Flask App&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &#123;% block content %&#125;</span><br><span class="line">            &lt;h1&gt;parent template&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><code>index.html</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% for p in data %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123;p&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="模板的引用"><a href="#模板的引用" class="headerlink" title="模板的引用"></a>模板的引用</h4><p>比如，对于导航栏，我们可以把他写在一个组件中。命名为 <code>navbar.html</code> ，例如我们在里面写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Flask App&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;&#x2F;home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure><p>然后可以再 <code>base.html</code> 中引用，使用如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#39;navbar.html&#39; %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20210120214437.png"></p><p>源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def index():</span><br><span class="line">    paragraph&#x3D;[</span><br><span class="line">        &#39;section 1&#39;,</span><br><span class="line">        &#39;section 2&#39;,</span><br><span class="line">        &#39;section 3&#39;</span><br><span class="line">    ]</span><br><span class="line">    return render_template(&#39;index.html&#39;,title&#x3D;&#39;Home&#39;,data&#x3D;paragraph)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)   #   debug 开启调试，更改代码内容，界面相应改变；</span><br><span class="line">                                                    #   host改成0.0.0.0让其他机器可以访问</span><br><span class="line">                                                    #   port&#x3D;3000端口号</span><br></pre></td></tr></table></figure><p><code>index.html</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &#123;% for p in data %&#125;</span><br><span class="line">        &lt;p&gt;&#123;&#123;p&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><code>base.html</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &#123;% if title %&#125;</span><br><span class="line">        &lt;title&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;title&gt;Flask App&lt;&#x2F;title&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &#123;% include &#39;navbar.html&#39; %&#125;</span><br><span class="line">        &#123;% block content %&#125;</span><br><span class="line">            &lt;h1&gt;parent template&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;% endblock %&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><code>navbar.html</code> 代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Flask App&lt;&#x2F;a&gt;&lt;a href&#x3D;&quot;&#x2F;home&quot;&gt;Home&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><p>我们已经看到，可以在URL规则中指定http方法。触发函数接收的Form数据可以以字典对象的形式收集它并将其转发到模板以在相应的网页上呈现它。<br>在以下示例中，’/sign’ URL会呈现具有表单的网页（sign.html）。填入的数据会发布到触发 result()函<br>数的’/result’ URL。<br>result()函数收集字典对象中的request.form中存在的表单数据，并将其发送给result.html。该模板动态呈现表单数据的HTML表格。</p><p>下面给出的是应用程序的Python代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,render_template,request</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 表单提交页面</span><br><span class="line">@app.route(&quot;&#x2F;sign&quot;)</span><br><span class="line">def sign():</span><br><span class="line">    return render_template(&quot;sign.html&quot;)</span><br><span class="line"></span><br><span class="line"># 表单结果显示页面</span><br><span class="line">@app.route(&quot;&#x2F;result&quot;,methods&#x3D;[&quot;POST&quot;,&quot;GET&quot;])    #默认为get，其他请求需要指定</span><br><span class="line">def result():</span><br><span class="line">    if request.method&#x3D;&#x3D;&quot;POST&quot;:</span><br><span class="line">        result&#x3D;request.form</span><br><span class="line">    return render_template(&quot;result.html&quot;,result&#x3D;result)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    app.run(debug&#x3D;True, host&#x3D;&quot;0.0.0.0&quot;,port&#x3D;3000)</span><br></pre></td></tr></table></figure><p>sign.html 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;title&lt;&#x2F;title&gt;    </span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;&#123;&#123;url_for(&#39;result&#39;)&#125;&#125;&quot; method&#x3D;&quot;POST&quot;&gt;    &lt;!-- 使用url_for(&quot;函数名&quot;) 指定提交的地址--&gt;</span><br><span class="line">            &lt;p&gt;姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;姓名&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;年龄&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;p&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>result.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &#123;% for key,value in result.items()%&#125;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;key&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;value&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &#123;%endfor%&#125;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="Echarts入门"><a href="#Echarts入门" class="headerlink" title="Echarts入门"></a>Echarts入门</h1><p>官方中文网址：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a><br>官方实例：<a href="https://echarts.apache.org/examples/zh/index.html">https://echarts.apache.org/examples/zh/index.html</a><br>官方教程：<a href="https://echarts.apache.org/zh/tutorial.html">https://echarts.apache.org/zh/tutorial.html</a></p><ul><li>引入Echarts </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;!-- 引入 ECharts 文件 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>设置显示区域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><ul><li><p>初始化Echarts</p></li><li><p>指定配置项和数据</p></li><li><p>设置配置项显示图表</p></li></ul><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;ECharts&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!-- 引入 echarts.js --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;echarts.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot; style&#x3D;&quot;width: 600px;height:400px;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">        &#x2F;&#x2F; 基于准备好的dom，初始化echarts实例</span><br><span class="line">        var myChart &#x3D; echarts.init(document.getElementById(&#39;main&#39;));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 指定图表的配置项和数据</span><br><span class="line">        var option &#x3D; &#123;</span><br><span class="line">            title: &#123;</span><br><span class="line">                text: &#39;ECharts 入门示例&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip: &#123;&#125;,</span><br><span class="line">            legend: &#123;</span><br><span class="line">                data:[&#39;销量&#39;]</span><br><span class="line">            &#125;,</span><br><span class="line">            xAxis: &#123;</span><br><span class="line">                data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;]</span><br><span class="line">            &#125;,</span><br><span class="line">            yAxis: &#123;&#125;,</span><br><span class="line">            series: [&#123;</span><br><span class="line">                name: &#39;销量&#39;,</span><br><span class="line">                type: &#39;bar&#39;,</span><br><span class="line">                data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 使用刚指定的配置项和数据显示图表。</span><br><span class="line">        myChart.setOption(option);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="WordCloud"><a href="#WordCloud" class="headerlink" title="WordCloud"></a>WordCloud</h1><h2 id="WordCloud示例程序"><a href="#WordCloud示例程序" class="headerlink" title="WordCloud示例程序"></a>WordCloud示例程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 引入必要的库</span><br><span class="line">import jieba        #分中文词</span><br><span class="line">import numpy as np  #矩阵运算</span><br><span class="line">import sqlite3      #数据库</span><br><span class="line">from matplotlib import pyplot as plt    #绘图数据可视化</span><br><span class="line">from wordcloud import WordCloud         #词云</span><br><span class="line">from PIL import Image                   #图片处理</span><br><span class="line"></span><br><span class="line"># 准备词云所需的词</span><br><span class="line">con&#x3D;sqlite3.connect(&quot;movies.db&quot;)</span><br><span class="line">cur&#x3D;con.cursor()</span><br><span class="line">sql&#x3D;&quot;select instroduction from movies250&quot;</span><br><span class="line">data &#x3D;cur.execute(sql)</span><br><span class="line">text&#x3D;&quot;&quot;</span><br><span class="line">for item in data:</span><br><span class="line">    text&#x3D;text+item[0]</span><br><span class="line">    # print(type(item))</span><br><span class="line">    </span><br><span class="line">cur.close()</span><br><span class="line">con.close()</span><br><span class="line"></span><br><span class="line"># 分词</span><br><span class="line">cut &#x3D;jieba.cut(text)</span><br><span class="line">string &#x3D;&#39; &#39;.join(cut)   # 此处&#39; &#39;双引号中间有空格</span><br><span class="line">print(len(string))  #打印分词数量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img &#x3D; Image.open(r&quot;.&#x2F;static&#x2F;assets&#x2F;img&#x2F;tree.jpg&quot;)   # 打开图片</span><br><span class="line">img_array &#x3D; np.array(img)   # 将图片转化成数组</span><br><span class="line">wc&#x3D;WordCloud(</span><br><span class="line">    background_color&#x3D;&#39;white&#39;,           # 设置背景颜色</span><br><span class="line">    mask&#x3D;img_array,                     # 设置背景图片</span><br><span class="line">    font_path&#x3D;&#39;&#x2F;mnt&#x2F;c&#x2F;Windows&#x2F;Fonts&#x2F;msyhl.ttc&#39;)     #使用WSL子系统需要指定完整的字体路径</span><br><span class="line">                                                    # 若是有中文的话，必须添加中文字体，不然会出现方框，不出现汉字</span><br><span class="line"></span><br><span class="line">wc.generate_from_text(string)</span><br><span class="line"></span><br><span class="line"># 绘制图片</span><br><span class="line">fig&#x3D;plt.figure(1)   #新建一个名叫 Figure1的画图窗口</span><br><span class="line">plt.imshow(wc)      #显示图片，同时也显示其格式</span><br><span class="line">plt.axis(&#39;off&#39;) #是否显示坐标轴</span><br><span class="line"></span><br><span class="line">plt.savefig(r&quot;.&#x2F;static&#x2F;assets&#x2F;img&#x2F;word.jpg&quot;,dpi&#x3D;400)    #保存合成图片，dpi是设定分辨率，默认为400</span><br></pre></td></tr></table></figure><h2 id="WordCloud配置"><a href="#WordCloud配置" class="headerlink" title="WordCloud配置"></a>WordCloud配置</h2><p>WordCloud个参数的含义：</p><p>font_path : string #字体路径，需要展现什么字体就把该字体路径+后缀名写上，如：font_path = ‘黑体.ttf’<br>width : int (default=400) #输出的画布宽度，默认为400像素<br>height : int (default=200) #输出的画布高度，默认为200像素<br>prefer_horizontal : float (default=0.90) #词语水平方向排版出现的频率，默认 0.9 （所以词语垂直方向排版出现频率为 0.1 ）<br>mask : nd-array or None (default=None) #如果参数为空，则使用二维遮罩绘制词云。如果mask 非空，设置的宽高值将被忽略，遮罩形状被 mask 取代。除全白（#FFFFFF）的部分将不会绘制，其余部分会用于绘制词云。如：bg_pic = imread(‘读取一张图片.png’)，背景图片的画布一定要设置为白色（#FFFFFF），然后显示的形状为不是白色的其他颜色。可以用ps工具将自己要显示的形状复制到一个纯白色的画布上再保存，就ok了。<br>scale : float (default=1) #按照比例进行放大画布，如设置为1.5，则长和宽都是原来画布的1.5倍<br>min_font_size : int (default=4) #显示的最小的字体大小<br>font_step : int (default=1) #字体步长，如果步长大于1，会加快运算但是可能导致结果出现较大的误差<br>max_words : number (default=200) #要显示的词的最大个数<br>stopwords : set of strings or None #设置需要屏蔽的词，如果为空，则使用内置的STOPWORDS<br>background_color : color value (default=”black”) #背景颜色，如background_color=’white’,背景颜色为白色<br>max_font_size : int or None (default=None) #显示的最大的字体大小<br>mode : string (default=”RGB”) #当参数为“RGBA”并且background_color不为空时，背景为透明<br>relative_scaling : float (default=.5) #词频和字体大小的关联性<br>color_func : callable, default=None #生成新颜色的函数，如果为空，则使用 self.color_func<br>regexp : string or None (optional) #使用正则表达式分隔输入的文本<br>collocations : bool, default=True #是否包括两个词的搭配<br>colormap : string or matplotlib colormap, default=”viridis” #给每个单词随机分配颜色，若指定color_func，则忽略该方法<br>random_state : int or None #为每个单词返回一个PIL颜色<br>fit_words(frequencies) #根据词频生成词云<br>generate(text) #根据文本生成词云<br>generate_from_frequencies(frequencies[, …]) #根据词频生成词云<br>generate_from_text(text) #根据文本生成词云<br>process_text(text) #将长文本分词并去除屏蔽词（此处指英语，中文分词还是需要自己用别的库先行实现，使用上面的 fit_words(frequencies) ）<br>recolor([random_state, color_func, colormap]) #对现有输出重新着色。重新上色会比重新生成整个词云快很多<br>to_array() #转化为 numpy array<br>to_file(filename) #输出到文件</p><h1 id="豆瓣Top250项目可视化代码以及资料"><a href="#豆瓣Top250项目可视化代码以及资料" class="headerlink" title="豆瓣Top250项目可视化代码以及资料"></a>豆瓣Top250项目可视化代码以及资料</h1><p>Github仓库：<a href="https://github.com/imgyh/DouBan_Top250">https://github.com/imgyh/DouBan_Top250</a></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Echarts </tag>
            
            <tag> WordCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python网络爬虫</title>
      <link href="posts/ee4f8e00/"/>
      <url>posts/ee4f8e00/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>该笔记围绕豆瓣TOP250页面进行学习，爬取豆瓣TOP250影片信息。网址为 <a href="https://movie.douban.com/top250?start=25">https://movie.douban.com/top250?start=25</a> 其中 <code>?start=25</code> 表示显示第25个以后的25个影片信息，如果不加该参数，则从第一个开始显示。</p><p>我们需要安装相应的第三方模块，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup   #网页解析获取数据</span><br><span class="line">import re   #正则表达式进行文字匹配</span><br><span class="line">import urllib.request , urllib.error , requests   #网页请求</span><br><span class="line">import xlwt #进行Excel操作</span><br><span class="line">import sqlite3  #进行sqlite数据库操作</span><br></pre></td></tr></table></figure><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 主函数</span><br><span class="line">def main():</span><br><span class="line">    baseurl &#x3D; &quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&quot;</span><br><span class="line">    # 1.爬取网页</span><br><span class="line">    GetData(baseurl)</span><br><span class="line">    # 3.保存数据</span><br><span class="line">    savepath &#x3D; &quot;.&#x2F;top250.xls&quot;</span><br><span class="line">    SaveData(savepath)</span><br><span class="line"></span><br><span class="line">def GetData(baseurl):</span><br><span class="line">    datalist&#x3D;[]</span><br><span class="line">    # 2.边爬取边解析数据</span><br><span class="line">    return datalist</span><br><span class="line"></span><br><span class="line">def SaveData(savepath):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="urllib库介绍"><a href="#urllib库介绍" class="headerlink" title="urllib库介绍"></a>urllib库介绍</h2><p>基本的请求 是python内置的一个http请求库，不需要额外的安装。只需要关注请求的链接，参数，提供了强大的 解析。<br>urllb.request 请求模块<br>urllib.error  异常处理模块<br>urllib.parse  解析模块</p><p>参考： <a href="https://www.cnblogs.com/qikeyishu/p/10748497.html">https://www.cnblogs.com/qikeyishu/p/10748497.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># get请求</span><br><span class="line">import urllib.request , urllib.error</span><br><span class="line">response&#x3D;urllib.request.urlopen(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)</span><br><span class="line">print(response.read().decode(&quot;utf-8&quot;))  #对读到的响应转码成utf-8</span><br><span class="line">print(response.status)  # 获取状态码</span><br><span class="line">print(response.getheaders())    #获取所有响应头信息</span><br><span class="line">print(response.getheader(&quot;Bdqid&quot;))    #获取某个响应头信息</span><br><span class="line"></span><br><span class="line"># post请求</span><br><span class="line">import urllib.request , urllib.error</span><br><span class="line">import urllib.parse</span><br><span class="line">data &#x3D; bytes(urllib.parse.urlencode(&#123;&quot;hello&quot;:&quot;world&quot;&#125;),encoding&#x3D;&quot;utf-8&quot;)    #生成测试数据</span><br><span class="line">res &#x3D; urllib.request.urlopen(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;,data&#x3D;data)</span><br><span class="line">print(res.read().decode(&quot;utf-8&quot;))</span><br><span class="line"></span><br><span class="line"># 超时处理</span><br><span class="line">import urllib.request , urllib.error</span><br><span class="line">try:</span><br><span class="line">    response&#x3D;urllib.request.urlopen(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;,timeout&#x3D;0.01) # 设置超时时间，超过0.01s没返回就报错</span><br><span class="line">    print(response.read().decode(&quot;utf-8&quot;))</span><br><span class="line">except urllib.error.URLError as result:</span><br><span class="line">    print(&quot;Time Out!&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 封装请求头访问</span><br><span class="line">import urllib.request , urllib.error</span><br><span class="line">import urllib.parse</span><br><span class="line">url&#x3D;&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;</span><br><span class="line">data &#x3D; bytes(urllib.parse.urlencode(&#123;&quot;hello&quot;:&quot;world&quot;&#125;),encoding&#x3D;&quot;utf-8&quot;)    #生成测试数据</span><br><span class="line">headers&#x3D;&#123;</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.104 Safari&#x2F;537.36&quot;</span><br><span class="line">&#125;</span><br><span class="line">req &#x3D; urllib.request.Request(url&#x3D;url,data&#x3D;data,headers&#x3D;headers,method&#x3D;&quot;POST&quot;)   #封装请求对象,由于urlopen无法传参数，声明一个Request对象 </span><br><span class="line">res &#x3D; urllib.request.urlopen(req)</span><br><span class="line">print(res.read().decode(&quot;utf-8&quot;))</span><br></pre></td></tr></table></figure><h1 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h1><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p>BeautifulSoup使用详解参见：</p><a href="/posts/e74af289/" title="BeautifulSoup详解">BeautifulSoup详解</a><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="正则表达式常用操作符"><a href="#正则表达式常用操作符" class="headerlink" title="正则表达式常用操作符"></a>正则表达式常用操作符</h3><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">表示任何单字符</td><td align="left"></td></tr><tr><td align="left">[ ]</td><td align="left">字符集对单个字符给出取值范围</td><td align="left">[abc]表示a,b,c [a-z]表示a-z的字符</td></tr><tr><td align="left">[^ ]</td><td align="left">非字符集，对单个字符给出排除范围</td><td align="left">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="left">*</td><td align="left">前面一个字符0次或无限次扩展</td><td align="left">abc*表示ab,abc,abcc等</td></tr><tr><td align="left">+</td><td align="left">前面一个字符1次或无限次扩展</td><td align="left">abc*表示abc,abcc等</td></tr><tr><td align="left">?</td><td align="left">前面一个字符0次或1次扩展</td><td align="left">abc?表示ab,abc</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">左右表达式任意一个</td></tr><tr><td align="left">{m}</td><td align="left">扩展前一个字符m次</td><td align="left">ab{2}c表示abbc</td></tr><tr><td align="left">{m,n}</td><td align="left">扩展前一个字符m至n次(包含n)</td><td align="left">ab{1,2}c表示abc,abbc</td></tr><tr><td align="left">^</td><td align="left">匹配字符串开头</td><td align="left">^abc表示abc且在一个字符串开头</td></tr><tr><td align="left">$</td><td align="left">匹配字符串结尾</td><td align="left">abc$表示abc且在一个字符串结尾</td></tr><tr><td align="left">( )</td><td align="left">分组标记</td><td align="left">(abc)表示abc</td></tr><tr><td align="left">\d</td><td align="left">数字,邓嘉怡[0-9]</td><td align="left"></td></tr><tr><td align="left">\w</td><td align="left">单词字符，等价于[a-zA-Z0-9_]</td><td align="left"></td></tr></tbody></table><h3 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h3><table><thead><tr><th align="left">函数</th><th align="left">功能</th></tr></thead><tbody><tr><td align="left">re.search()</td><td align="left">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="left">re.match()</td><td align="left">在一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="left">re.findall()</td><td align="left">搜索字符串，以列表形式返回全部匹配到的子串</td></tr><tr><td align="left">re.sub()</td><td align="left">在一个字符串中替换所有配正则表达式的子串，返回替换后的字符串</td></tr><tr><td align="left">re.split()</td><td align="left">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="left">re.finditer()</td><td align="left">搜索字符串，返回一个结果的迭代类型，每个迭代元素是个mat对象</td></tr></tbody></table><h3 id="控制匹配的模式"><a href="#控制匹配的模式" class="headerlink" title="控制匹配的模式"></a>控制匹配的模式</h3><p>正则表达式可以包含一些可选标志修饰符来控制匹配的模式。修饰符被指定为一个可选的标志。 多个标志可以通过按位 OR(|) 它们来指定。如 re.I | re.M 被设置成 I 和 M 标志：</p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">re.l</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left">re.L</td><td align="left">做本地化识别匹配</td></tr><tr><td align="left">re.M</td><td align="left">多行匹配影响^和$</td></tr><tr><td align="left">re.S</td><td align="left">使.匹配包括换行在内的所有字符</td></tr><tr><td align="left">re.U</td><td align="left">根据Unicode字符集解析字符，影响\b,\B\w,\W</td></tr><tr><td align="left">re.X</td><td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><h3 id="Re模块下的函数"><a href="#Re模块下的函数" class="headerlink" title="Re模块下的函数"></a>Re模块下的函数</h3><p>compile(pattern)：创建模式对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import re </span><br><span class="line">pat&#x3D;re.compile(&quot;A&quot;) </span><br><span class="line">#m&#x3D;pat.search(&quot;CBA&quot;) </span><br><span class="line"></span><br><span class="line">m&#x3D;pat.search(&quot;ABC&quot;) </span><br><span class="line">#等价于 re.search( A , CBA ) </span><br><span class="line">print(m)</span><br><span class="line">#&lt;re.Match object; span&#x3D;(2, 3), match&#x3D;&#39;A&#39;&gt;  表示匹配到了</span><br><span class="line"></span><br><span class="line">m&#x3D;pat.search(&quot;CBD&quot;) </span><br><span class="line">print(m)        #None   表示没匹配到</span><br></pre></td></tr></table></figure><p>search(pattern,string)：在字符串中寻找模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re </span><br><span class="line">m &#x3D; re.search(&quot;asd&quot; , &quot;ASDasd&quot; ) </span><br><span class="line">print(m)</span><br><span class="line"># &lt;_sre.SRE_Match object at 0xb72cd6e8&gt;  #匹配到了，返回MatchObject（True）</span><br><span class="line"></span><br><span class="line">m &#x3D; re.search(&quot;asd&quot;  , &quot;ASDASD&quot; ) </span><br><span class="line">print(m)                                 #没有匹配到，返回None（False）</span><br></pre></td></tr></table></figure><p>match(pattern,string)：在字符串开始处匹配模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 等价于</span><br><span class="line">pat&#x3D;re.compile( &quot;a&quot; )</span><br><span class="line">print(pat.match( &quot;Aasd&quot; ))</span><br><span class="line">#输出None</span><br><span class="line"></span><br><span class="line">print(pat.match(&quot;aASD&quot; ))</span><br><span class="line">#输出 &lt;_sre.SRE_Match object at 0xb72cd6e8&gt;</span><br><span class="line"></span><br><span class="line"># 上面的函数返回都可以在if条件语句中进行判断：</span><br><span class="line">if pat.search(&quot;asd&quot;):</span><br><span class="line">    print (&quot;OK&quot;)   #OK        #找到返回</span><br><span class="line">if re.search(&quot;a&quot;,&quot;ASD&quot; ):</span><br><span class="line">    print (&quot;OK&quot;)            #没有找到 </span><br></pre></td></tr></table></figure><p>split(pattern,string)：根据模式分割字符串,返回列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">re.split( , , a,s,d,asd )</span><br><span class="line">[ a , s , d , asd ]          #返回列表</span><br><span class="line"></span><br><span class="line">pat &#x3D; re.compile( , )</span><br><span class="line">pat.split( a,s,d,asd )</span><br><span class="line">[ a , s , d , asd ]          #返回列表</span><br><span class="line"></span><br><span class="line">re.split( [, ]+ , a ,  s  ,d     ,,,,,asd )   #正则匹配：[, ]+，后面说明</span><br><span class="line">[ a , s , d , asd ]</span><br><span class="line"></span><br><span class="line">re.split( [, ]+ , a ,  s  ,d     ,,,,,asd ,maxsplit&#x3D;2) # maxsplit 多分割次数</span><br><span class="line">[ a , s , d     ,,,,,asd ]</span><br><span class="line"></span><br><span class="line">pat &#x3D; re.compile( [, ]+ )                     #正则匹配：[, ]+，后面说明</span><br><span class="line">pat.split( a ,  s  ,d     ,,,,,asd ,maxsplit&#x3D;2)        # maxsplit 多分割次数</span><br><span class="line">[ a , s , d     ,,,,,asd ]</span><br></pre></td></tr></table></figure><p>ﬁndall(pattern,string)：列表形式返回匹配项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">print(re.findall( &quot;a&quot; , &quot;ASDaDFGAa&quot; ))</span><br><span class="line">#[ a , a ]                  #列表形式返回匹配到的字符串</span><br><span class="line"></span><br><span class="line">pat &#x3D; re.compile( &quot;a&quot; )</span><br><span class="line">print(pat.findall( &quot;ASDaDFGAa&quot; ))</span><br><span class="line">#[ a , a ]         #列表形式返回匹配到的字符串</span><br><span class="line"></span><br><span class="line">pat &#x3D; re.compile( &quot;[A-Z]+&quot; )    #正则匹配：[A-Z]+</span><br><span class="line">print(pat.findall( &quot;ASDcDFGAa&quot; ))</span><br><span class="line">#[ ASD , DFGA ]                 #找到匹配到的字符串</span><br><span class="line"></span><br><span class="line">pat &#x3D; re.compile( [A-Z] ) pat.findall( ASDcDFGAa ) #正则匹配：[A-Z]+</span><br><span class="line">#[ A , S , D , D , F , G , A ]  #找到匹配到的字符串</span><br><span class="line"></span><br><span class="line">pat &#x3D; re.compile( [A-Za-z] )   #正则匹配：[A-Za-z]+  匹配所有单词</span><br><span class="line">pat.findall( ASDcDFGAa )</span><br><span class="line">[ A , S , D , c , D , F , G , A , a ]</span><br></pre></td></tr></table></figure><p>sub(pat,repl,string) ：用repl替换 pat匹配项 (留的是中间的，因为中间在中心)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re.sub( a , A , abcasd )   #找到a用A替换</span><br><span class="line">AbcAsd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解析部分代码"><a href="#解析部分代码" class="headerlink" title="解析部分代码"></a>解析部分代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup   #网页解析获取数据</span><br><span class="line">import re   #正则表达式进行文字匹配</span><br><span class="line">import urllib.request , urllib.error , requests   #网页请求</span><br><span class="line">import xlwt #进行Excel操作</span><br><span class="line">import sqlite3  #进行sqlite数据库操作</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">def main():</span><br><span class="line">    baseurl &#x3D; &quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&quot;</span><br><span class="line">    # 1.爬取网页</span><br><span class="line">    GetData(baseurl)</span><br><span class="line">    # 3.保存数据</span><br><span class="line">    savepath &#x3D; &quot;.&#x2F;豆瓣TOP250.xls&quot;</span><br><span class="line">    SaveData(savepath)</span><br><span class="line"></span><br><span class="line">#详情链接</span><br><span class="line">findlink&#x3D;re.compile(r&#39;&lt;a href&#x3D;&quot;(.*?)&quot;&gt;&#39;)    #创建正则表达式对象，表示规则</span><br><span class="line">#影片图片</span><br><span class="line">findsrc&#x3D;re.compile(r&#39;&lt;img.*src&#x3D;&quot;(.*?)&quot;&#39;,re.S)   #re.S让换行符包含在.匹配符其中</span><br><span class="line">#影片名字</span><br><span class="line">findtitle&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)   </span><br><span class="line">#影片评分</span><br><span class="line">findrating&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;rating_num&quot; property&#x3D;&quot;v:average&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)    </span><br><span class="line">#影片评价人数</span><br><span class="line">findjudge&#x3D;re.compile(r&#39;&lt;span&gt;(\d*?)人评价&lt;&#x2F;span&gt;&#39;)  </span><br><span class="line">#影片概况</span><br><span class="line">findinq&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;inq&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;) </span><br><span class="line">#影片相关内容</span><br><span class="line">findbd&#x3D;re.compile(r&#39;&lt;p class&#x3D;&quot;&quot;&gt;(.*?)&lt;&#x2F;p&gt;&#39;,re.S)</span><br><span class="line"></span><br><span class="line">def GetData(baseurl):</span><br><span class="line">    datalist&#x3D;[]</span><br><span class="line">    for i in range(0,10):</span><br><span class="line">        url &#x3D; baseurl + str(i*25)   # 调用获取页面信息函数10次</span><br><span class="line">        html &#x3D;AskURL(url)</span><br><span class="line">        # 2.边爬取边解析数据</span><br><span class="line">        soup &#x3D; BeautifulSoup(html,&quot;html.parser&quot;)</span><br><span class="line">        for item in soup.find_all(&#39;div&#39;,class_&#x3D;&quot;item&quot;): #查找符合要求的字符串形成列表，</span><br><span class="line">            data &#x3D; []   #保存一部影片所有信息</span><br><span class="line">            item&#x3D;str(item)</span><br><span class="line">            </span><br><span class="line">            #影片详情页链接</span><br><span class="line">            link&#x3D;re.findall(findlink,item)[0]   #使用re库查找指定字符串</span><br><span class="line">            data.append(link)                   #添加链接</span><br><span class="line"></span><br><span class="line">            #影片图片</span><br><span class="line">            imgsrc&#x3D;re.findall(findsrc,item)[0]</span><br><span class="line">            data.append(imgsrc)                 #添加图片</span><br><span class="line"></span><br><span class="line">            #影片名字</span><br><span class="line">            titles&#x3D;re.findall(findtitle,item)   #片名可能只有中文名没有外文名</span><br><span class="line">            if (len(titles)&#x3D;&#x3D;2):</span><br><span class="line">                data.append(titles[0])  #添加中文名</span><br><span class="line">                data.append(titles[1].replace(&quot;&#x2F;&quot;,&quot;&quot;))  #添加外文名</span><br><span class="line">            else:</span><br><span class="line">                data.append(titles[0])</span><br><span class="line">                data.append(&quot;&quot;)        #留空</span><br><span class="line">            </span><br><span class="line">            #影片评分</span><br><span class="line">            rating&#x3D;re.findall(findrating,item)[0]</span><br><span class="line">            data.append(rating)                     #添加评分</span><br><span class="line"></span><br><span class="line">            #影片评价人数</span><br><span class="line">            judgenum&#x3D;re.findall(findjudge,item)[0]</span><br><span class="line">            data.append(judgenum)                     #添加评分</span><br><span class="line"></span><br><span class="line">            #影片概况</span><br><span class="line">            inq&#x3D;re.findall(findinq,item)</span><br><span class="line">            if(len(inq)!&#x3D;0):</span><br><span class="line">                inq&#x3D;inq[0].replace(&quot;。&quot;,&quot;&quot;)    #去掉句号</span><br><span class="line">                data.append(inq)                #添加概况</span><br><span class="line">            else:</span><br><span class="line">                data.append(&quot;&quot;)                 #留空</span><br><span class="line">            </span><br><span class="line">            #影片相关内容</span><br><span class="line">            bd&#x3D;re.findall(findbd,item)[0]</span><br><span class="line">            bd&#x3D;re.sub(&quot;&lt;br(\s+)?&#x2F;&gt;(\s+)?&quot;,&quot;&quot;,bd)</span><br><span class="line">            bd&#x3D;re.sub(&quot;&#x2F;&quot;,&quot;&quot;,bd)    #去掉 &#x2F;</span><br><span class="line">            data.append(bd.strip()) #去掉空格，并添加进data</span><br><span class="line"></span><br><span class="line">            datalist.append(data)</span><br><span class="line">    </span><br><span class="line">    print(datalist)</span><br><span class="line"></span><br><span class="line">    return datalist</span><br><span class="line"></span><br><span class="line">#保存数据</span><br><span class="line">def SaveData(savepath):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">#得到一个指定url的内容</span><br><span class="line">def AskURL(url):</span><br><span class="line">    headers&#x3D;&#123;   #模拟浏览器头部信息，向豆瓣发送请求</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.104 Safari&#x2F;537.36&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    request &#x3D; urllib.request.Request(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D;urllib.request.urlopen(request)</span><br><span class="line">        html &#x3D; response.read().decode(&quot;utf-8&quot;)</span><br><span class="line">        # print(html)</span><br><span class="line">    except urllib.error.URLError as e:</span><br><span class="line">        if hasattr(e,&quot;code&quot;):</span><br><span class="line">            print(e.code)</span><br><span class="line">        if hasattr(e,&quot;reason&quot;):</span><br><span class="line">            print(e.reason)</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h1><h2 id="保存数据到Excel"><a href="#保存数据到Excel" class="headerlink" title="保存数据到Excel"></a>保存数据到Excel</h2><p>参考: <a href="https://www.cnblogs.com/caesar-id/p/11802440.html">https://www.cnblogs.com/caesar-id/p/11802440.html</a></p><p>使用xlwt保存数据到Excel的小demo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line">workbook&#x3D;xlwt.Workbook(encoding&#x3D;&quot;utf-8&quot;)    #创建workbook对象</span><br><span class="line">worksheet&#x3D;workbook.add_sheet(&quot;sheet1&quot;)      #创建工作表取名sheet1</span><br><span class="line">worksheet.write(0,0,&quot;hello&quot;)                #在sheet1中的第一行第一列写入hello</span><br><span class="line">workbook.save(&quot;student.xls&quot;)                #保存数据表取名为student.xls</span><br></pre></td></tr></table></figure><h2 id="保存数据到Excel代码"><a href="#保存数据到Excel代码" class="headerlink" title="保存数据到Excel代码"></a>保存数据到Excel代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup   #网页解析获取数据</span><br><span class="line">import re   #正则表达式进行文字匹配</span><br><span class="line">import urllib.request , urllib.error , requests   #网页请求</span><br><span class="line">import xlwt #进行Excel操作</span><br><span class="line">import sqlite3  #进行sqlite数据库操作</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">def main():</span><br><span class="line">    baseurl &#x3D; &quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&quot;</span><br><span class="line">    # 1.爬取网页</span><br><span class="line">    datalist&#x3D;GetData(baseurl)</span><br><span class="line">    # 3.保存数据</span><br><span class="line">    savepath &#x3D; &quot;.&#x2F;豆瓣TOP250.xls&quot;</span><br><span class="line">    SaveData(datalist,savepath)</span><br><span class="line"></span><br><span class="line">#详情链接</span><br><span class="line">findlink&#x3D;re.compile(r&#39;&lt;a href&#x3D;&quot;(.*?)&quot;&gt;&#39;)    #创建正则表达式对象，表示规则</span><br><span class="line">#影片图片</span><br><span class="line">findsrc&#x3D;re.compile(r&#39;&lt;img.*src&#x3D;&quot;(.*?)&quot;&#39;,re.S)   #re.S让换行符包含在.匹配符其中</span><br><span class="line">#影片名字</span><br><span class="line">findtitle&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)</span><br><span class="line">#影片评分</span><br><span class="line">findrating&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;rating_num&quot; property&#x3D;&quot;v:average&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)</span><br><span class="line">#影片评价人数</span><br><span class="line">findjudge&#x3D;re.compile(r&#39;&lt;span&gt;(\d*?)人评价&lt;&#x2F;span&gt;&#39;) </span><br><span class="line">#影片概况</span><br><span class="line">findinq&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;inq&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)</span><br><span class="line">#影片相关内容</span><br><span class="line">findbd&#x3D;re.compile(r&#39;&lt;p class&#x3D;&quot;&quot;&gt;(.*?)&lt;&#x2F;p&gt;&#39;,re.S)</span><br><span class="line"></span><br><span class="line">def GetData(baseurl):</span><br><span class="line">    datalist&#x3D;[]</span><br><span class="line">    for i in range(0,10):</span><br><span class="line">        url &#x3D; baseurl + str(i*25)   # 调用获取页面信息函数10次</span><br><span class="line">        html &#x3D;AskURL(url)</span><br><span class="line">        # 2.边爬取边解析数据</span><br><span class="line">        soup &#x3D; BeautifulSoup(html,&quot;html.parser&quot;)</span><br><span class="line">        for item in soup.find_all(&#39;div&#39;,class_&#x3D;&quot;item&quot;): #查找符合要求的字符串形成列表，</span><br><span class="line">            data &#x3D; []   #保存一部影片所有信息</span><br><span class="line">            item&#x3D;str(item)</span><br><span class="line">            </span><br><span class="line">            #影片详情页链接</span><br><span class="line">            link&#x3D;re.findall(findlink,item)[0]   #使用re库查找指定字符串</span><br><span class="line">            data.append(link)                   #添加链接</span><br><span class="line"></span><br><span class="line">            #影片图片</span><br><span class="line">            imgsrc&#x3D;re.findall(findsrc,item)[0]</span><br><span class="line">            data.append(imgsrc)                 #添加图片</span><br><span class="line"></span><br><span class="line">            #影片名字</span><br><span class="line">            titles&#x3D;re.findall(findtitle,item)   #片名可能只有中文名没有外文名</span><br><span class="line">            if (len(titles)&#x3D;&#x3D;2):</span><br><span class="line">                data.append(titles[0])  #添加中文名</span><br><span class="line">                data.append(titles[1].replace(&quot;&#x2F;&quot;,&quot;&quot;))  #添加外文名</span><br><span class="line">            else:</span><br><span class="line">                data.append(titles[0])</span><br><span class="line">                data.append(&quot;&quot;)        #留空</span><br><span class="line">            </span><br><span class="line">            #影片评分</span><br><span class="line">            rating&#x3D;re.findall(findrating,item)[0]</span><br><span class="line">            data.append(rating)                     #添加评分</span><br><span class="line"></span><br><span class="line">            #影片评价人数</span><br><span class="line">            judgenum&#x3D;re.findall(findjudge,item)[0]</span><br><span class="line">            data.append(judgenum)                     #添加评分</span><br><span class="line"></span><br><span class="line">            #影片概况</span><br><span class="line">            inq&#x3D;re.findall(findinq,item)</span><br><span class="line">            if(len(inq)!&#x3D;0):</span><br><span class="line">                inq&#x3D;inq[0].replace(&quot;。&quot;,&quot;&quot;)    #去掉句号</span><br><span class="line">                data.append(inq)                #添加概况</span><br><span class="line">            else:</span><br><span class="line">                data.append(&quot;&quot;)                 #留空</span><br><span class="line">            </span><br><span class="line">            #影片相关内容</span><br><span class="line">            bd&#x3D;re.findall(findbd,item)[0]</span><br><span class="line">            bd&#x3D;re.sub(&quot;&lt;br(\s+)?&#x2F;&gt;(\s+)?&quot;,&quot;&quot;,bd)</span><br><span class="line">            bd&#x3D;re.sub(&quot;&#x2F;&quot;,&quot;&quot;,bd)    #去掉 &#x2F;</span><br><span class="line">            data.append(bd.strip()) #去掉空格，并添加进data</span><br><span class="line"></span><br><span class="line">            datalist.append(data)</span><br><span class="line">    </span><br><span class="line">    # print(datalist)</span><br><span class="line"></span><br><span class="line">    return datalist</span><br><span class="line"></span><br><span class="line">#保存数据</span><br><span class="line">def SaveData(datalist,savepath):</span><br><span class="line"></span><br><span class="line">    workbook&#x3D;xlwt.Workbook(encoding&#x3D;&quot;utf-8&quot;)    #创建workbook对象</span><br><span class="line">    worksheet&#x3D;workbook.add_sheet(&quot;豆瓣TOP250&quot;)      #创建工作表取名sheet1</span><br><span class="line">    </span><br><span class="line">    col&#x3D;(&quot;电影详情链接&quot;,&quot;图片链接&quot;,&quot;影片中文名&quot;,&quot;影片外文名&quot;,&quot;评分&quot;,&quot;评价数&quot;,&quot;概况&quot;,&quot;相关信息&quot;)</span><br><span class="line">    for i in range(0,8):</span><br><span class="line">        worksheet.write(0,i,col[i])     #添加表头</span><br><span class="line">    for i in range(0,250):</span><br><span class="line">        print(&quot;第%d条&quot;%i)</span><br><span class="line">        data&#x3D;datalist[i]</span><br><span class="line">        for j in range(0,8):</span><br><span class="line">            worksheet.write(i+1,j,data[j])</span><br><span class="line">    workbook.save(savepath)                #保存数据表取名为student.xls</span><br><span class="line"></span><br><span class="line">#得到一个指定url的内容</span><br><span class="line">def AskURL(url):</span><br><span class="line">    headers&#x3D;&#123;   #模拟浏览器头部信息，向豆瓣发送请求</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.104 Safari&#x2F;537.36&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    request &#x3D; urllib.request.Request(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D;urllib.request.urlopen(request)</span><br><span class="line">        html &#x3D; response.read().decode(&quot;utf-8&quot;)</span><br><span class="line">        # print(html)</span><br><span class="line">    except urllib.error.URLError as e:</span><br><span class="line">        if hasattr(e,&quot;code&quot;):</span><br><span class="line">            print(e.code)</span><br><span class="line">        if hasattr(e,&quot;reason&quot;):</span><br><span class="line">            print(e.reason)</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="保存数据到数据库"><a href="#保存数据到数据库" class="headerlink" title="保存数据到数据库"></a>保存数据到数据库</h2><p>sqlite基本使用方法</p><ol><li>建立数据库表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line"># 建表</span><br><span class="line">conn&#x3D;sqlite3.connect(&quot;test.db&quot;) # 打开或创建数据库</span><br><span class="line">c&#x3D;conn.cursor() #获取游标</span><br><span class="line">sql &#x3D;&#39;&#39;&#39;</span><br><span class="line">create table commpany</span><br><span class="line">(id int primary key not null,</span><br><span class="line">name text not null,</span><br><span class="line">age int not null,</span><br><span class="line">address char(50),</span><br><span class="line">salary real)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">c.execute(sql)  #执行sql语句</span><br><span class="line">conn.commit()   #提交数据库操作</span><br><span class="line">c.close()       #关闭游标</span><br><span class="line">conn.close()    #关闭数据库</span><br></pre></td></tr></table></figure><ol start="2"><li>插入数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line"># 插入数据</span><br><span class="line">conn&#x3D;sqlite3.connect(&quot;test.db&quot;) # 打开或创建数据库</span><br><span class="line">c&#x3D;conn.cursor() #获取游标</span><br><span class="line">sql1 &#x3D;&#39;&#39;&#39;</span><br><span class="line">insert into commpany (id,name,age,address,salary)</span><br><span class="line">values (1,&#39;张三&#39;,32,&#39;成都&#39;,8000);</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">sql2 &#x3D;&#39;&#39;&#39;</span><br><span class="line">insert into commpany (id,name,age,address,salary)</span><br><span class="line">values (2,&#39;李四&#39;,30,&#39;重庆&#39;,10000);</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">c.execute(sql1)  #执行sql语句</span><br><span class="line">c.execute(sql2)  #执行sql语句</span><br><span class="line">conn.commit()   #提交数据库操作</span><br><span class="line">c.close()       #关闭游标</span><br><span class="line">conn.close()    #关闭数据库</span><br></pre></td></tr></table></figure><ol start="3"><li>查询数据库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line"># 查询数据库</span><br><span class="line">conn&#x3D;sqlite3.connect(&quot;test.db&quot;) # 打开或创建数据库</span><br><span class="line">c&#x3D;conn.cursor() #获取游标</span><br><span class="line">sql &#x3D;&#39;&#39;&#39;</span><br><span class="line">select id,name,age,address,salary from commpany</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">cur&#x3D;c.execute(sql)  #执行sql语句</span><br><span class="line"></span><br><span class="line">for row in cur:</span><br><span class="line">    print(&quot;id &#x3D; &quot;,row[0])</span><br><span class="line">    print(&quot;name &#x3D; &quot;,row[1])</span><br><span class="line">    print(&quot;address &#x3D; &quot;,row[2])</span><br><span class="line">    print(&quot;salary &#x3D; &quot;,row[3],&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">c.close()       #关闭游标</span><br><span class="line">conn.close()    #关闭数据库</span><br></pre></td></tr></table></figure><h2 id="保存数据到数据库代码"><a href="#保存数据到数据库代码" class="headerlink" title="保存数据到数据库代码"></a>保存数据到数据库代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line">from bs4 import BeautifulSoup   #网页解析获取数据</span><br><span class="line">import re   #正则表达式进行文字匹配</span><br><span class="line">import urllib.request , urllib.error , requests   #网页请求</span><br><span class="line">import xlwt #进行Excel操作</span><br><span class="line">import sqlite3  #进行sqlite数据库操作</span><br><span class="line"></span><br><span class="line"># 主函数</span><br><span class="line">def main():</span><br><span class="line">    baseurl &#x3D; &quot;https:&#x2F;&#x2F;movie.douban.com&#x2F;top250?start&#x3D;&quot;</span><br><span class="line">    # 1.爬取网页</span><br><span class="line">    datalist&#x3D;GetData(baseurl)</span><br><span class="line">    # 3.保存数据到Excel</span><br><span class="line">    # savepath &#x3D; &quot;.&#x2F;豆瓣TOP250.xls&quot;</span><br><span class="line">    # SaveData(datalist,savepath)</span><br><span class="line"></span><br><span class="line">    # 4. 保存数据到数据库</span><br><span class="line">    dbpath&#x3D;&quot;.&#x2F;movies.db&quot;</span><br><span class="line">    SaveData2DB(datalist,dbpath)</span><br><span class="line"></span><br><span class="line">#详情链接</span><br><span class="line">findlink&#x3D;re.compile(r&#39;&lt;a href&#x3D;&quot;(.*?)&quot;&gt;&#39;)    #创建正则表达式对象，表示规则</span><br><span class="line">#影片图片</span><br><span class="line">findsrc&#x3D;re.compile(r&#39;&lt;img.*src&#x3D;&quot;(.*?)&quot;&#39;,re.S)   #re.S让换行符包含在.匹配符其中</span><br><span class="line">#影片名字</span><br><span class="line">findtitle&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;title&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)</span><br><span class="line">#影片评分</span><br><span class="line">findrating&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;rating_num&quot; property&#x3D;&quot;v:average&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)</span><br><span class="line">#影片评价人数</span><br><span class="line">findjudge&#x3D;re.compile(r&#39;&lt;span&gt;(\d*?)人评价&lt;&#x2F;span&gt;&#39;) </span><br><span class="line">#影片概况</span><br><span class="line">findinq&#x3D;re.compile(r&#39;&lt;span class&#x3D;&quot;inq&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;)</span><br><span class="line">#影片相关内容</span><br><span class="line">findbd&#x3D;re.compile(r&#39;&lt;p class&#x3D;&quot;&quot;&gt;(.*?)&lt;&#x2F;p&gt;&#39;,re.S)</span><br><span class="line"></span><br><span class="line">def GetData(baseurl):</span><br><span class="line">    datalist&#x3D;[]</span><br><span class="line">    for i in range(0,10):</span><br><span class="line">        url &#x3D; baseurl + str(i*25)   # 调用获取页面信息函数10次</span><br><span class="line">        html &#x3D;AskURL(url)</span><br><span class="line">        # 2.边爬取边解析数据</span><br><span class="line">        soup &#x3D; BeautifulSoup(html,&quot;html.parser&quot;)</span><br><span class="line">        for item in soup.find_all(&#39;div&#39;,class_&#x3D;&quot;item&quot;): #查找符合要求的字符串形成列表，</span><br><span class="line">            data &#x3D; []   #保存一部影片所有信息</span><br><span class="line">            item&#x3D;str(item)</span><br><span class="line">            </span><br><span class="line">            #影片详情页链接</span><br><span class="line">            link&#x3D;re.findall(findlink,item)[0]   #使用re库查找指定字符串</span><br><span class="line">            data.append(link)                   #添加链接</span><br><span class="line"></span><br><span class="line">            #影片图片</span><br><span class="line">            imgsrc&#x3D;re.findall(findsrc,item)[0]</span><br><span class="line">            data.append(imgsrc)                 #添加图片</span><br><span class="line"></span><br><span class="line">            #影片名字</span><br><span class="line">            titles&#x3D;re.findall(findtitle,item)   #片名可能只有中文名没有外文名</span><br><span class="line">            if (len(titles)&#x3D;&#x3D;2):</span><br><span class="line">                data.append(titles[0])  #添加中文名</span><br><span class="line">                data.append(titles[1].replace(&quot;&#x2F;&quot;,&quot;&quot;))  #添加外文名</span><br><span class="line">            else:</span><br><span class="line">                data.append(titles[0])</span><br><span class="line">                data.append(&quot;&quot;)        #留空</span><br><span class="line">            </span><br><span class="line">            #影片评分</span><br><span class="line">            rating&#x3D;re.findall(findrating,item)[0]</span><br><span class="line">            data.append(rating)                     #添加评分</span><br><span class="line"></span><br><span class="line">            #影片评价人数</span><br><span class="line">            judgenum&#x3D;re.findall(findjudge,item)[0]</span><br><span class="line">            data.append(judgenum)                     #添加评分</span><br><span class="line"></span><br><span class="line">            #影片概况</span><br><span class="line">            inq&#x3D;re.findall(findinq,item)</span><br><span class="line">            if(len(inq)!&#x3D;0):</span><br><span class="line">                inq&#x3D;inq[0].replace(&quot;。&quot;,&quot;&quot;)    #去掉句号</span><br><span class="line">                data.append(inq)                #添加概况</span><br><span class="line">            else:</span><br><span class="line">                data.append(&quot;&quot;)                 #留空</span><br><span class="line">            </span><br><span class="line">            #影片相关内容</span><br><span class="line">            bd&#x3D;re.findall(findbd,item)[0]</span><br><span class="line">            bd&#x3D;re.sub(&quot;&lt;br(\s+)?&#x2F;&gt;(\s+)?&quot;,&quot;&quot;,bd)</span><br><span class="line">            bd&#x3D;re.sub(&quot;&#x2F;&quot;,&quot;&quot;,bd)    #去掉 &#x2F;</span><br><span class="line">            data.append(bd.strip()) #去掉空格，并添加进data</span><br><span class="line"></span><br><span class="line">            datalist.append(data)</span><br><span class="line">    </span><br><span class="line">    # print(datalist)</span><br><span class="line"></span><br><span class="line">    return datalist</span><br><span class="line"></span><br><span class="line">#保存数据</span><br><span class="line">def SaveData(datalist,savepath):</span><br><span class="line"></span><br><span class="line">    workbook&#x3D;xlwt.Workbook(encoding&#x3D;&quot;utf-8&quot;)    #创建workbook对象</span><br><span class="line">    worksheet&#x3D;workbook.add_sheet(&quot;豆瓣TOP250&quot;)      #创建工作表取名sheet1</span><br><span class="line">    </span><br><span class="line">    col&#x3D;(&quot;电影详情链接&quot;,&quot;图片链接&quot;,&quot;影片中文名&quot;,&quot;影片外文名&quot;,&quot;评分&quot;,&quot;评价数&quot;,&quot;概况&quot;,&quot;相关信息&quot;)</span><br><span class="line">    for i in range(0,8):</span><br><span class="line">        worksheet.write(0,i,col[i])     #添加表头</span><br><span class="line">    for i in range(0,250):</span><br><span class="line">        # print(&quot;第%d条&quot;%i)</span><br><span class="line">        data&#x3D;datalist[i]</span><br><span class="line">        for j in range(0,8):</span><br><span class="line">            worksheet.write(i+1,j,data[j])</span><br><span class="line">    workbook.save(savepath)                #保存数据表取名为student.xls</span><br><span class="line"></span><br><span class="line">#得到一个指定url的内容</span><br><span class="line">def AskURL(url):</span><br><span class="line">    headers&#x3D;&#123;   #模拟浏览器头部信息，向豆瓣发送请求</span><br><span class="line">    &quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;88.0.4324.104 Safari&#x2F;537.36&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    request &#x3D; urllib.request.Request(url&#x3D;url,headers&#x3D;headers)</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D;urllib.request.urlopen(request)</span><br><span class="line">        html &#x3D; response.read().decode(&quot;utf-8&quot;)</span><br><span class="line">        # print(html)</span><br><span class="line">    except urllib.error.URLError as e:</span><br><span class="line">        if hasattr(e,&quot;code&quot;):</span><br><span class="line">            print(e.code)</span><br><span class="line">        if hasattr(e,&quot;reason&quot;):</span><br><span class="line">            print(e.reason)</span><br><span class="line">    return html</span><br><span class="line"></span><br><span class="line">def init_db(dbpath):</span><br><span class="line">    sql&#x3D;&#39;&#39;&#39;</span><br><span class="line">        create table movies250</span><br><span class="line">        (id integer primary key autoincrement,</span><br><span class="line">        info_link text,</span><br><span class="line">        pic_link text,</span><br><span class="line">        cname varchar,</span><br><span class="line">        ename varchar,</span><br><span class="line">        score numeric,</span><br><span class="line">        rated numeric,</span><br><span class="line">        instroduction text,</span><br><span class="line">        info text)</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    conn&#x3D;sqlite3.connect(dbpath)</span><br><span class="line">    cursor&#x3D;conn.cursor()    #获取游标</span><br><span class="line">    cursor.execute(sql)     #执行SQL语句：创建数据表</span><br><span class="line">    conn.commit()           #事务提交：让操作生效</span><br><span class="line">    cursor.close()          #关闭游标</span><br><span class="line">    conn.close()            #关闭连接 </span><br><span class="line"></span><br><span class="line">def SaveData2DB(datalist,dbpath):</span><br><span class="line">    init_db(dbpath)</span><br><span class="line">    conn&#x3D;sqlite3.connect(dbpath)</span><br><span class="line">    cursor&#x3D;conn.cursor()    #获取游标</span><br><span class="line"></span><br><span class="line">    for data in datalist:</span><br><span class="line">        for index in range(len(data)):</span><br><span class="line">            if index &#x3D;&#x3D;4 or index&#x3D;&#x3D;5:</span><br><span class="line">                continue</span><br><span class="line">            data[index]&#x3D;&#39;&quot;&#39;+data[index]+&#39;&quot;&#39;         # sql语句中的字符串添加 &quot; &quot; </span><br><span class="line">        sql &#x3D; &#39;&#39;&#39;</span><br><span class="line">        insert into movies250(info_link,pic_link,cname,ename,score,rated,instroduction,info)</span><br><span class="line">        values (%s)</span><br><span class="line">        &#39;&#39;&#39;%&quot;,&quot;.join(data)</span><br><span class="line">        # print(data)</span><br><span class="line">        # print(&quot;%s&quot;%&quot;,&quot;.join(data))</span><br><span class="line">        # print(sql)</span><br><span class="line">        cursor.execute(sql)     #执行SQL语句：创建数据表</span><br><span class="line">        conn.commit()           #事务提交：让操作生效</span><br><span class="line"></span><br><span class="line">    cursor.close()          #关闭游标</span><br><span class="line">    conn.close()            #关闭连接 </span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="豆瓣Top250项目可视化代码以及资料"><a href="#豆瓣Top250项目可视化代码以及资料" class="headerlink" title="豆瓣Top250项目可视化代码以及资料"></a>豆瓣Top250项目可视化代码以及资料</h1><p>Github仓库：<a href="https://github.com/imgyh/DouBan_Top250">https://github.com/imgyh/DouBan_Top250</a></p>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine添加博主标签</title>
      <link href="posts/4a79441/"/>
      <url>posts/4a79441/</url>
      
        <content type="html"><![CDATA[<h1 id="Valine添加博主标签"><a href="#Valine添加博主标签" class="headerlink" title="Valine添加博主标签"></a>Valine添加博主标签</h1><p>我搜遍全网对于Valine添加博主标签，大都是懒人博客里面的教程，但他的教程对<code>Butterfly 3.0.1</code>不支持，需要自己修改一下，才能使用。看了<a class="btn-beautify button--animated pink larger" href="https://blog.hclonely.com/posts/409d3090/"   title="懒人博客"><i class="far fa-hand-point-right fa-fw"></i><span>懒人博客</span></a>，和他下面的评论后终于修改好了，故记录于此。</p><h2 id="修改valine-pug文件"><a href="#修改valine-pug文件" class="headerlink" title="修改valine.pug文件"></a>修改valine.pug文件</h2><p>修改<code>Butterfly</code>主题下的<code>/layout/iuncludes/third-party/comments/valine.pug</code>，我修改的如下，可参照原来的版本对比修改</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200822191622.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200822191709.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">- let emojiMaps &#x3D; &#39;&quot;&quot;&#39;</span><br><span class="line">if site.data.valine</span><br><span class="line">  - emojiMaps &#x3D; JSON.stringify(site.data.valine)</span><br><span class="line"></span><br><span class="line">script(src&#x3D;url_for(theme.CDN.valine))</span><br><span class="line">script.</span><br><span class="line">  var requestSetting &#x3D; function (from,set) &#123;</span><br><span class="line">    var from &#x3D; from</span><br><span class="line">    var setting &#x3D; set.split(&#39;,&#39;).filter(function(item)&#123;</span><br><span class="line">    return from.indexOf(item) &gt; -1</span><br><span class="line">    &#125;);</span><br><span class="line">    setting &#x3D; setting.length &#x3D;&#x3D; 0 ? from :setting;</span><br><span class="line">    return setting</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var guestInfo &#x3D; requestSetting([&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;],&#39;#&#123; theme.valine.guest_info &#125;&#39;)</span><br><span class="line">  var requiredFields &#x3D; requestSetting([&#39;nick&#39;,&#39;mail&#39;,&#39;link&#39;],&#39;#&#123; theme.valine.requiredFields &#125;&#39;)</span><br><span class="line">  let friends &#x3D; &#39;#&#123;theme.valine.friends&#125;&#39;.split(&#39;,&#39;)</span><br><span class="line">  let master &#x3D; &#39;#&#123;theme.valine.master&#125;&#39;.split(&#39;,&#39;)</span><br><span class="line">  let tagMeta &#x3D; &#39;#&#123;theme.valine.tagMeta || &quot;博主,小伙伴,访客&quot;&#125;&#39;.split(&#39;,&#39;)</span><br><span class="line"></span><br><span class="line">  function loadValine () &#123;</span><br><span class="line">    function initValine () &#123;</span><br><span class="line">      window.valine &#x3D; new Valine(&#123;</span><br><span class="line">        el: &#39;#vcomment&#39;,</span><br><span class="line">        appId: &#39;#&#123;theme.valine.appId&#125;&#39;,</span><br><span class="line">        appKey: &#39;#&#123;theme.valine.appKey&#125;&#39;,</span><br><span class="line">        placeholder: &#39;#&#123;theme.valine.placeholder&#125;&#39;,</span><br><span class="line">        avatar: &#39;#&#123;theme.valine.avatar&#125;&#39;,</span><br><span class="line">        meta: &#39;#&#123;theme.valine.guest_info &#125;&#39;.split(&#39;,&#39;),</span><br><span class="line">        pageSize: &#39;#&#123;theme.valine.pageSize&#125;&#39;,</span><br><span class="line">        lang: &#39;#&#123;theme.valine.lang&#125;&#39;,</span><br><span class="line">        recordIP: #&#123;theme.valine.recordIP&#125;,</span><br><span class="line">        serverURLs: &#39;#&#123;theme.valine.serverURLs&#125;&#39;,</span><br><span class="line">        emojiCDN: &#39;#&#123;theme.valine.emojiCDN&#125;&#39;,</span><br><span class="line">        emojiMaps: !&#123;emojiMaps&#125;,</span><br><span class="line">        enableQQ: #&#123;theme.valine.enableQQ&#125;,</span><br><span class="line">        path: window.location.pathname,</span><br><span class="line">        master: master,</span><br><span class="line">        friends: friends,</span><br><span class="line">        tagMeta: tagMeta,</span><br><span class="line">        metaPlaceholder: !&#123;JSON.stringify(theme.valine.metaPlaceholder || &#123;&#125;)&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      if (&#39;#&#123;theme.valine.requiredFields&#125;&#39;) &#123; valine.config.requiredFields&#x3D; &#39;#&#123;theme.valine.requiredFields&#125;&#39;.split(&#39;,&#39;) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (typeof Valine &#x3D;&#x3D;&#x3D; &#39;function&#39;) initValine() </span><br><span class="line">    else $.getScript(&#39;!&#123;url_for(theme.CDN.valine)&#125;&#39;, initValine)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (&#39;!&#123;theme.comments.use[0]&#125;&#39; &#x3D;&#x3D;&#x3D; &#39;Valine&#39; || !!&#123;theme.comments.lazyload&#125;) &#123;</span><br><span class="line">    if (!&#123;theme.comments.lazyload&#125;) loadComment(document.querySelector(&#39;#vcomment&#39;),loadValine)</span><br><span class="line">    else setTimeout(() &#x3D;&gt; loadValine(), 0)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    function loadOtherComment () &#123;</span><br><span class="line">      loadValine()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="修改butterfly-yml文件"><a href="#修改butterfly-yml文件" class="headerlink" title="修改butterfly.yml文件"></a>修改butterfly.yml文件</h2><p>添加最后的 <code>master</code> <code>friends</code> <code>metaPlaceholder</code> <code>tagMeta</code>这几项，<code>master</code> <code>friends</code>是博主和小伙伴的邮箱经过md5加密后的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  appId:  # leancloud application app id</span><br><span class="line">  appKey:# leancloud application app key</span><br><span class="line">  pageSize: 20 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https:&#x2F;&#x2F;valine.js.org&#x2F;#&#x2F;avatar</span><br><span class="line">  lang: zh-CN # i18n: zh-CN&#x2F;zh-TW&#x2F;en&#x2F;ja</span><br><span class="line">  placeholder: 留下邮箱可以快速收到回复!\n昵称和邮箱必填\n昵称栏输入QQ会使用QQ的昵称和头像 # valine comment input placeholder (like: Please leave your footprints)</span><br><span class="line">  guest_info: nick,mail,link # valine comment header info (nick&#x2F;mail&#x2F;link)</span><br><span class="line">  recordIP:  # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: # valine background</span><br><span class="line">  emojiCDN:  # emoji CDN</span><br><span class="line">  enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields (nick&#x2F;mail)</span><br><span class="line">--------------------下面是修改的，如果要复制，请复制不要复制这一行-------------------------</span><br><span class="line">  master: # md5加密后的博主邮箱</span><br><span class="line">      - f644d72a2de2163cbd232954d2f2789a</span><br><span class="line">  friends: # md5加密后的小伙伴邮箱</span><br><span class="line">    - 5c43aebcd3c384d461188a1c26db5ab7</span><br><span class="line">  metaPlaceholder: # 输入框的背景文字</span><br><span class="line">    nick: 昵称&#x2F;QQ号(必填)</span><br><span class="line">    mail: 邮箱(必填)</span><br><span class="line">    link: 网址(https:&#x2F;&#x2F;)</span><br><span class="line">  tagMeta: &#39;博主,小伙伴,访客&#39; # 标签要显示的文字,默认&#39;博主,小伙伴,访客&#39;</span><br></pre></td></tr></table></figure><h2 id="修改valine的CDN"><a href="#修改valine的CDN" class="headerlink" title="修改valine的CDN"></a>修改valine的CDN</h2><p>将Valine的CDN修改成如下所示</p><p><a href="https://cdn.jsdelivr.net/gh/imgyh/HexoStatic@latest/js/Valine.min.js">https://cdn.jsdelivr.net/gh/imgyh/HexoStatic@latest/js/Valine.min.js</a></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200822185921.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔搭建UnblockNeteaseMusic</title>
      <link href="posts/75146fb8/"/>
      <url>posts/75146fb8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>UnblockNeteaseMusic 是一个用来解锁网易云音乐客户端变灰歌曲的项目，它具有以下特性：</p><ul><li>使用网易云旧链 / QQ /虾米/百度/酷狗/酷我/咕咪/ JOOX音源替换变灰歌曲链接（默认仅启用前四）</li><li>为请求增加X-Real-IP参数解锁海外限制，支持指定网易云服务器IP，支持设置上游HTTP / HTTPS代理</li><li>完整的流量代理功能（HTTP / HTTPS），可直接作为系统代理（同时支持PAC）</li></ul></blockquote><h1 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h1><p>GitHub地址：<a href="https://github.com/nondanee/UnblockNeteaseMusic">https://github.com/nondanee/UnblockNeteaseMusic</a></p><p>由于我有一台阿里云的学生机，在上面搭建比较方便，也可以更多的人使用。</p><ul><li><p>宝塔安装PM2管理器</p></li><li><p>连接SSH运行如下两条命令,克隆项目到本地，你也可以使用宝塔的远程下载。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;nondanee&#x2F;UnblockNeteaseMusic.git</span><br></pre></td></tr></table></figure><ul><li>修改<code>/root/UnblockNeteaseMusic</code>文件夹中的<code>app.js</code>文件,将<code>16</code>行的<code>8080</code>端口替换为你自定义端口，然后宝塔安全组放行相应端口即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200610185725.png"></p><ul><li><p>回到<code>PM2管理器</code>中，设置，根据下图添加即可。目录：<code>/root/UnblockNeteaseMusic</code>文件：<code>app.js</code> 名称：<code>UnblockNeteaseMusic</code>(名称可随意)</p></li><li><p>这就可以使用了，如果需要更高级的玩法可参考原作者的<a href="https://github.com/nondanee/UnblockNeteaseMusic">GitHub项目</a></p></li></ul><h1 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h1><p>具体参见<a href="https://github.com/nondanee/UnblockNeteaseMusic">GitHub项目</a></p><p><strong>全局代理地址填写服务器地址和端口号即可</strong></p><table><thead><tr><th>平台</th><th>基础设置</th></tr></thead><tbody><tr><td>Windows</td><td>设置 &gt; 工具 &gt; 自定义代理 (客户端内)</td></tr><tr><td>UWP</td><td>Windows 设置 &gt; 网络和 Internet &gt; 代理</td></tr><tr><td>Linux</td><td>系统设置 &gt; 网络 &gt; 网络代理</td></tr><tr><td>macOS</td><td>系统偏好设置 &gt; 网络 &gt; 高级 &gt; 代理</td></tr><tr><td>Android</td><td>WLAN &gt; 修改网络 &gt; 高级选项 &gt; 代理</td></tr><tr><td>iOS</td><td>无线局域网 &gt; HTTP 代理 &gt; 配置代理</td></tr></tbody></table><p>windows直接在客户端内设置IP地址和端口就可以了，安卓只可以在WiFi中设置，数据就不能使用，有一定局限性，可以用下面的方法解决。</p><h1 id="使用goproxy将http代理转换为ss代理"><a href="#使用goproxy将http代理转换为ss代理" class="headerlink" title="使用goproxy将http代理转换为ss代理"></a>使用goproxy将http代理转换为ss代理</h1><h2 id="什么是goproxy"><a href="#什么是goproxy" class="headerlink" title="什么是goproxy"></a>什么是goproxy</h2><p>goproxy是golang实现的高性能http,https,websocket,tcp,防污染DNS,socks5代理服务器,支持内网穿透,链式代理,通讯加密,智能HTTP,SOCKS5代理,前置CDN,域名黑白名单,跨平台,KCP协议支持,支持ipv4和ipv6,集成外部API。项目地址：<a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a></p><p>goproxy功能强大，本文介绍其中一个功能：<strong>代理协议转换</strong> ，将原本的HTTP协议转换为socket</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>下载并解压</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir goproxy &amp;&amp; cd goproxy</span><br><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;snail007&#x2F;goproxy&#x2F;releases&#x2F;download&#x2F;v9.7&#x2F;proxy-linux-amd64.tar.gz</span><br><span class="line">tar zxvf proxy-linux-amd64.tar.gz &amp;&amp; rm proxy-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><p>假设以下条件<br>UnblockNeteaseMusic服务器的地址<br>127.0.0.1<br>UnblockNeteaseMusic运行端口(记得放行端口)<br>6666<br>转换后ss的监听端口（记得放行端口）<br>2333<br>转换后ss的加密方式<br>chacha20-ietf<br>转换后ss的密码<br>music</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;proxy sps -S http -T tcp -P 127.0.0.1:6666 -t tcp -p :2333 -h chacha20-ietf -j music</span><br></pre></td></tr></table></figure><ul><li>后台运行</li></ul><ol><li>推荐使用：</li></ol><p>编辑文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;goproxy.service</span><br></pre></td></tr></table></figure><p>输入以下内容：（<code>/root/goproxy/proxy</code> 根据自己goproxy的路径自行修改，我放在root目录下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;goproxy</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;root&#x2F;goproxy&#x2F;proxy sps -S http -T tcp -P 127.0.0.1:6666 -t tcp -p :2333 -h chacha20-ietf -j music</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line">User&#x3D;root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;default.target</span><br></pre></td></tr></table></figure><p>开始启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start goproxy</span><br></pre></td></tr></table></figure><p>设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable goproxy</span><br></pre></td></tr></table></figure><p>其他命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重启：systemctl restart goproxy</span><br><span class="line">停止：systemctl stop goproxy</span><br><span class="line">状态：systemctl status goproxy</span><br></pre></td></tr></table></figure><ol start="2"><li>不推荐使用，不能设置开机自启</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装screen</span><br><span class="line">apt-get install screen &#x2F; yum -y install screen</span><br><span class="line"></span><br><span class="line">#新建一个screen</span><br><span class="line">screen -S goproxy</span><br><span class="line">#在screen下运行goproxy</span><br><span class="line">cd goproxy</span><br><span class="line">.&#x2F;proxy sps -S http -T tcp -P 127.0.0.1:6666 -t tcp -p :2333 -h chacha20-ietf -j music</span><br></pre></td></tr></table></figure><h1 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h1><p>大家可以试试我搭建的</p><p>Windows端，在网易云音乐设置中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip: aliyun.0941314.xyz</span><br><span class="line">port:6666</span><br><span class="line">用户名密码不填</span><br></pre></td></tr></table></figure><p>安卓端在ss中输入相应的配置就可以使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ip:aliyun.0941314.xyz</span><br><span class="line">port:2333</span><br><span class="line">协议：chacha20-ietf</span><br><span class="line">密码：music</span><br><span class="line">用户名不填</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NeteaseMusic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Leancloud流控导致无法唤醒问题</title>
      <link href="posts/ef89201e/"/>
      <url>posts/ef89201e/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于本博客采用的是 <code>Valine</code> 这一个评论系统，这个评论系统后端完全依赖 <code>Leancloud</code>。最近 <code>Leancloud</code> 对开发版实例自动唤醒采取了流控措施，导致无法通过定时任务唤醒，这样会导致邮件提醒不及时。以下是官方的回应。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200520094246.png"></p><p>如果还没设置 <code>Valine</code> 邮件提醒功能的可参考以下文章：</p><a href="/posts/caa4f244/" title="Valine配置评论提醒服务">Valine配置评论提醒服务</a><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>首先看一下 <code>Leancloud</code> 的<a href="https://leancloud.cn/docs/leanengine_plan.html#hash633315134">休眠策略</a></p><ul><li>如果应用最近一段时间（半小时）没有任何外部请求，则休眠。</li><li>休眠后如果有新的外部请求实例则马上启动。访问者的体验是第一个请求响应时间是 5 ~ 30 秒（视实例启动时间而定），后续访问响应速度恢复正常。</li><li>强制休眠：如果最近 24 小时内累计运行超过 18 小时，则强制休眠。此时新的请求会收到 503 的错误响应码，该错误可在 <code>云引擎 &gt; 统计</code> 中查看。</li></ul><p>根据他这个休眠策略，可以没30分钟访问一次实例，就可以解决了。</p><p><code>GitHub</code> 提供了 <code>Action</code> 服务，所以可以使用 <code>Action</code> 实现定时唤醒。</p><p>方法步骤：</p><ul><li><p>首先 <code>fork</code> 一份我的代码：<a href="https://github.com/imgyh/script">https://github.com/imgyh/script</a></p></li><li><p>修改 <code>main.py</code> 里面的 <code>get_status(&quot;https://valine.0941314.xyz/&quot;)</code> 改成你自己的 <code>Valine</code> 评论后台管理地址</p></li><li><p>将 <code>valine_wake_up.yml</code> 复制到 <code>.github/workflows/</code> 路径下</p></li><li><p>之后他就会在北京时间的 7-23 点，每隔25min执行一次 <code>valine_wake_up.py</code> 来唤醒一次 <code>Valine</code> 的实例。</p></li></ul><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>实现原理很简单，就用了 <code>python</code> 的 <code>requests</code> 库，几行代码就搞定了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def get_status(url):</span><br><span class="line">    </span><br><span class="line">    r&#x3D;requests.get(url&#x3D;url)</span><br><span class="line"></span><br><span class="line">    return r.status_code</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    status&#x3D;get_status(&quot;https:&#x2F;&#x2F;valine.0941314.xyz&#x2F;&quot;) #修改为自己的valine评论地址</span><br><span class="line"></span><br><span class="line">    if status&#x3D;&#x3D;200:</span><br><span class="line">        print(&quot;激活成功！HTTP状态码为：&quot;,status)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;激活失败！HTTP状态码为：&quot;,status)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>由于自己使用，这已经完全能满足了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> LeanCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github_Action:SSH自动部署到Coding和Github</title>
      <link href="posts/6f63f859/"/>
      <url>posts/6f63f859/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章介绍了通过访问令牌的的方式去推送<code>hexo</code>到 <code>GitHub Page</code> 和 <code>Coding Page</code> 但是是使用<code>git</code>强制推送上去的，由于我使用了百度推送，所以需要使用 <code>hexo d</code>的方式推送，才能保证百度推送工作。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先要安装插件，这个插件只要是在本地使用<code>hexo d</code>这个命令都装上了的吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>同时在Hexo项目根目录配置文件<code>_config.yaml</code>中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: </span><br><span class="line">        github: git@github.com:imgyh&#x2F;imgyh.github.io.git</span><br><span class="line">        coding: git@e.coding.net:guoyuanhong&#x2F;hexo&#x2F;hexo.git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">- type: baidu_url_submitter #百度推送，如果你安装了推送的插件就写上，没有就不用管</span><br></pre></td></tr></table></figure><h1 id="密钥准备"><a href="#密钥准备" class="headerlink" title="密钥准备"></a>密钥准备</h1><p>为了方便运行 <code>GitHub Actions</code> 时登录 <code>GitHub</code> 账号，我们使用<code>SSH</code>方式登录。就是要把设备的私钥交给<code>GitHub Actions</code>，公钥交给<code>GitHub</code>，需要去<code>Settings</code>里去配置。</p><p>使用<code>ssh-keygen</code>生成一组公私秘钥对，默认回车就可以了，执行后会生成<code>id_rsa.pub</code> 和 <code>id_rsa</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github 的邮箱地址&quot;</span><br><span class="line"></span><br><span class="line">如 ssh-keygen -t rsa -C &quot;123123123@gmail.com&quot;</span><br></pre></td></tr></table></figure><h2 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h2><p>使用 <code>cat .ssh/id_rsa.pub </code> 查看公钥，将其复制到 <code>Github</code> 和 <code>Coding</code> 相应位置<br><code>Github</code> 配置路径：<code>github网站–&gt;Settings–&gt;SSH and GPG keys</code><br><code>Coding</code>配置路径：<code>个人账户设置-&gt;SSH公钥-&gt;新增公钥，可以设置永久</code></p><h2 id="配置私钥"><a href="#配置私钥" class="headerlink" title="配置私钥"></a>配置私钥</h2><p>使用 <code>cat .ssh/id_rsa</code> 查看私钥。<br>blog源码仓库的<code>Settings-&gt;Secrets</code>里添加变量。</p><ul><li><p><code>GH_KEY</code> ：<code>id_rsa</code> 里的内容</p></li><li><p><code>CODEING_KEY</code> : 和 <code>GH_KEY</code> 一样，也设置为<code>id_rsa</code> 里的内容</p></li><li><p><code>GIT_USER</code> ：<code>git</code> 的 <code>name</code> ，用于设置全局 <code>git</code> 基本信息</p></li><li><p><code>GIT_MAIL</code> ：<code>git</code> 的 <code>email</code> ，用于设置全局 <code>git</code> 基本信息</p></li></ul><h1 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h1><p>在blog源码仓库的 <code>Actions</code> 选项卡下点击 <code>新建workflow</code> ，名称默认或者自定义修改，编写如下配置。</p><p>以下配置来源于 <a class="btn-beautify button--animated pink larger" href="https://www.antmoe.com/posts/b7924c1d/index.html"   title="小康博客"><i class="far fa-hand-point-right fa-fw"></i><span>小康博客</span></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"># workflow name</span><br><span class="line">name: Hexo Blog CI</span><br><span class="line"></span><br><span class="line"># master branch on push, auto run</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.18.2]</span><br><span class="line">    steps:</span><br><span class="line">      # check it to your workflow can access it</span><br><span class="line">      # from: https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class="line">      - name: 1. 检查master分支</span><br><span class="line">        uses: actions&#x2F;checkout@master</span><br><span class="line"></span><br><span class="line">      # from: https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node</span><br><span class="line">      - name: 2. 设置Node.js</span><br><span class="line">        uses: actions&#x2F;setup-node@master</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: 3. 安装 Hexo CI</span><br><span class="line">        run: |</span><br><span class="line">          export TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line">          npm install gulp -g</span><br><span class="line"></span><br><span class="line">      - name: 4. 缓存</span><br><span class="line">        uses: actions&#x2F;cache@v1</span><br><span class="line">        id: cache-dependencies</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#39;**&#x2F;package-lock.json&#39;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: 5. 安装插件</span><br><span class="line">        if: steps.cache-dependencies.outputs.cache-hit !&#x3D; &#39;true&#39;</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: 6. 设置私钥信息</span><br><span class="line">        env:</span><br><span class="line">          # HEXO_DEPLOY_PRIVATE_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_PRIVATE_KEY &#125;&#125;</span><br><span class="line">          CODEING_KEY: $&#123;&#123; secrets.CODEING_KEY &#125;&#125;</span><br><span class="line">          GH_KEY: $&#123;&#123; secrets.GH_KEY &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~&#x2F;.ssh&#x2F;</span><br><span class="line">          echo &quot;$GH_KEY&quot; &gt; ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">          echo &quot;$CODEING_KEY&quot; &gt; ~&#x2F;.ssh&#x2F;coding_rsa</span><br><span class="line">          chmod 600 ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">          chmod 600 ~&#x2F;.ssh&#x2F;coding_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts</span><br><span class="line">          ssh-keyscan e.coding.net &gt;&gt; ~&#x2F;.ssh&#x2F;known_hosts  # 注意，Coding的地址已经改成e.coding.net，很多教程中使用的地址都是旧的，导致无法完成部署</span><br><span class="line">      - name: 7. 设置git信息</span><br><span class="line">        run: |</span><br><span class="line">          git config --global user.name &#39;$&#123;&#123; secrets.GIT_USER &#125;&#125;&#39; </span><br><span class="line">          git config --global user.email &#39;$&#123;&#123; secrets.GIT_MAIL &#125;&#125;&#39;</span><br><span class="line">      - name: 8. hexo命令三连</span><br><span class="line">        run: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate </span><br><span class="line">          gulp</span><br><span class="line">          hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare面板使用教程</title>
      <link href="posts/7f071992/"/>
      <url>posts/7f071992/</url>
      
        <content type="html"><![CDATA[<h1 id="概述面板"><a href="#概述面板" class="headerlink" title="概述面板"></a>概述面板</h1><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153012.png"></p><p>概述面板顾名思义，就是让你了解一下你网站的大概运行情况，这里的几个名词我解释一下，我的解释不一定准确哈。 <strong>概述的时候可以选择观察时间是24小时还是7天还是一个月。</strong></p><ul><li><p>独立访问者：指IP，当天有多少个IP访问你的网站，一个人用一台电脑访问就是一个IP，他不管浏览了你多少个网页，都只算一个独立访问者。</p></li><li><p>请求总数：指当天有多少网页被别人打开了，一个用户用一台电脑打开了你100个网页，“独立访问者”只算1，但是请求总数算100。</p></li><li><p>已缓存的百分比： <strong>cloudflare在做CDN的时候，会缓存一些静态资源，这样别人下一次读取这些静态资源的时候，cloudflare就没必要再回源到你的服务器去取回数据，直接从cloudflare的存储里面读取就好，能加快网站的访问速度。</strong> 已缓存的百分比就是cloudflare缓存的部分和网站总的数据量的比值。</p></li><li><p>已提供的数据总计：指你有多少流量经过了cloudflare，相当于你这个网站今天使用了多少的流量</p></li><li><p>已缓存数据：和“已缓存百分比”差不多，指的是cloudflare到底缓存了多大的数据量</p></li><li><p>右面的“Under Attack 模式”： <strong>打开这个模式后，别人访问你的网页就会有俗称的“五秒盾”，指的是这个网页有几秒钟的打开时间来检验，不通过的还会有验证码，在防止别人CC攻击的时候有奇效，但是有时候“五秒盾”不止会卡主别人五秒，卡主1分多钟然后跳出个验证码也是正常的，网站没被攻击的会后最好别开。</strong> 或者调试一下，网站被攻击的时候自动开启这个模式，这就得自己去百度如何操作了。</p></li><li><p>右边的“开发模式”：因为cf的数据缓存，所有网站内有些东西在你修改了之后，访问网站并不是你修改后的内容，因为cf的缓存是每隔一段时间去源站缓存一次的。打开这个之后，会暂时的绕过缓存，方便开发者对网站进行修改。</p></li><li><p>在往下拉还有“API”和“账户ID”等等，这些咱们一般人都用不到</p></li><li><p>最后有个“高级操作”，能暂停你的站点和从CF删除你站点的信息。</p></li></ul><h1 id="analytics面板"><a href="#analytics面板" class="headerlink" title="analytics面板"></a>analytics面板</h1><p>这里的功能太多了，这就是Cloudflare的强大之处，我大概给大家看看有什么吧</p><h2 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h2><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153323.png"></p><p>这里能看24小时内的访问数，以及别人访问的内容有多少被缓存了，有多少人访问了你未缓存的内容。下面的“带宽”也是这个道理</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153548.png"></p><p>后面还有访问你网站的人，来自不同国家的排名， <strong>以及cloudflare在上个月到底帮你节省了多少流量（缓存的好处），处理了多少SSL访问以及帮你挨了多少次揍</strong></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153635.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153701.png"></p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>这里就是显示最近你被多少人揍过，因为最近没人揍我，这里也没有图给你们展示了。</p><p>这里还会显示来你网站的爬虫信息，这是个好东西，做站的我相信90%的人不会拒绝搜索引擎爬虫的来访的，这里能显示哪家的爬虫来了多少个。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153749.png"></p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421153847.png"></p><p>这里没啥好讲的，概述里面显示了一下来访你网站的http版本，cloudflare帮你节省了多少的带宽以及过去的时间内，别人访问你网站主要访问的内容</p><p>上面的访问时间等优化的功能叫“Argo”这个是花钱的，咱们用不着。</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>没啥好讲的，DNS的响应次数，没啥意义。</p><h2 id="wokers"><a href="#wokers" class="headerlink" title="wokers"></a>wokers</h2><p>这里是cloudflare workers的统计，和网页是分开的，咱们用不着。想玩玩cloudflare workers的可以去百度搜搜，玩法还是很多的。</p><h1 id="DNS面板"><a href="#DNS面板" class="headerlink" title="DNS面板"></a>DNS面板</h1><p>这里和一般的域名解析商没有区别，就是个解析域名的地方，推荐使用cloudflare partner接入。</p><h1 id="SSL-TLS面板"><a href="#SSL-TLS面板" class="headerlink" title="SSL/TLS面板"></a>SSL/TLS面板</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这个是比较重点的，HTTPS 是做站必不可少的因素之一，现在基本没有网站不开启https了，不知道什么是HTTPS的可以去百度，具体点说就是开了HTTPS货拖累网站加载速度，但是安全性会上升。并且有很多浏览器（比如谷歌）网站不是https的会提示不安全，甚至听说火狐下个版本将会屏蔽HTTP的内容，只显示HTTPS的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421154123.png"></p><p>四种加密方式依次为（加密就是HTTPS）</p><ul><li>不加密：你——cloudflare是HTTP，cloudclare——源IP也是HTTP</li><li>灵活：你——cloudflare是HTTPS，cloudflare——源IP HTTP，也有说是灵活的，可能走HTTPS，但是我没遇见过，<strong>这种模式是又安全又快的</strong></li><li>完全：你——cloudflare是HTTPS，cloudflare——源IP也是HTTPS</li><li>完全（严格）：你——cloudflare是HTTPS，cloudflare——源IP也是HTTPS，<strong>但是源IP上的证书必须是cloudflare认定的CA证书或者是cloudflare origin.ca证书，一般不用这个模式</strong></li></ul><p>下面也是显示过去24小时内，别人http客户端的形式，现在走tls1.2的还是挺多的，论速度还是比较新的tls1.3比较快。</p><h2 id="边缘证书"><a href="#边缘证书" class="headerlink" title="边缘证书"></a>边缘证书</h2><p>这里首先显示的是你每个子域名，cloudflare给你发布的不同证书。</p><p>下面的几个功能比较重要</p><ul><li><p>始终使用 HTTPS：这个功能我始终是开着的，为了大家访问方便以及我网站的安全性，<strong>这个是让所有HTTP的访问跳转到HTTPS</strong></p></li><li><p>HTTP 严格传输安全 (HSTS)：“HTTP 严格传输安全（HSTS）功能使 Web 服务器告知浏览器绝不使用 HTTP 访问，在浏览器端自动将所有到该站点的 HTTP 访问替换为 HTTPS 访问”，<strong>这个功能使用比较麻烦，取消也麻烦，觉得麻烦的就别开启了。</strong></p></li><li><p>最低 TLS 版本：这个可以限制tls的版本，可以设置tls1.3访问，但是tls1.1和tls1.2的用户就没办法访问你网站了，所以我建议，<strong>保持默认的最低tls1.0</strong></p></li><li><p>随机加密：不建议开启，虽说用了比http本来更好的http/2，<strong>但是浏览器将继续在地址栏中显示 “http”，而不是 “https”。</strong></p></li><li><p>TLS 1.3：启用最新版本的 TLS 协议，以提高安全性和性能。<strong>建议开启</strong></p></li><li><p>自动 HTTPS 重写：自动 HTTPS 重写通过将可以使用 HTTPS 提供服务的网站上所有资源或链接的 “http” 更改为 “https” 来帮助修正混合内容。<strong>强烈建议开启</strong></p></li><li><p>最底下俩功能一个得花钱，另一个没必要。</p></li></ul><p>如果懒得看上面那一段话，并且你也是希望你源站开启https。那么直接设置成和我一样的就行了</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421155032.png"></p><h2 id="源服务器"><a href="#源服务器" class="headerlink" title="源服务器"></a>源服务器</h2><p>没啥好看的，不用管。</p><h2 id="自定义主机名"><a href="#自定义主机名" class="headerlink" title="自定义主机名"></a>自定义主机名</h2><p>一般建站没啥用，而且还得花钱，不玩。</p><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><p>这部分我没有开启，我也玩不明白，可以自建防火墙规则，设置部分地区的人能访问，可以CloudFlare 防火墙策略 危险IP设置验证码访问设置“”，或者“通过 CLOUDFLARE 的防火墙减少恶意流量和攻击”。这些都属于高级玩法了，<strong>如果有需要的可以去百度“cloudflare 防火墙”。可以看到很多关于防火墙的知识，这也是cloudflare的强大之处。</strong></p><h1 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h1><p>在没有 VPN 的情况下使远程用户连接到企业应用程序。9 月 1 日前免费。</p><p>Access 通过向您已经使用的标识提供程序进行身份验证来保护内部资源。使用 Access，可以控制哪些用户和群组可以在没有 VPN 或者不对您的站点代码进行任何更改的情况下访问敏感资料。</p><h1 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>就是看一下cloudflare帮你提高了多少速度，还有具体的时间。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>这个地方能免费用的功能不多，能免费开启的都开启吧。下面三个都是能开启的</p><ul><li>Auto Minify</li></ul><p>减小网站上源代码的文件大小。注意：清除缓存可使更改立即生效。<strong>JS CSS HTML三个优化都建议打开</strong></p><ul><li>Brotli</li></ul><p>应用 Brotli 压缩，加快访问者的 HTTPS 流量的页面加载时间。<strong>建议打开</strong></p><ul><li>Rocket Loader™</li></ul><p>缩短包含 JavaScript 的页面的绘制时间。<strong>不！不建议打开</strong></p><ul><li>AMP 真实 URL：<strong>不建议打开</strong></li></ul><p>这部分还有个收费的Railgun，有钱的话可以去看看，网页加速效果挺明显的</p><h2 id="Browser-Insights"><a href="#Browser-Insights" class="headerlink" title="Browser Insights"></a>Browser Insights</h2><p>从用户角度量测网站效能的工具，帮助开发者了解网页变慢的地方、时机以及原因。</p><p>我的也是刚才开启的，没有图，所以从网上找了几张。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421155607.png"></p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>这里好多功能收费，有几个值得开启的功能我给大家看一下</p><ul><li><p>清除缓存：这里可以清除缓存，你网站有变动的时候可以清除一下缓存，重新缓存</p></li><li><p>缓存级别：默认的标准就行</p></li><li><p>浏览器缓存 TTL：随便，我个人建议是几小时</p></li><li><p>Always Online™：如果你设置自定义缓存了，我比较建议开启，并且我也建议开启自定义缓存把除了动态页面（后台，在线演示等）的内容全部缓存</p></li><li><p>开发模式：和首页概览的开发者模式是一样的</p></li></ul><h1 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h1><p>在全球数以百计的 Cloudflare 数据中心中运行 JavaScript Service Workers。修改站点的 HTTP 请求和响应，发出并行请求或从边缘生成响应。俺玩不明白，路由？还是cf 的另一个worker功能？ 因为名字和cf 的另一个workers一样,网上的教程也基本没有，如果站点不是面向全球用户的，那么这个功能应该用不到</p><h1 id="页面规则"><a href="#页面规则" class="headerlink" title="页面规则"></a>页面规则</h1><p>页面规则用于控制针对给定的 URL 触发哪些 Cloudflare 设置。针对每个 URL 仅触发一个页面规则，因此，如果您按照优先级顺序对页面规则进行排序，则这非常有用，请尽可能将 URL 模式设置得具体些。</p><p>能有效改善网而言加载速度，还能有效的防止CC攻击</p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>这里能开的尽量都开一下</p><ul><li><p>HTTP/2：加快页面速度，<strong>建议开启</strong></p></li><li><p>HTTP/3（使用 QUIC）：使用 QUIC 加速 HTTP 请求，QUIC 提供比 TCP 和 TLS 更高的加密和性能 <strong>建议开启</strong></p></li><li><p>0-RTT 连接恢复：提高之前已连接到您网站的客户端的性能 不了解怎么个原理，<strong>建议开启</strong></p></li><li><p>IPv6 兼容性：<strong>建议开启</strong></p></li><li><p>WebSocket：允许与您的源服务器建立 WebSocket 连接 <strong>建议开启</strong></p></li><li><p>洋葱路由：洋葱路由允许通过 Cloudflare 的洋葱服务而不是退出节点路由来自 Tor 网络上合法用户的流量，从而改善用户的隐私并实现更细化的保护。 <strong>建议开启</strong></p></li><li><p>IP 地理位置：包含访问者位置的国家/地区代码和所有发送到您网站的请求。 <strong>建议开启</strong></p></li><li><p>后面还有俩收费的功能，没钱没钱。</p></li></ul><h1 id="流量-1"><a href="#流量-1" class="headerlink" title="流量"></a>流量</h1><p>这一栏都是收费的，溜了溜了，没钱。</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>这一栏也是收费的，溜了溜了。</p><h1 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h1><p>这一栏也是收费的。。。。。</p><h1 id="apps"><a href="#apps" class="headerlink" title="apps"></a>apps</h1><p>这里的程序我没用过，但是听说有很多有用的，比如cf默认支持5个端口，有些应用程序能修改端口的，没见过几个玩cf的应用程序的。</p><h1 id="Scrape-Shield"><a href="#Scrape-Shield" class="headerlink" title="Scrape Shield"></a>Scrape Shield</h1><p>保护站点上的内容</p><ul><li>电子邮件地址混淆技术</li></ul><p>在您的网站上显示经过模糊处理的电子邮件地址，以防止机自动程序和垃圾邮件制造者获取该地址，而对于人类访问者，则不会对地址进行任何可见更改。<strong>建议开启</strong></p><ul><li>服务器端排除</li></ul><p>自动隐藏特定内容以防声誉不好的访问者查看，<strong>建议开启</strong></p><ul><li>Hotlink 保护</li></ul><p>防止站外链接指向您的图像。<strong>防盗链，建议开启</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github_Action自动构建Hexo实现Coding和Github双部署</title>
      <link href="posts/9d3b758e/"/>
      <url>posts/9d3b758e/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前使用过Coding_CI部署Hexo博客，但是由于我的博客源代码是在Github，使用Coding_CI经常拉取源码失败。所以今天再折腾下使用Github_Action来自动构建Hexo博客</p><a href="/posts/51df657a/" title="基于Coding-CI实现Hexo的持续集成与Github和Coding的同步部署">基于Coding-CI实现Hexo的持续集成与Github和Coding的同步部署</a><div class="note info flat"><p>Hexo源代码仓库(私有): <a href="https://github.com/imgyh/hexo.git">https://github.com/imgyh/hexo.git</a><br>Github_Page: <a href="https://github.com/imgyh/imgyh.github.io.git">https://github.com/imgyh/imgyh.github.io.git</a><br>Coding_Page: <a href="https://e.coding.net/guoyuanhong/hexo/hexo.git">https://e.coding.net/guoyuanhong/hexo/hexo.git</a></p></div><h1 id="API申请"><a href="#API申请" class="headerlink" title="API申请"></a>API申请</h1><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><p>在coding的个人设置中，找到访问令牌，并创建它<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221174003.png"></p><p>点击创建访问令牌，描述可以随便填写，勾选<code>project:depot</code>的复选框即可。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221174219.png"></p><p>密钥只显示一次，请将获取到的密钥复制保存下来，并记录用户名。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>和coding类似，在<code>Settings-&gt;Developer settings-&gt;Personal access tokens</code>创建<a href="https://github.com/settings/tokens">github访问令牌</a></p><p>点击创建令牌<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221174649.png"></p><p>名称随意，勾选<code>reop</code>复选框<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221175002.png"></p><p>密钥只显示一次，请将获取到的密钥复制保存下来。</p><h1 id="API-密钥添加"><a href="#API-密钥添加" class="headerlink" title="API 密钥添加"></a>API 密钥添加</h1><p>配置仓库私钥，hexo私有仓库的 <code>Settings –&gt; Secrets</code> 里添加私钥<code>Secrets</code>，以下面名称命名，输入对应的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">token_CodingAPI</span><br><span class="line">token_GithubAPI</span><br><span class="line">Username_Coding</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200421124607.png"></p><h1 id="配置GitHub-Actions"><a href="#配置GitHub-Actions" class="headerlink" title="配置GitHub Actions"></a>配置GitHub Actions</h1><p>GitHub Actions 有一些自己的术语。</p><ul><li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li><li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li><li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li></ul><p>在hexo仓库的Actions选项卡下点击新建workflow，名称默认或者自定义修改，编写如下配置。</p><div class="note info flat"><p>注意修改下面的配置成自己的信息。修改完成后，会生成 <code>.github/workflows/main.yml</code>, 你需要在本地<code>git pull</code>一下，把这个文件拉去下来。</p></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"># workflow name</span><br><span class="line">name: CI Hexo Blog Deploy LTS</span><br><span class="line"></span><br><span class="line"># master branch on push, auto run</span><br><span class="line">on: </span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  Deploy-Pages: </span><br><span class="line">    name: Deploy Hexo Public To Pages</span><br><span class="line">    runs-on: ubuntu-latest </span><br><span class="line">        </span><br><span class="line">    steps:</span><br><span class="line">    # check it to your workflow can access it</span><br><span class="line">    # from: https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;checkout</span><br><span class="line">    - name: Checkout Repository master branch</span><br><span class="line">      uses: actions&#x2F;checkout@master </span><br><span class="line">      </span><br><span class="line">    # from: https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;setup-node  </span><br><span class="line">    - name: Setup Node.js 10.x </span><br><span class="line">      uses: actions&#x2F;setup-node@master</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;10.x&quot;</span><br><span class="line">    </span><br><span class="line">    - name: Setup Git Infomation</span><br><span class="line">      run: | </span><br><span class="line">        git config --global user.name &#39;用户名&#39; </span><br><span class="line">        git config --global user.email &#39;邮箱&#39;  </span><br><span class="line"> </span><br><span class="line">    - name: Get Latest Commit Message </span><br><span class="line">      run: |</span><br><span class="line">        git log --pretty&#x3D;format:&quot;%s from Github Actions at &#96;date +&quot;%Y-%m-%d %H:%M:%S&quot;&#96;&quot; --date&#x3D;short -n 1  &gt; commit-message.log</span><br><span class="line">        </span><br><span class="line">    - name: Setup Hexo Dependencies</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">        npm install</span><br><span class="line">        </span><br><span class="line">    - name: Generate public files</span><br><span class="line">      run: |</span><br><span class="line">        hexo clean</span><br><span class="line">        hexo generate </span><br><span class="line">        </span><br><span class="line">    - name: Deploy To Github Pages </span><br><span class="line">      env:</span><br><span class="line">        Github_Pages: github.com&#x2F;用户名&#x2F;用户名.github.io</span><br><span class="line">        Github_Token: $&#123;&#123; secrets.token_GithubAPI &#125;&#125;</span><br><span class="line">      run: |  </span><br><span class="line">        git clone https:&#x2F;&#x2F;$&#123;Github_Pages&#125; .github_pages</span><br><span class="line">        cd .github_pages</span><br><span class="line">        git checkout master</span><br><span class="line">        cd ..&#x2F;</span><br><span class="line">        mv .github_pages&#x2F;.git&#x2F; .&#x2F;public&#x2F;</span><br><span class="line">        cd .&#x2F;public&#x2F;</span><br><span class="line">        git add .</span><br><span class="line">        git commit -F ..&#x2F;commit-message.log</span><br><span class="line">        git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;Github_Token&#125;@$&#123;Github_Pages&#125;&quot; master:master</span><br><span class="line"></span><br><span class="line">    - name: Deploy To Coding Pages </span><br><span class="line">      env:</span><br><span class="line">        Coding_Pages: e.coding.net&#x2F;用户名&#x2F;项目名&#x2F;仓库名.git</span><br><span class="line">        Coding_Token: $&#123;&#123; secrets.token_CodingAPI &#125;&#125;</span><br><span class="line">        Coding_Username: $&#123;&#123; secrets.Username_Coding &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        git clone https:&#x2F;&#x2F;$&#123;Coding_Username&#125;:$&#123;Coding_Token&#125;@$&#123;Coding_Pages&#125; .coding_pages</span><br><span class="line">        cd .coding_pages</span><br><span class="line">        git checkout master</span><br><span class="line">        cd ..&#x2F;</span><br><span class="line">        rm -r .&#x2F;public&#x2F;.git&#x2F;</span><br><span class="line">        mv .coding_pages&#x2F;.git&#x2F; .&#x2F;public&#x2F;</span><br><span class="line">        cd .&#x2F;public&#x2F;</span><br><span class="line">        git add .</span><br><span class="line">        git commit -F ..&#x2F;commit-message.log</span><br><span class="line">        git push --force --quiet &quot;https:&#x2F;&#x2F;$&#123;Coding_Username&#125;:$&#123;Coding_Token&#125;@$&#123;Coding_Pages&#125;&quot; master:master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rclone挂载googledrive</title>
      <link href="posts/e4b3ef62/"/>
      <url>posts/e4b3ef62/</url>
      
        <content type="html"><![CDATA[<p>先登录<code>VPS</code>,再安装<code>Rclone</code>，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;rclone.org&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><p>开始配置，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>会出现以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n&#x2F;s&#x2F;q&gt; n</span><br><span class="line">name&gt; googledrive  #配置名称，随便填</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 &#x2F; 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 &#x2F; Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 &#x2F; Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 &#x2F; Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 &#x2F; Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 &#x2F; Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 &#x2F; Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 &#x2F; Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line"> 9 &#x2F; Encrypt&#x2F;Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">10 &#x2F; FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">11 &#x2F; Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">12 &#x2F; Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">13 &#x2F; Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">14 &#x2F; Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">15 &#x2F; JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">16 &#x2F; Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">17 &#x2F; Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">18 &#x2F; Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">19 &#x2F; Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">20 &#x2F; Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">21 &#x2F; OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">22 &#x2F; Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">23 &#x2F; Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">24 &#x2F; Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">25 &#x2F; QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">26 &#x2F; SSH&#x2F;SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">27 &#x2F; Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">28 &#x2F; Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">29 &#x2F; Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">30 &#x2F; http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">31 &#x2F; premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 12  #选择12，Google Drive</span><br><span class="line">client_id&gt; 850428  #填上你的Google Drive客户端ID</span><br><span class="line">client_secret&gt; D72gPc  #填上你的Google Drive客户端密匙</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 &#x2F; Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line"> 2 &#x2F; Read-only access to file metadata and file contents.</span><br><span class="line">   \ &quot;drive.readonly&quot;</span><br><span class="line">   &#x2F; Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible in the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ &quot;drive.file&quot;</span><br><span class="line">   &#x2F; Allows read and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible in the drive website.</span><br><span class="line">   \ &quot;drive.appfolder&quot;</span><br><span class="line">   &#x2F; Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to read or download file content.</span><br><span class="line">   \ &quot;drive.metadata.readonly&quot;</span><br><span class="line">scope&gt; 1 </span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line">Fill in to access &quot;Computers&quot; folders. (see docs).</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">root_folder_id&gt; #回车</span><br><span class="line">Service Account Credentials JSON file path </span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only if you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">service_account_file&gt; #回车</span><br><span class="line">Edit advanced config? (y&#x2F;n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n  #输入n</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n  #输入n</span><br><span class="line">If your browser doesn&#39;t open automatically go to the following link: https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;  #打开该地址获取code</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Enter verification code&gt;hjdd   #输入你获取到的code</span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n  #如果要挂载团队盘选y，个人盘选n</span><br><span class="line">--------------------</span><br><span class="line">[Rats]</span><br><span class="line">type &#x3D; drive</span><br><span class="line">client_id &#x3D; 85042871</span><br><span class="line">client_secret &#x3D; D72gPc</span><br><span class="line">scope &#x3D; drive</span><br><span class="line">token &#x3D; &#123;&quot;access_token&quot;:&quot;y902Z&quot;&#125;  </span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y&#x2F;e&#x2F;d&gt; y  #输入y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;                 &#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">googledrive                 drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; q  #输入q保存退出</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rclone </tag>
            
            <tag> GoogleDrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare自选节点</title>
      <link href="posts/f019efb0/"/>
      <url>posts/f019efb0/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul><li><p><code>cloudflare</code>是一家<code>CDN</code>公司，可以为网站提供<code>CDN</code>服务，但是免费的套餐的节点速度不是很好，所以可以通过自选节点来解决。<code>cloudflare</code>有两种方式，一种是通过dns接入，这种方式完全把域名交给cloudflare了。另一方式是通过<code>cloudflare Partners</code>的方式，这种方式可以不用dns接入。除了网站可以使用他家的<code>CDN</code>服务外，好多人都用来加速<code>v2ray</code>。</p></li><li><p><code>v2ray</code>搭建可参考：</p><a href="/posts/8eabdcaf/" title="史上最稳科学上网姿势-宝塔-v2-ws-tls-cdn">史上最稳科学上网姿势-宝塔-v2-ws-tls-cdn</a> <a href="/posts/9585444e/" title="vps测速及科学上网常用脚本">vps测速及科学上网常用脚本</a> </li><li><p><code>cloudflare partener</code> 平台，推荐使用大佬的<a href="https://cdn.moeelf.com/">萌精灵</a></p></li></ul><h1 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h1><ul><li>登录<a href="https://cdn.moeelf.com/">萌精灵</a>，使用<code>cloudflare</code>账号,点击添加域名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419135648.png"></p><ul><li>添加解析记录</li></ul><p>添加解析记录到你的源ip</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419140034.png"></p><ul><li>自选ip</li></ul><p>记录下面的主机名<code>www.imgyh.cf</code> 和 <code>CNAME</code> <code>    www.imgyh.cf.cdn.cloudflare.net</code></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419140218.png"></p><p>回到你的域名<code>dns</code>解析提供商，我使用的<code>dnspod</code>,这里的解析提供商需要可以分线路解析的</p><p>添加 <code>www</code>记录到 <code>www.imgyh.cf.cdn.cloudflare.net</code> ,记录类型选择<code>CNAME</code>,解析线路选择<code>默认</code>或者<code>境外</code><br>再添加一个<code>www</code>记录到<code>自选ip</code>我这边速度较好的是<code>1.0.0.1</code>,记录类型选择 <code>A</code>,解析线路选择<code>境内</code></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419141049.png"></p><p>这样你在境内访问<code>www.imgyh.cf</code>就会解析到自选的ip上，在境外就会访问默认提供的节点</p><h1 id="可以自选的IP节点"><a href="#可以自选的IP节点" class="headerlink" title="可以自选的IP节点"></a>可以自选的IP节点</h1><ul><li>官方列表：CloudFlare公开的节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cloudflare.com&#x2F;zh-cn&#x2F;ips&#x2F;</span><br></pre></td></tr></table></figure><ul><li>CFIP白名单</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">173.245.48.0&#x2F;20</span><br><span class="line">103.21.244.0&#x2F;22</span><br><span class="line">103.22.200.0&#x2F;22</span><br><span class="line">103.31.4.0&#x2F;22</span><br><span class="line">141.101.64.0&#x2F;18</span><br><span class="line">108.162.192.0&#x2F;18</span><br><span class="line">190.93.240.0&#x2F;20</span><br><span class="line">188.114.96.0&#x2F;20</span><br><span class="line">197.234.240.0&#x2F;22</span><br><span class="line">198.41.128.0&#x2F;17</span><br><span class="line">162.158.0.0&#x2F;15</span><br><span class="line">104.16.0.0&#x2F;12</span><br><span class="line">172.64.0.0&#x2F;13</span><br><span class="line">131.0.72.0&#x2F;22</span><br></pre></td></tr></table></figure><ul><li>百度云加速与Cloudflare合作节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">162.159.211.4-103</span><br><span class="line">103.21.244.0&#x2F;22</span><br><span class="line">103.22.200.0&#x2F;22</span><br><span class="line">103.31.4.0&#x2F;22</span><br><span class="line">104.16.0.0&#x2F;12</span><br><span class="line">108.162.192.0&#x2F;18</span><br><span class="line">131.0.72.0&#x2F;22</span><br><span class="line">141.101.64.0&#x2F;18</span><br><span class="line">162.158.0.0&#x2F;15</span><br><span class="line">172.64.0.0&#x2F;13</span><br><span class="line">173.245.48.0&#x2F;20</span><br><span class="line">188.114.96.0&#x2F;20</span><br><span class="line">190.93.240.0&#x2F;20</span><br><span class="line">197.234.240.0&#x2F;22</span><br><span class="line">198.41.128.0&#x2F;17</span><br></pre></td></tr></table></figure><ul><li>Cloudflare节点推荐</li></ul><p>[萌精灵推荐]<a href="http://www.moeelf.com/archives/10.html">www.moeelf.com/archives/10.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CloudFlare 百度云合作 ip：</span><br><span class="line"></span><br><span class="line">162.159.208.4-162.159.208.103</span><br><span class="line"></span><br><span class="line">162.159.209.4-162.159.209.103</span><br><span class="line"></span><br><span class="line">162.159.210.4-162.159.210.103</span><br><span class="line"></span><br><span class="line">162.159.211.4-162.159.211.103</span><br><span class="line"></span><br><span class="line">各线路推荐列表：</span><br><span class="line">电信：推荐走圣何塞，例：104.16.160.* 或者上面的百度云合作 ip。</span><br><span class="line">移动：推荐走移动香港，例：172.64.32.*、141.101.115.* 或者 104.23.240.0-104.23.243.254。</span><br><span class="line">联通：没发布什么好线路，可走圣何塞。例：104.16.160.* 或者 104.23.240.0-104.23.243.254。也可以试一下走亚特兰大 108.162.236.*（日前不可用。） 。</span><br></pre></td></tr></table></figure><ul><li>Qi推荐</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">108.162.236.1&#x2F;24 联通 走美国</span><br><span class="line">172.64.32.1&#x2F;24 移动 走香港</span><br><span class="line">104.16.160.1&#x2F;24 电信 走美国洛杉矶</span><br><span class="line">———</span><br><span class="line">172.64.0.0&#x2F;24 电信 美国旧金山</span><br><span class="line">104.20.157.0&#x2F;24 联通 走日本</span><br><span class="line">104.28.14.0&#x2F;24 移动 走新加坡</span><br><span class="line">（联通移动推荐节点）</span><br><span class="line">104.23.240.0-104.23.243.254</span><br><span class="line">（电信推荐百度云合作ip）</span><br><span class="line">162.159.208.4-162.159.208.103</span><br><span class="line">162.159.209.4-162.159.209.103</span><br><span class="line">162.159.210.4-162.159.210.103</span><br><span class="line">162.159.211.4-162.159.211.103</span><br></pre></td></tr></table></figure><ul><li>适合电信的节点</li></ul><p>104.23.240.*<br>走欧洲各国出口 英国德国荷兰等 延迟比美国高一些 适合源站在欧洲的网站<br>172.64.32.*<br>虽然去程走新加坡，但是回程线路的绕路的，实际效果不好，不推荐<br>104.16.160.*<br>圣何塞的线路，比洛杉矶要快一点，推荐<br>108.162.236.*<br>亚特兰大线路，延迟稳定，但是延迟较高</p><ul><li>适合移动的节点</li></ul><p>162.158.133.* 走的丹麦，这一段ip只有部分能用，可以自己试一下。绕美国。<br>198.41.214.*<br>198.41.212.*<br>198.41.208.*<br>198.41.209.*<br>172.64.32.*<br>141.101.115.*<br>移动走香港的IP段有很多，以上并不是全部。CF移动走香港的分直连和走ntt的效果都挺不错的，不过部分地区晚上还是会丢包。<br>172.64.0. 这是走圣何塞的，一般用香港的就行<br>172.64.16.* 欧洲线路.绕</p><p>1.0.0.1效果较好</p><ul><li>电信部分</li></ul><p>大多数省直接使用1.0.0.0即可，延迟低，丢包少，<br>少部分还是需要换ip</p><p>新加坡<br>172.64.32.0-172.64.47.254</p><p>移动部分<br>新加坡<br>104.18.48.0-104.18.63.255<br>104.24.112.0-104.24.127.255<br>104.27.128.0-104.27.143.255<br>104.28.0.0-104.28.15.255</p><ul><li>移动部分</li></ul><p>圣何塞 cogentco.com<br>104.28.16.0-31.255<br>104.27.144.0-243.254<br>104.23.240.0-243.254</p><p>香港cloudflare1-100g.hkix.net<br>大部分都是这个通道<br>1.0.0.0-254<br>1.1.1.0-254<br>66.235.200.0-254 此段为IPOWER.COM endurance.com专用，有可能被跳转到IPOWER.COM endurance.com页面<br>104.16.80.0-95.255<br>104.16.175.255-104.16.191.255</p><p>香港直连<br>23.227.63.0-254 此段为shopify.com专用，有可能被跳转到shopify.com页面<br>104.16.0.0-79.255<br>104.16.96.0-175.254<br>104.16.192.0-207.255</p><p>新加坡 ae-0.cloudflare.sngpsi07.sg.bb.gin.ntt.net<br>都从香港ntt转发<br>104.28.0.0-15.255</p><ul><li>联通部分</li></ul><p>伦敦 cloudflare-gw.cr10-lon1.ip4.gtt.net<br>172.64.19.16</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare搭建google云端硬盘索引</title>
      <link href="posts/1225a85c/"/>
      <url>posts/1225a85c/</url>
      
        <content type="html"><![CDATA[<h1 id="Goindex安装使用"><a href="#Goindex安装使用" class="headerlink" title="Goindex安装使用"></a>Goindex安装使用</h1><ul><li>项目： <a href="https://github.com/imgyh/goindex-backup">https://github.com/imgyh/goindex-backup</a> <del><a href="https://github.com/donwa/goindex">https://github.com/donwa/goindex</a></del></li><li>演示：<a href="https://index.gd.workers.dev/">https://index.gd.workers.dev/</a></li><li>效果：<a href="https://gd.gyh.workers.dev/">https://gd.gyh.workers.dev/</a></li><li>绑域名：<a href="https://gd.0941314.xyz/">https://gd.0941314.xyz/</a></li></ul><h2 id="两种部署方式"><a href="#两种部署方式" class="headerlink" title="两种部署方式"></a>两种部署方式</h2><p>GoIndex支持两种安装部署方案：推荐第二种比较简单</p><p>安装部署方案1，此方案适合动手能力比较强，对安全性要求高的同学使用。</p><ol><li>在本地安装 rclone。</li><li>按照 <a href="https://rclone.org/drive/">https://rclone.org/drive/</a> 流程进行授权。</li><li>执行 rclone config file 查看 rclone.conf 路径。找到root_folder_id和refresh_token记录下来。</li><li>下载 <a href="https://github.com/imgyh/goindex-backup">https://github.com/imgyh/goindex-backup</a> <del><a href="https://github.com/donwa/goindex">https://github.com/donwa/goindex</a></del> 中的 index.js 并填入 root 和 refresh_token</li><li>复制代码 到 CloudFlare 部署。</li></ol><p>安装部署方案2。作者不会记录<code>refresh_token</code>，但为避免纠纷，建议有条件的同学使用方案1进行部署</p><ol><li>访问：<a href="https://install.gd.workers.dev/">https://install.gd.workers.dev/</a></li><li>授权认证后，生成部署代码。</li><li>复制代码 到 <code>CloudFlare</code> 部署。</li></ol><blockquote><p>由于goindex的作者删库了，所以复制的代码需要修改，可以使用我修改好的<code>index.js</code>。 <a href="https://github.com/imgyh/goindex-backup">仓库地址</a></p></blockquote><p>点击你的硬盘，最后的<code>ID</code>就是所需要填写的<code>目录ID</code><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200416220930.png"></p><h1 id="部署到cloudflare-wokers"><a href="#部署到cloudflare-wokers" class="headerlink" title="部署到cloudflare wokers"></a>部署到cloudflare wokers</h1><p>首先登录<code>cloudflare</code>，官网→<a href="https://www.cloudflare.com/">传送门</a>，然后看到<code>Workers</code>入口。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419150725.png"></p><p>接下来点击<code>Create a Worker</code>创建一个<code>Worker</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419150854.png"></p><p>把你之前获取的<code>Workers</code>代码粘贴进去，然后可以在左上角双击修改域名，再点击<code>Save and Deploy</code>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419151031.png"></p><p>最后打开分配的子域名即可，此后修改配置可以自行修改Workers代码</p><h1 id="API部署"><a href="#API部署" class="headerlink" title="API部署"></a>API部署</h1><p>这里也可以使用自己的<code>API</code>部署，好处就是安全点，高峰期也不容易爆炸，当然安装会麻烦点，如果不经常使用的话，还是建议用上面的方法快速部署。</p><p>1、获取GDrive客户端</p><p>先启用<code>Google Drive API</code>，启用地址：<a href="https://console.developers.google.com/apis/api/drive.googleapis.com/overview">点击进入</a>，注意这里使用个人账号操作。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419151401.png"></p><p>再创建一个<code>OAuth client ID</code>，创建地址：<a href="https://console.developers.google.com/apis/credentials/oauthclient">点击进入</a>。应用类型选择其他(<code>Other</code>)，名称自己填，这里博主填的<code>GoIndex</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419153237.png"></p><p>然后你会获得自己的客户端ID和客户端密钥，再复制下来。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200419155819.png"></p><p>2、获取refresh_token</p><p>这里使用<code>Rclone</code>来获取<code>refresh_token</code>，先登录<code>VPS</code>,再安装<code>Rclone</code>，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;rclone.org&#x2F;install.sh | bash</span><br></pre></td></tr></table></figure><p>开始配置，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>会出现以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">n&#x2F;s&#x2F;q&gt; n</span><br><span class="line">name&gt; Rats  #配置名称，随便填</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 &#x2F; 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 &#x2F; Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 &#x2F; Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 &#x2F; Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 &#x2F; Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 &#x2F; Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 &#x2F; Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 &#x2F; Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line"> 9 &#x2F; Encrypt&#x2F;Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">10 &#x2F; FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">11 &#x2F; Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">12 &#x2F; Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">13 &#x2F; Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">14 &#x2F; Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">15 &#x2F; JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">16 &#x2F; Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">17 &#x2F; Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">18 &#x2F; Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">19 &#x2F; Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">20 &#x2F; Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">21 &#x2F; OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">22 &#x2F; Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">23 &#x2F; Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">24 &#x2F; Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">25 &#x2F; QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">26 &#x2F; SSH&#x2F;SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">27 &#x2F; Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">28 &#x2F; Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">29 &#x2F; Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">30 &#x2F; http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">31 &#x2F; premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 12  #选择12，Google Drive</span><br><span class="line">client_id&gt; 850428  #填上你的Google Drive客户端ID</span><br><span class="line">client_secret&gt; D72gPc  #填上你的Google Drive客户端密匙</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 &#x2F; Full access all files, excluding Application Data Folder.</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line"> 2 &#x2F; Read-only access to file metadata and file contents.</span><br><span class="line">   \ &quot;drive.readonly&quot;</span><br><span class="line">   &#x2F; Access to files created by rclone only.</span><br><span class="line"> 3 | These are visible in the drive website.</span><br><span class="line">   | File authorization is revoked when the user deauthorizes the app.</span><br><span class="line">   \ &quot;drive.file&quot;</span><br><span class="line">   &#x2F; Allows read and write access to the Application Data folder.</span><br><span class="line"> 4 | This is not visible in the drive website.</span><br><span class="line">   \ &quot;drive.appfolder&quot;</span><br><span class="line">   &#x2F; Allows read-only access to file metadata but</span><br><span class="line"> 5 | does not allow any access to read or download file content.</span><br><span class="line">   \ &quot;drive.metadata.readonly&quot;</span><br><span class="line">scope&gt; 1 </span><br><span class="line">ID of the root folder</span><br><span class="line">Leave blank normally.</span><br><span class="line">Fill in to access &quot;Computers&quot; folders. (see docs).</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">root_folder_id&gt; #回车</span><br><span class="line">Service Account Credentials JSON file path </span><br><span class="line">Leave blank normally.</span><br><span class="line">Needed only if you want use SA instead of interactive login.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">service_account_file&gt; #回车</span><br><span class="line">Edit advanced config? (y&#x2F;n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n  #输入n</span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n  #输入n</span><br><span class="line">If your browser doesn&#39;t open automatically go to the following link: https:&#x2F;&#x2F;accounts.google.com&#x2F;o&#x2F;  #打开该地址获取code</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Enter verification code&gt;hjdd   #输入你获取到的code</span><br><span class="line">Configure this as a team drive?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n  #输入n</span><br><span class="line">--------------------</span><br><span class="line">[Rats]</span><br><span class="line">type &#x3D; drive</span><br><span class="line">client_id &#x3D; 85042871</span><br><span class="line">client_secret &#x3D; D72gPc</span><br><span class="line">scope &#x3D; drive</span><br><span class="line">token &#x3D; &#123;&quot;access_token&quot;:&quot;y902Z&quot;&#125;  #记住里面的refresh_token参数</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y&#x2F;e&#x2F;d&gt; y  #输入y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;                 &#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Rats                 drive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; q  #输入q保存退出</span><br></pre></td></tr></table></figure><p>此时我们在配置过程中就获取到了<code>refresh_token</code>参数，如果忘了的可以查看配置文件。</p><p>不知道配置文件在哪的，可以使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config file | grep rclone.conf</span><br></pre></td></tr></table></figure><p>3、修改Workers代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#填上自己的api客户端，密匙和获取到的refresh_token</span><br><span class="line">“client_id”：“20226481”，</span><br><span class="line">“client_secret”：“X4Z3ca8”，</span><br><span class="line">“refresh_token”：“”，</span><br></pre></td></tr></table></figure><p>最后就可以部署<code>Workers</code>代码了，方法参考上面的快速部署。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudflare </tag>
            
            <tag> Goindex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qBittorrent一键安装脚本</title>
      <link href="posts/6c9f7751/"/>
      <url>posts/6c9f7751/</url>
      
        <content type="html"><![CDATA[<h1 id="PT工具安装脚本"><a href="#PT工具安装脚本" class="headerlink" title="PT工具安装脚本"></a>PT工具安装脚本</h1><blockquote><p>2020.7.16更新，这个<code>Github</code>项目包含了几乎所有的PT工具脚本，其中<code>qBittorrent</code>可以使用<code>deb包</code>安装最新版,或静态编译好的来进行安装。脚本目前支持 <code>Debian 9/10</code>, <code>Ubuntu 16.04/18.04</code>. 推荐使用 <code>Debian 10</code> 或 <code>Ubuntu 18.04</code>。</p></blockquote><p><a href="https://github.com/Aniverse/inexistence">https://github.com/Aniverse/inexistence</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- https:&#x2F;&#x2F;github.com&#x2F;Aniverse&#x2F;inexistence&#x2F;raw&#x2F;master&#x2F;inexistence.sh)</span><br></pre></td></tr></table></figure><h1 id="Centos安装脚本"><a href="#Centos安装脚本" class="headerlink" title="Centos安装脚本"></a>Centos安装脚本</h1><p>今天的这个一键安装脚本是安装的<code>4.1.1</code>版本，现在有更新版本的了，但我的vps配置较低，这又有现成脚本，所以就用这个脚本部署了</p><blockquote><p>脚本仅支持CentOS7，64位系统！！！请使用纯净的系统安装！！！请使用ROOT用户执行脚本！！！</p></blockquote><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;lala.im&#x2F;static&#x2F;script&#x2F;qBittorrentCentOS7install.sh &amp;&amp; chmod +x qBittorrentCentOS7install.sh</span><br><span class="line">.&#x2F;qBittorrentCentOS7install.sh</span><br></pre></td></tr></table></figure><p>因为编译<code>libtorrent</code>的时候需要用到大量的内存，小于<code>2GB</code>的机器可能会因为内存不足导致进程被杀掉，所以在脚本内加了一个创建<code>swap</code>的功能。创建的swap文件保存在<code>/var</code>目录下，安装完成之后可以自己手动删除掉。</p><p>另外因为<code>libtorrent</code>编译需要比较长的时间，我加了一个设置编译时使用多个<code>CPU</code>线程的功能，根据你自己机器的<code>CPU</code>核心数来设置就行了，比如你是一个4核心的机器，在脚本内输入4，那么编译的速度会变快很多！</p><p>脚本会帮你安装如下软件：</p><ul><li>qBittorrent4.1.1</li><li>libtorrent1.1.9（<a href="https://github.com/arvidn/libtorrent/releases/%EF%BC%89">https://github.com/arvidn/libtorrent/releases/）</a></li></ul><p>回显内容：</p><ul><li>qBittorrentWEB地址：你的机器公网IP+端口8080</li><li>WEB账号：admin</li><li>WEB密码：adminadmin</li></ul><p>管理命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start qbittorrent</span><br><span class="line">systemctl stop qbittorrent</span><br><span class="line">systemctl restart qbittorrent</span><br></pre></td></tr></table></figure><h1 id="Ubuntu安装教程"><a href="#Ubuntu安装教程" class="headerlink" title="Ubuntu安装教程"></a>Ubuntu安装教程</h1><ul><li>安装必要依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install software-properties-common</span><br></pre></td></tr></table></figure><ul><li>添加qBittorrent的源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository ppa:qbittorrent-team&#x2F;qbittorrent-stable</span><br></pre></td></tr></table></figure><ul><li>安装qBittorrent</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install qbittorrent-nox</span><br></pre></td></tr></table></figure><ul><li>启动qBittorrent</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qbittorrent-nox</span><br></pre></td></tr></table></figure><p>然后输入“y”同意条款，即可启动</p><p>但是有一个问题，如果断开了ssh连接，或者按了ctrl+c的话服务就会停止，所以要创建一个系统服务。</p><ul><li>创建服务文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;qbittorrent-nox.service</span><br></pre></td></tr></table></figure><p>在里面写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;qBittorrent Daemon Service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">#UMask&#x3D;000</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">LimitNOFILE&#x3D;infinity</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;qbittorrent-nox -d –webui-port&#x3D;8080</span><br><span class="line">ExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;killall -s 9 &#x2F;usr&#x2F;bin&#x2F;qbittorrent-nox</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">#TimeoutSec&#x3D;300</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><ul><li>依次运行以下命令</li></ul><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start qbittorrent-nox</span><br></pre></td></tr></table></figure><p>保存修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable qbittorrent-nox</span><br></pre></td></tr></table></figure><p>检验一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status qbittorrent-nox</span><br></pre></td></tr></table></figure><p>如果亮绿灯证明服务已正常运行。<br>如果你之前使用过 qbittorrent-nox 这个命令运行并设置了一些东西，设置将不再生效。<br>访问服务器IP:8080即可进入web界面。</p><p>qbittorrent网页登录密码：<br>账号：admin<br>密码：adminadmin</p><p>最后来设置一下qBittorrent：<br>进入设置，<br>在Web设置里更改语言和密码。<br>把BitTorrent-Torrent排队的勾给点掉。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qBittorrent </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onedrive上传工具-支持多线程文件文件夹上传</title>
      <link href="posts/39508e15/"/>
      <url>posts/39508e15/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文搬运自<a href="https://www.moerats.com/archives/1006/">萌鼠大佬</a></p><ul><li>在<a href="/posts/79e427dd/" title="自建aria2离线下载-自动上传onedrive云盘">自建aria2离线下载-自动上传onedrive云盘</a>这篇文章中介绍了<code>rclone</code>上传<code>onedrive</code>的方法，我使用了一天，发现文件多了之后会出现上传不上去的现象。所以弃用原来的方案。</li></ul><p><a href="https://moeclub.org/">萌咖</a>使用<code>Golang</code>基于新的<code>API</code>写了个效率更高的上传工具–<code>OneDriveUploader</code>，同时也修复了各种<code>Shell</code>版本遗留下来的小问题，该版本特点就是授权简单，无需依赖，单文件。同样的也可以配合<code>Aria2</code>一起自动上传，这里就再分享下，方便下有需求的人。</p><ul><li>支持上传文件和文件夹到指定目录，并保持上传前的目录结构。</li><li>支持命令参数使用，方便外部程序调用。</li><li>支持自定义上传分块大小。</li><li>支持多线程上传(多文件同时上传)。</li><li>支持根据文件大小动态调整重试次数，对抗不好的网络环境。</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Github地址：<a href="https://github.com/MoeClub/OneList/tree/master/OneDriveUploader">https://github.com/MoeClub/OneList/tree/master/OneDriveUploader</a></p><p>1、授权认证</p><p>点击右侧<code>URL</code>登录并授权，授权地址→<a href="https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&response_type=code&redirect_uri=http://localhost/onedrive-login&response_mode=query&scope=offline_access%20User.Read%20Files.ReadWrite.All">【国际版、个人版(家庭版)】</a>、<a href="https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&response_type=code&redirect_uri=http://localhost/onedrive-login&response_mode=query&scope=offline_access%20User.Read%20Files.ReadWrite.All">【中国版(世纪互联)】</a>。</p><p>授权后会获取一个<code>localhost</code>开头打不开的链接，这里复制好整个链接地址，包括<code>localhost</code>。</p><p>2、安装OneDriveUploader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#64位系统下载</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;OneDriveUploader&#x2F;amd64&#x2F;linux&#x2F;OneDriveUploader -P &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">#32位系统下载</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;OneDriveUploader&#x2F;i386&#x2F;linux&#x2F;OneDriveUploader -P &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line">#arm架构下载</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;OneDriveUploader&#x2F;arm&#x2F;linux&#x2F;OneDriveUploader -P &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">#给予权限</span><br><span class="line">chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;OneDriveUploader</span><br></pre></td></tr></table></figure><p>3、初始化配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#国际版，将url换成你上面复制的授权地址，包括http:&#x2F;&#x2F;loaclhost。</span><br><span class="line">OneDriveUploader -a &quot;url&quot;</span><br><span class="line"></span><br><span class="line">#个人版(家庭版)，将url换成你上面复制的授权地址，包括http:&#x2F;&#x2F;loaclhost。</span><br><span class="line">OneDriveUploader -ms -a &quot;url&quot;</span><br><span class="line"></span><br><span class="line">#中国版(世纪互联)，将url换成你上面复制的授权地址，包括http:&#x2F;&#x2F;loaclhost。</span><br><span class="line">OneDriveUploader -cn -a &quot;url&quot;</span><br></pre></td></tr></table></figure><p>如果提示<code>Init config file: /path/to/file/auth.json</code>类似信息，则初始化成功。</p><p>4、使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Usage of OneDriveUploader:</span><br><span class="line">  -a string</span><br><span class="line">        &#x2F;&#x2F; 初始化授权</span><br><span class="line">        Setup and Init auth.json.</span><br><span class="line">  -b string</span><br><span class="line">        &#x2F;&#x2F; 自定义上传分块大小, 可以提高网络吞吐量, 受限于磁盘性能和网络速度.</span><br><span class="line">        Set block size. [Unit: M; 5&lt;&#x3D;b&lt;&#x3D;60;] (default &quot;10&quot;)</span><br><span class="line">  -c string</span><br><span class="line">        &#x2F;&#x2F; 配置文件路径</span><br><span class="line">        Config file. (default &quot;auth.json&quot;)</span><br><span class="line">  -n string</span><br><span class="line">        &#x2F;&#x2F; 上传单个文件时,在网盘中重命名</span><br><span class="line">        Rename file on upload to remote.</span><br><span class="line">  -r string</span><br><span class="line">        &#x2F;&#x2F; 上传到网盘中的某个目录, 默认: 根目录</span><br><span class="line">        Upload to reomte path.</span><br><span class="line">  -s string</span><br><span class="line">        &#x2F;&#x2F; *必要参数, 要上传的文件或文件夹</span><br><span class="line">        Upload item.</span><br><span class="line">  -t string</span><br><span class="line">        &#x2F;&#x2F; 线程数, 同时上传文件的个数. 默认: 2</span><br><span class="line">        Set thread num. (default &quot;2&quot;)</span><br><span class="line">  -f</span><br><span class="line">        &#x2F;&#x2F; 开关(推荐)</span><br><span class="line">        &#x2F;&#x2F; 加上 -f 参数，强制读取 auth.json 中的块大小配置和多线程配置.</span><br><span class="line">        &#x2F;&#x2F; 不加 -f 参数, 每次覆盖保存当前使用参数到 auth.json 配置文件中.</span><br><span class="line">        Force Read config form config file. [BlockSize, ThreadNum]</span><br><span class="line">  -skip</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 跳过上传网盘中已存在的同名文件. (默认不跳过)</span><br><span class="line">        Skip exist file on remote.</span><br><span class="line">  -cn</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 授权中国版(世纪互联), 需要此参数.</span><br><span class="line">        OneDrive by 21Vianet.</span><br><span class="line">  -ms</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 授权个人版(家庭版), 需要此参数.</span><br><span class="line">        OneDrive by Microsoft.</span><br></pre></td></tr></table></figure><p>5、命令示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#将当前目录下的mm00.jpg文件上传到OneDrive网盘根目录</span><br><span class="line">OneDriveUploader -c &#x2F;path&#x2F;to&#x2F;file&#x2F;auth.json -s &quot;mm00.jpg&quot;</span><br><span class="line"></span><br><span class="line">#将当前目录下的mm00.jpg文件上传到OneDrive网盘根目录，并改名为mm01.jpg</span><br><span class="line">OneDriveUploader -c &#x2F;path&#x2F;to&#x2F;file&#x2F;auth.json -s &quot;mm00.jpg&quot; -n &quot;mm01.jpg&quot;</span><br><span class="line"></span><br><span class="line">#将当前目录下的Download文件夹上传到OneDrive网盘根目录</span><br><span class="line">OneDriveUploader -c &#x2F;path&#x2F;to&#x2F;file&#x2F;auth.json -s &quot;Download&quot; </span><br><span class="line"></span><br><span class="line">#将当前目录下的Download文件夹上传到OneDrive网盘Test目录中</span><br><span class="line">OneDriveUploader -c &#x2F;path&#x2F;to&#x2F;file&#x2F;auth.json -s &quot;Download&quot; -r &quot;Test&quot;</span><br><span class="line"></span><br><span class="line">#将同目录下的Download文件夹上传到OneDriv网盘Test目录中，使用10线程</span><br><span class="line">OneDriveUploader -c &#x2F;path&#x2F;to&#x2F;file&#x2F;auth.json -t 10 -s &quot;Download&quot; -r &quot;Test&quot;</span><br><span class="line"></span><br><span class="line">#将同目录下的Download文件夹上传到OneDrive网盘Test目录中，使用15线程，并设置分块大小为20M</span><br><span class="line">OneDriveUploader -c &#x2F;path&#x2F;to&#x2F;file&#x2F;auth.json -t 15 -b 20 -s &quot;Download&quot; -r &quot;Test&quot;</span><br></pre></td></tr></table></figure><p><code>/path/to/file/auth.json</code>为初始化时，生成的<code>auth.json</code>绝对路径地址，本文默认<code>/root/auth.json</code>，自行调整。</p><p>例如：上传到OneDrive，进入要上传的文件/文件夹所在的目录，输入<code>OneDriveUploader -c /root/auth.json -t 3 -b 20 -s &quot;文件名/文件夹名&quot; -r &quot;offline&quot;</code></p><div class="note info flat"><p>注意：如果你之前上传手动中断过，再上传的时候，请使用<code>-skip</code>参数，默认会跳过你已经上传过的文件/文件夹。</p></div><h1 id="Aria2自动上传"><a href="#Aria2自动上传" class="headerlink" title="Aria2自动上传"></a>Aria2自动上传</h1><p>上传脚本代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">GID&#x3D;&quot;$1&quot;;</span><br><span class="line">FileNum&#x3D;&quot;$2&quot;;</span><br><span class="line">File&#x3D;&quot;$3&quot;;</span><br><span class="line">MaxSize&#x3D;&quot;15728640&quot;;</span><br><span class="line">Thread&#x3D;&quot;3&quot;;  #默认3线程，自行修改，服务器配置不好的话，不建议太多</span><br><span class="line">Block&#x3D;&quot;20&quot;;  #默认分块20m，自行修改</span><br><span class="line">RemoteDIR&#x3D;&quot;offline&quot;;  #上传到Onedrive的路径，默认为根目录，如果要上传到MOERATS目录，&quot;&quot;里面请填成MOERATS</span><br><span class="line">LocalDIR&#x3D;&quot;&#x2F;data&#x2F;ccaaDown&#x2F;&quot;;  #Aria2下载目录，记得最后面加上&#x2F;</span><br><span class="line">Uploader&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;OneDriveUploader&quot;;  #上传的程序完整路径，默认为本文安装的目录</span><br><span class="line">Config&#x3D;&quot;&#x2F;root&#x2F;auth.json&quot;;  #初始化生成的配置auth.json绝对路径，参考第3步骤生成的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ -z $(echo &quot;$FileNum&quot; |grep -o &#39;[0-9]*&#39; |head -n1) ]]; then FileNum&#x3D;&#39;0&#39;; fi</span><br><span class="line">if [[ &quot;$FileNum&quot; -le &#39;0&#39; ]]; then exit 0; fi</span><br><span class="line">if [[ &quot;$#&quot; !&#x3D; &#39;3&#39; ]]; then exit 0; fi</span><br><span class="line"></span><br><span class="line">function LoadFile()&#123;</span><br><span class="line">  if [[ ! -e &quot;$&#123;Uploader&#125;&quot; ]]; then return; fi</span><br><span class="line">  IFS_BAK&#x3D;$IFS</span><br><span class="line">  IFS&#x3D;$&#39;\n&#39;</span><br><span class="line">  tmpFile&#x3D;&quot;$(echo &quot;$&#123;File&#x2F;#$LocalDIR&#125;&quot; |cut -f1 -d&#39;&#x2F;&#39;)&quot;</span><br><span class="line">  FileLoad&#x3D;&quot;$&#123;LocalDIR&#125;$&#123;tmpFile&#125;&quot;</span><br><span class="line">  if [[ ! -e &quot;$&#123;FileLoad&#125;&quot; ]]; then return; fi</span><br><span class="line">  ItemSize&#x3D;$(du -s &quot;$&#123;FileLoad&#125;&quot; |cut -f1 |grep -o &#39;[0-9]*&#39; |head -n1)</span><br><span class="line">  if [[ -z &quot;$ItemSize&quot; ]]; then return; fi</span><br><span class="line">  if [[ &quot;$ItemSize&quot; -ge &quot;$MaxSize&quot; ]]; then</span><br><span class="line">    echo -ne &quot;\033[33m$&#123;FileLoad&#125; \033[0mtoo large to spik.\n&quot;;</span><br><span class="line">    return;</span><br><span class="line">  fi</span><br><span class="line">  $&#123;Uploader&#125; -c &quot;$&#123;Config&#125;&quot; -t &quot;$&#123;Thread&#125;&quot; -b &quot;$&#123;Block&#125;&quot; -s &quot;$&#123;FileLoad&#125;&quot; -r &quot;$&#123;RemoteDIR&#125;&quot; -skip</span><br><span class="line">  if [[ $? &#x3D;&#x3D; &#39;0&#39; ]]; then</span><br><span class="line">    rm -rf &quot;$&#123;FileLoad&#125;&quot;;</span><br><span class="line">  fi</span><br><span class="line">  IFS&#x3D;$IFS_BAK</span><br><span class="line">&#125;</span><br><span class="line">LoadFile;</span><br></pre></td></tr></table></figure><p>编辑好上传脚本后，可以检测下脚本编码是否正确，比如我脚本路径为<code>/root/upload.sh</code>，使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &#x2F;root&#x2F;upload.sh</span><br><span class="line">bash &#x2F;root&#x2F;upload.sh</span><br></pre></td></tr></table></figure><p>如果无任何输出，则正确，反之输出类似<code>$&#39;r&#39;: command not found</code>错误，则需要转换下编码格式，具体步骤如下。</p><p>先安装<code>dos2unix</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#CentOS系统</span><br><span class="line">yum install dos2unix -y</span><br><span class="line"></span><br><span class="line">#Debian&#x2F;Ubuntu系统</span><br><span class="line">apt install dos2unix -y</span><br></pre></td></tr></table></figure><p>再转换编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#后面为脚本路径</span><br><span class="line">dos2unix &#x2F;root&#x2F;upload.sh</span><br></pre></td></tr></table></figure><p>最后在<code>aria2.conf</code>最后加入<code>on-download-complete=/root/upload.sh</code>,就是下载完成后，执行这个脚本文件，上传到<code>onedrive</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>又一个OneDrive目录索引--onelist</title>
      <link href="posts/ee1b50a3/"/>
      <url>posts/ee1b50a3/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文转自<a href="https://www.moerats.com/archives/1016/">萌鼠大佬</a></p><p><code>OneList</code>主要的特色就是解决了因<code>OneDrive API</code>抽风导致的很多问题，稳定性和访问速度都是不错的。不过由于使用<code>Python</code>写的，而Py单线程容易阻塞，响应不够迅速，刷新缓存时，Web端请求基本不可用，所以在整体性能上有点瑕疵。基于<code>Golang</code>的性能更好，效率更高，多盘并发缓存等众多好处，于是萌咖大佬就弃用<code>Python</code>版本，使用<code>Golang</code>重写了<code>OneList</code>，同时支持国际版、个人免费版(家庭版)、中国版(世纪互联)及多网盘绑定。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>Github地址：<a href="https://github.com/MoeClub/OneList/tree/master/Rewrite">https://github.com/MoeClub/OneList/tree/master/Rewrite</a></p><p>1、授权认证<br>点击右侧URL登录并授权，授权<a href="https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=78d4dc35-7e46-42c6-9023-2d39314433a5&response_type=code&redirect_uri=http://localhost/onedrive-login&response_mode=query&scope=offline_access%20User.Read%20Files.ReadWrite.All">国际版、个人版(家庭版)</a>、<a href="https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize?client_id=dfe36e60-6133-48cf-869f-4d15b8354769&response_type=code&redirect_uri=http://localhost/onedrive-login&response_mode=query&scope=offline_access%20User.Read%20Files.ReadWrite.All">中国版(世纪互联)</a>。</p><p>授权后会获取一个<code>localhost</code>开头打不开的链接，这里复制好整个链接地址，包括<code>localhost</code>。</p><p>2、安装OneList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#新建并进入OneList目录</span><br><span class="line">mkdir &#x2F;opt&#x2F;OneList &amp;&amp; cd $_</span><br><span class="line"></span><br><span class="line">#64位系统下载</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;Rewrite&#x2F;amd64&#x2F;linux&#x2F;OneList</span><br><span class="line">#32位系统下载</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;&#x2F;master&#x2F;Rewrite&#x2F;i386&#x2F;linux&#x2F;OneList</span><br><span class="line">#arm架构下载</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;Rewrite&#x2F;arm&#x2F;linux&#x2F;OneList</span><br><span class="line">    </span><br><span class="line">#给予权限</span><br><span class="line">chmod +x OneList</span><br></pre></td></tr></table></figure><p>3、使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage of OneList:</span><br><span class="line">  -a string</span><br><span class="line">        &#x2F;&#x2F; 初始化配置文件,添加新配置</span><br><span class="line">        Setup and Init auth.json.</span><br><span class="line">  -bind string</span><br><span class="line">        &#x2F;&#x2F; 绑定IP地址(公网: 0.0.0.0)</span><br><span class="line">        Bind Address (default &quot;127.0.0.1&quot;)</span><br><span class="line">  -port string</span><br><span class="line">        &#x2F;&#x2F; 绑定端口(HTTP:80)</span><br><span class="line">        Port (default &quot;5288&quot;)</span><br><span class="line">  -s string</span><br><span class="line">        &#x2F;&#x2F; 设置 SubPath 项, 需要与 -a 一起使用.</span><br><span class="line">        Set SubPath. [unique per account] (default &quot;&#x2F;&quot;)</span><br><span class="line">  -c string</span><br><span class="line">        &#x2F;&#x2F; 配置文件</span><br><span class="line">        Config file. (default &quot;config.json&quot;)</span><br><span class="line">  -t string</span><br><span class="line">        &#x2F;&#x2F; Index.html 目录样式文件</span><br><span class="line">        Index file. (default &quot;index.html&quot;)</span><br><span class="line">  -cn</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 授权中国版(世纪互联), 需要此参数.</span><br><span class="line">        OneDrive by 21Vianet.</span><br><span class="line">  -ms</span><br><span class="line">        &#x2F;&#x2F; 开关</span><br><span class="line">        &#x2F;&#x2F; 授权个人版(家庭版), 需要此参数.</span><br><span class="line">        OneDrive by Microsoft.</span><br></pre></td></tr></table></figure><p>4、生成配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#国际版，将url换成你上面复制的授权地址，包括http:&#x2F;&#x2F;loaclhost。</span><br><span class="line">.&#x2F;OneList -a &quot;url&quot; -s &quot;&#x2F;onedrive01&quot;</span><br><span class="line"></span><br><span class="line">#个人版(家庭版)，将url换成你上面复制的授权地址，包括http:&#x2F;&#x2F;loaclhost。</span><br><span class="line">.&#x2F;OneList -ms -a &quot;url&quot; -s &quot;&#x2F;onedrive02&quot;</span><br><span class="line"></span><br><span class="line">#中国版(世纪互联)，将url换成你上面复制的授权地址，包括http:&#x2F;&#x2F;loaclhost。</span><br><span class="line">.&#x2F;OneList -cn -a &quot;url&quot; -s &quot;&#x2F;onedrive03&quot;</span><br></pre></td></tr></table></figure><p>提示<code>Success! Add config. &#39;/path/to/config.json&#39;</code>信息，则添加成功。</p><p>这里要注意的是：</p><blockquote><p>1、授权url地址只能用一次，超过需要重新授权。<br>2、命令中的/onedrive01参数为指定网盘地址后缀，比如<code>http://domain.com/onedrive01</code>。<br>3、授权多个网盘的话，重复授权多次即可，参数均会添加到一个配置文件，且后缀不能重复。<br>4、地址后缀填错了的，可以稍后在配置文件中修改。</p></blockquote><p>本文默认的配置文件路径<code>/opt/OneList/config.json</code>，参数详解，可自行修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &#x2F;&#x2F; 如果是家庭版或者个人免费版, 此项应为 true.</span><br><span class="line">    &quot;MSAccount&quot;: false,</span><br><span class="line">    &#x2F;&#x2F; 如果是中国版(世纪互联), 此项应为 true.</span><br><span class="line">    &quot;MainLand&quot;: false,</span><br><span class="line">    &#x2F;&#x2F; 授权令牌</span><br><span class="line">    &quot;RefreshToken&quot;: &quot;1234564567890ABCDEF&quot;,</span><br><span class="line">    &#x2F;&#x2F; 单配置文件中,此项要唯一.将此OneDrive中设置为&#96;RootPath&#96;目录映射在&#96;http:&#x2F;&#x2F;127.0.0.1:5288&#x2F;onedrive&#96; 下.</span><br><span class="line">    &#x2F;&#x2F; (只推荐一个盘位的时候使用根目录&quot;&#x2F;&quot;.)</span><br><span class="line">    &quot;SubPath&quot;: &quot;&#x2F;onedrive&quot;,</span><br><span class="line">    &#x2F;&#x2F; 读取OneDrive的某个目录作为根目录. (支持根目录&quot;&#x2F;&quot;)</span><br><span class="line">    &quot;RootPath&quot;: &quot;&#x2F;Test&quot;,</span><br><span class="line">    &#x2F;&#x2F; 隐藏OneDrive目录中的文件夹和文件, 条目间使用 &quot;|&quot; 分割. (跳过缓存设置的条目.)</span><br><span class="line">    &quot;HidePath&quot;: &quot;&#x2F;Test&#x2F;Obj01|&#x2F;Test&#x2F;Obj02&quot;,</span><br><span class="line">    &#x2F;&#x2F; 使用用户名和密码加密OneDrive目录. 目录和用户名密码间使用 &quot;?&quot; 分割, 用户名密码使用 &quot;:&quot; 分割, 条目间使用 &quot;|&quot; 分割. 无效条目将跳过.</span><br><span class="line">    &quot;AuthPath&quot;: &quot;&#x2F;Test&#x2F;Auth01?user01:pwd01|&#x2F;Test&#x2F;Auth02?user02:pwd02&quot;,</span><br><span class="line">    &#x2F;&#x2F; 缓存刷新间隔.(所有项目中的刷新时间取最小值为有效刷新间隔)</span><br><span class="line">    &quot;RefreshInterval&quot;: 900</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里注意，挂载多个盘符的时候，<code>SubPath</code>参数请不要为<code>/</code>，单个网盘建议为<code>/</code>。</p><p>5、运行OneList</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#下载默认的index.html主题，与config.json同目录，即本文默认的&#x2F;opt&#x2F;OneList</span><br><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;Rewrite&#x2F;index.html -P &#x2F;opt&#x2F;OneList</span><br><span class="line">#监听8000地址，自行修改</span><br><span class="line">&#x2F;opt&#x2F;OneList&#x2F;OneList -bind 0.0.0.0 -port 8000</span><br></pre></td></tr></table></figure><p>最后打开<code>ip:端口</code>访问即可，如果你挂载网盘的时候<code>SubPath</code>为<code>/</code>，那么直接通过根目录查看，如果为<code>/onedrive1</code>，那么通过<code>ip:端口/onedrive1</code>查看，如果该路径不存在，则会提示<code>No Found.</code>。</p><p>且首次运行会异步缓存，也就是至少有一个盘缓存成功了，才会显示。</p><p>6、开机自启</p><p>这里新建一个简单的systemd配置文件，适用<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p><p>使用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#注意修改你的运行监听端口，即你可以通过ip:端口访问程序，这里默认8000。</span><br><span class="line">#将以下代码一起复制到SSH运行</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;onelist.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;onelist</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;opt&#x2F;OneList&#x2F;OneList -bind 0.0.0.0 -port 8000 </span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#启动并设置开机自启</span><br><span class="line">systemctl start onelist</span><br><span class="line">systemctl enable onelist</span><br></pre></td></tr></table></figure><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><p>宝塔安装Nginx，建立站点，设置反代，应为前面是绑定公网ip<code>/opt/OneList/OneList -bind 0.0.0.0 -port 8000</code>这样运行的，所以反代的时候要使用公网ip或者解析好的域名来进行设置，如图</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200408202011.png"></p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><blockquote><p>提示：下载主题的index.html文件，覆盖默认index.html文件，本文默认存放/opt/OneList，然后重启程序即可</p></blockquote><p>主题地址：<a href="https://github.com/MoeClub/OneList/tree/master/Rewrite/@Theme">https://github.com/MoeClub/OneList/tree/master/Rewrite/@Theme</a></p><p>1、HaorWu</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#作者</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;HaorWu</span><br><span class="line"></span><br><span class="line">#特点</span><br><span class="line">支持移动端自适应</span><br><span class="line">支持当页搜索</span><br><span class="line">支持按文件名, 日期, 大小排序</span><br><span class="line">支持主动查看图片</span><br><span class="line">支持在线播放视频</span><br><span class="line"></span><br><span class="line">#下载地址</span><br><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;Rewrite&#x2F;%40Theme&#x2F;HaorWu&#x2F;index.html</span><br></pre></td></tr></table></figure><p>2、jackjieYYY</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#作者</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;jackjieYYY</span><br><span class="line">https:&#x2F;&#x2F;www.hostloc.com&#x2F;space-uid-38920.html</span><br><span class="line"></span><br><span class="line">#特点</span><br><span class="line">支持移动端自适应</span><br><span class="line">支持当页搜索</span><br><span class="line">支持按文件名, 日期, 大小排序</span><br><span class="line">支持在线播放视频</span><br><span class="line"></span><br><span class="line">#下载地址</span><br><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;MoeClub&#x2F;OneList&#x2F;master&#x2F;Rewrite&#x2F;%40Theme&#x2F;jackjieYYY&#x2F;index.html</span><br></pre></td></tr></table></figure><p>3、NomadJohn</p><p>论坛大佬写的，觉得还不错,支持在线浏览图片，视频，搜索文件，以及音乐播放功能<br>建立新的<code>index.html</code>将下面代码复制进去，注意和<code>config.json</code>在同一目录下</p><p><a href="https://raw.githubusercontent.com/NomadJohn/issue-blog/master/index.html">https://raw.githubusercontent.com/NomadJohn/issue-blog/master/index.html</a></p><h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">启动：systemctl start onelist</span><br><span class="line">停止：systemctl stop onelist</span><br><span class="line">重启：systemctl restart onelist</span><br><span class="line">查看状态：systemctl status onelist</span><br></pre></td></tr></table></figure><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#未设置开机自启</span><br><span class="line">rm -rf &#x2F;opt&#x2F;OneList</span><br><span class="line"></span><br><span class="line">#设置过开机自启</span><br><span class="line">systemctl stop onelist</span><br><span class="line">systemctl disable onelist</span><br><span class="line">rm -rf &#x2F;opt&#x2F;OneList &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;onelist.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
            <tag> Onelist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建aria2离线下载+自动上传onedrive云盘</title>
      <link href="posts/79e427dd/"/>
      <url>posts/79e427dd/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>等了好久，终于在今天早上买到了<a href="https://my.frantech.ca/aff.php?aff=3567">buyvm</a>家的2刀的配置，再配合他们家的1.25刀256G的储存块，用来离线下载简直不要太爽</p><div class="note info flat"><p>1、Buyvm家所有的KVM VPS均免费提供Directadmin面板，有需要的可以联系客服。<br>2、如果没有中途退款的需求，强烈推荐使用支付宝付款，支付宝付款有神秘加成，默认加元汇率，使用Paypal等付款是美元<br>3、储存块只能在拉斯维加斯这个数据中心才有</p></div><h1 id="添加储存块到vps"><a href="#添加储存块到vps" class="headerlink" title="添加储存块到vps"></a>添加储存块到vps</h1><p>1、在Buyvm官网购买一台Las Vegas机房的KVM VPS，如果仅用于存储，买最低配的512M内存就行了；同时按需购买Block Storage空间。</p><p>2、进入<a href="https://manage.buyvm.net/volumes/">Storage Volumes</a>后台，将[Block Storage]附加到（Attached To） 对应的VPS</p><p>3、查看数据块编号(开通邮件里也有)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &#x2F;dev&#x2F;disk&#x2F;by-id&#x2F;</span><br></pre></td></tr></table></figure><p>4、假设看到的结果是scsi-0BUYVM_SLAB_VOLUME-2181，那么2181就是数据块的id，或者后台也能直接看到。</p><p>5、格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 -F &#x2F;dev&#x2F;disk&#x2F;by-id&#x2F;scsi-0BUYVM_SLAB_VOLUME-2181</span><br></pre></td></tr></table></figure><p>6、创建文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;data</span><br></pre></td></tr></table></figure><p>7、挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o discard,defaults &#x2F;dev&#x2F;disk&#x2F;by-id&#x2F;scsi-0BUYVM_SLAB_VOLUME-2181 &#x2F;data</span><br></pre></td></tr></table></figure><p>8、设置开机/重启自动挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;&#x2F;dev&#x2F;disk&#x2F;by-id&#x2F;scsi-0BUYVM_SLAB_VOLUME-2181 &#x2F;data ext4 defaults,nofail,discard 0 0&#39; | sudo tee -a &#x2F;etc&#x2F;fstab</span><br></pre></td></tr></table></figure><h1 id="添加IPV6"><a href="#添加IPV6" class="headerlink" title="添加IPV6"></a>添加IPV6</h1><div class="tabs" id="ipv6"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#ipv6-1">Ubuntu老版本</button></li><li class="tab"><button type="button" data-href="#ipv6-2">Ubuntu18以上</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="ipv6-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;network&#x2F;interfaces</span><br></pre></td></tr></table></figure><p>在最后加入以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iface eth0 inet6 static</span><br><span class="line">        address 2605:6400:0020:05a8:0000:0000:0000:0006</span><br><span class="line">        netmask 48</span><br><span class="line">        gateway 2605:6400:20::1</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ipv6-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;netplan&#x2F;01-netcfg.yaml</span><br></pre></td></tr></table></figure><p>原本默认为如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># For more information, see netplan(5).</span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">      dhcp4: yes</span><br></pre></td></tr></table></figure><p>需要添加后面的三排，<code>addresses</code>为buyvm后台申请的ipv6地址，注意格式为： [‘ipv6/48’]，<code>gateway6</code>为ipv6的网关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># For more information, see netplan(5).</span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    eth0:</span><br><span class="line">      dhcp4: yes</span><br><span class="line">      dhcp6: no</span><br><span class="line">      addresses: [&#39;2605:6400:20:5a8::6&#x2F;48&#39;]</span><br><span class="line">      gateway6: 2605:6400:20::1</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="安装ccaa"><a href="#安装ccaa" class="headerlink" title="安装ccaa"></a>安装ccaa</h1><p><a href="https://github.com/helloxz/ccaa">CCAA</a>原为CentOS + Caddy + AriaNg + Aria2，故命名为CCAA，不过现在已经不仅仅支持CentOS，包括主流的Debian、Ubuntu也已经支持，自2.0(2020/02/28)版本开始已移除Caddy，改用Golang写了一个简单的WebServer来运行AriaNg。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Aria2 提供离线下载</span><br><span class="line">ccaa_web支撑AriaNg运行，使用Golang编写</span><br><span class="line">AriaNg为Aria2 提供WEB界面</span><br><span class="line">Filemanager提供文件管理</span><br></pre></td></tr></table></figure><h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><p>目前支持的操作系统为：CentOS 7-8、Debian 8-10、Ubuntu 16-18，操作系统要求64位。请根据自己的VPS位置复制下面的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#海外</span><br><span class="line">bash &lt;(curl -Lsk https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;helloxz&#x2F;ccaa&#x2F;master&#x2F;ccaa.sh)</span><br><span class="line">#国内</span><br><span class="line">bash &lt;(curl -Lsk https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;helloxz&#x2F;ccaa&#x2F;master&#x2F;ccaa.sh) cdn</span><br></pre></td></tr></table></figure><p>如果出现<code>-bash: curl: command not found</code>错误，说明curl命令没安装，请输入下面的命令先安装curl，再回过头来执行上面的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Debian or Ubuntu</span><br><span class="line">apt-get -y install curl</span><br><span class="line">#CentOS</span><br><span class="line">yum -y install curl</span><br></pre></td></tr></table></figure><ul><li>访问地址默认为<a href="http://ip:6080/">http://IP:6080</a></li><li>Aria2 RPC 密钥:您自行设置的</li><li>File Browser 用户名：默认为ccaa</li><li>File Browser 密码：默认为admin</li></ul><p>输入<code>http://IP:6080</code>访问AriaNg ，首次打开会提示“认证失败”，这个是正常现象。依次点击“AriaNg设置 - RPC - 填写您之前设置的RPC密钥”</p><p>如果服务器有启用安全组，请务必在安全组放行以下端口：<code>6080/6081/6800/6998/51413</code></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>安装成功后，您可以使用如下命令来管理CCAA：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#进入CCAA管理界面</span><br><span class="line">ccaa</span><br><span class="line">#查看ccaa状态</span><br><span class="line">ccaa status</span><br><span class="line">#启动ccaa</span><br><span class="line">ccaa start</span><br><span class="line">#停止ccaa</span><br><span class="line">ccaa stop</span><br><span class="line">#重启ccaa</span><br><span class="line">ccaa restart</span><br><span class="line">#查看当前版本</span><br><span class="line">ccaa -v</span><br></pre></td></tr></table></figure><h1 id="使用HTTPS"><a href="#使用HTTPS" class="headerlink" title="使用HTTPS"></a>使用HTTPS</h1><h2 id="宝塔添加AriaNg站点"><a href="#宝塔添加AriaNg站点" class="headerlink" title="宝塔添加AriaNg站点"></a>宝塔添加AriaNg站点</h2><p>AriaNg页面的源文件在<code>/etc/ccaa</code>,新建如下站点，配置好<code>ssl</code></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200408205254.png"></p><h2 id="aria2反向代理"><a href="#aria2反向代理" class="headerlink" title="aria2反向代理"></a>aria2反向代理</h2><p>同样的，新建一个站点配置好ssl</p><p>在配置文件中最后一个<code>&#125;</code>前添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ^~ &#x2F;jsonrpc &#123;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    add_header Front-End-Https on;</span><br><span class="line">    proxy_set_header Connection &quot;&quot;;</span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-NginX-Proxy true;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc;</span><br><span class="line">    proxy_pass_header X-Transmission-Session-Id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200408205612.png"></p><p>最后在<code>AriaNg</code>中修改RPC端口为443</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200408205749.png"></p><h1 id="挂载OneDrive网盘并实现Aria2下载结束自动上传文件"><a href="#挂载OneDrive网盘并实现Aria2下载结束自动上传文件" class="headerlink" title="挂载OneDrive网盘并实现Aria2下载结束自动上传文件"></a>挂载OneDrive网盘并实现Aria2下载结束自动上传文件</h1><p>以下方法是使用<code>Rclone</code>默认的<code>API</code>,当然也可以自建<code>API</code> 可参考： <a href="/posts/c4f1574a/" title="Rclone挂载OneDrive方法-自建API">Rclone挂载OneDrive方法-自建API</a></p><p>以下分为三小步这里做个简介：第一步是PC端获取网盘授权的令牌；第二步是在VPS里绑定获得的授权；第三步才是真正挂载到网盘上。因为OneDrive的授权需要在浏览器打开，而VPS没有图形界面，只能先在PC端获取授权，所以第一步和第二步有点重复。</p><p>除了挂载OneDrive网盘之外，还支持 Google Drive、Mege、Yandex等几十个国外网盘，其它网盘挂载教程这里我就不说了，善用搜索引擎。</p><h2 id="windows（PC）端安装Rclone"><a href="#windows（PC）端安装Rclone" class="headerlink" title="windows（PC）端安装Rclone"></a>windows（PC）端安装Rclone</h2><p>更简单的方法可参见：<a href="/posts/c4f1574a/" title="Rclone挂载OneDrive方法-自建API">Rclone挂载OneDrive方法-自建API</a></p><p>登录<a href="https://rclone.org/downloads/">Rclone</a>网官下载Rclone的窗户端的客户(windows AMD64 - 64 Bit)。<br>下载解压将里面的<code>rclone.exe</code>移动到你电脑<code>C:\Windows\System32</code>这个目录，其它的可以删掉没关系。<br>按<code>win + R</code>快捷键打开运行，输入<code>cmd</code>点确定来打开CMD窗口。</p><p>输入下面命令开始配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone config</span><br></pre></td></tr></table></figure><p>然后出现如下界面，按提示输入n回车创建个新的远程，然后提示输入name，名称随意但要记住，这里我填<code>onedrive</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;                 &#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">onedrive             onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; n   </span><br><span class="line">name&gt; onedrive</span><br></pre></td></tr></table></figure><p>回车后出现一长串网盘列表让你选，这里OneDrive是19，填入19回车，不要死记数字，不同版本数字选项会变化，Yandex这里是26，根据你需要选择，后续操作都差不多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;                 &#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">onedrive             onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; n</span><br><span class="line">name&gt; onedrive</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 &#x2F; A stackable unification remote, which can appear to merge the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line"> 2 &#x2F; Alias for a existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 &#x2F; Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 &#x2F; Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 &#x2F; Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 &#x2F; Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 &#x2F; Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 &#x2F; Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line"> 9 &#x2F; Encrypt&#x2F;Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">10 &#x2F; FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">11 &#x2F; Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">12 &#x2F; Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">13 &#x2F; Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">14 &#x2F; JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">15 &#x2F; Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">16 &#x2F; Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">17 &#x2F; Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">18 &#x2F; Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">19 &#x2F; Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">20 &#x2F; OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">21 &#x2F; Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">22 &#x2F; Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">23 &#x2F; QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">24 &#x2F; SSH&#x2F;SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">25 &#x2F; Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">26 &#x2F; Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">27 &#x2F; http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">Storage&gt; 19</span><br></pre></td></tr></table></figure><p>接着<code>client_id</code>和<code>client_secret</code> 直接不填回车;<br><code>Edit advanced config?</code> 输入n回车;<br><code>Already have a token - refresh?</code> 输入<code>y</code>回车，后面VPS里配置时没有这个提示的，会出现下个自动配置选项，别手快直接<code>y</code>;<br><code>Use auto config?</code> 这里输入<code>y</code>回车，后面VPS配置时这步要选<code>n</code><br>具体操作如下，不同版本可能会有变化，反正就是做选择题，看不懂复制出来可以翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Microsoft App Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt;</span><br><span class="line">Microsoft App Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt;</span><br><span class="line">Edit advanced config? (y&#x2F;n) </span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n</span><br><span class="line">Remote config </span><br><span class="line">Already have a token - refresh?  </span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; y</span><br><span class="line">Use auto config?  </span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; y</span><br></pre></td></tr></table></figure><p>接着浏览器会自动弹出窗口，然后登录你要挂载的OneDrive账号，征求许可接受就行了，出现下图界面即授权成功。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200408152848.png"></p><p>授权成功后返回cmd窗口出现以下界面，这里选<code>1</code>回车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Choose a number from below, or type in an existing value</span><br><span class="line"> 1 &#x2F; OneDrive Personal or Business  #个人和商用</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line"> 2 &#x2F; Root Sharepoint site</span><br><span class="line">   \ &quot;sharepoint&quot;</span><br><span class="line"> 3 &#x2F; Type in driveID</span><br><span class="line">   \ &quot;driveid&quot;</span><br><span class="line"> 4 &#x2F; Type in SiteID</span><br><span class="line">   \ &quot;siteid&quot;</span><br><span class="line"> 5 &#x2F; Search a Sharepoint site</span><br><span class="line">   \ &quot;search&quot;</span><br><span class="line">Your choice&gt;1</span><br></pre></td></tr></table></figure><p>提示找到一个驱动器，让你选择，这里就一个选项0，那就填0回车，然后问你是否确定，选<code>y</code>回车。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0: OneDrive (business) id&#x3D;huioaeuiaeagioioieuiaaefe@#%gaege94#</span><br><span class="line">Chose drive to use:&gt;0</span><br><span class="line">Found drive &#39;root&#39; of type &#39;business&#39;, URL:https:&#x2F;&#x2F;jxjjxy-my.sharepoint.com&#x2F;personal&#x2F;meeaghvp_t_odmail_cn&#x2F;Documents</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; y</span><br></pre></td></tr></table></figure><p>接着会出现一串长令牌，PC端的操作全是为了这个令牌，将下图红框内的整个复制，复制范围<code>&#123;&quot;access_token&quot;:…………………………2019-04-21T16:41:25.1595637+08:00&quot;&#125;</code>保存好，以后就可以省了这步PC端操作，下面就回到VPS操作</p><h2 id="VPS安装Rclone"><a href="#VPS安装Rclone" class="headerlink" title="VPS安装Rclone"></a>VPS安装Rclone</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~  #返回宿主目录</span><br><span class="line">curl https:&#x2F;&#x2F;rclone.org&#x2F;install.sh | sudo bash  #安装Rclone</span><br><span class="line">rclone config  #配置Rclone</span><br></pre></td></tr></table></figure><p>上面输入完<code>rclone config</code>回车后的过程跟前面在PC端的配置步骤基本一样，这里就不复述了，到了<code>Use auto config?</code> 问你是否使用自动配置这步不同，这里选<code>n</code>回车，然后在出现的<code>result&gt;</code>后面粘贴上你前面获得的<code>token</code>然后回车，接着会有几个确认（问你是否OK），按提示填 <code>y</code> 就行，<br>直到又回到下图配置开头界面，输入q回车退出配置即可，到此我们完成了网盘的授权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Name                 Type</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;                 &#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">onedrive             onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; q</span><br></pre></td></tr></table></figure><div class="note info flat"><p>以上两步就是为了得到token，并在VPS里创建一个rclone.conf配置文件，该配置文件目录在<code>/root/.config/rclone/rclone.conf</code>，可以将这个文件下载到本地，以后如果重装只需VPS上安装好rclone，然后将这个配置文件放进这个目录即可，免去繁琐配置过程。</p></div><h2 id="自动上传设置"><a href="#自动上传设置" class="headerlink" title="自动上传设置"></a>自动上传设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim*  #先安装下vim，也可以不安装用vi命令</span><br><span class="line">vim &#x2F;root&#x2F;rcloneupload.sh  #创建并打开名为 rcloneupload.sh 的脚本，用来处理自动上载</span><br></pre></td></tr></table></figure><p>不会用<code>vi</code>命令可以网上先了解下。<br>这里复制以下全部内容粘贴进去，确保里面以下三项的路径跟你前面设置的一致，最后检查下有没有复制漏了的部分，我这边复制总是缺失头部两行的内容。<br>以下三行内容跟你设置的目录对上↓<br><code>downloadpath=&#39;/data/ccaaDown&#39;</code> #Aria2下载目录<br><code>name=&#39;onedrive&#39;</code> #配置Rclone时的name<br><code>folder=&#39;/offline&#39;</code> #网盘里的文件夹，如果是根目录直接留空<br>没问题就保存退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">filepath&#x3D;$3     #取文件原始路径，如果是单文件则为&#x2F;Download&#x2F;a.mp4，如果是文件夹则该值为文件夹内第一个文件比如&#x2F;Download&#x2F;a&#x2F;1.mp4</span><br><span class="line">path&#x3D;$&#123;3%&#x2F;*&#125;     #取文件根路径，如把&#x2F;Download&#x2F;a&#x2F;1.mp4变成&#x2F;Download&#x2F;a</span><br><span class="line">downloadpath&#x3D;&#39;&#x2F;data&#x2F;ccaaDown&#39;    #Aria2下载目录</span><br><span class="line">name&#x3D;&#39;onedrive&#39; #配置Rclone时的name</span><br><span class="line">folder&#x3D;&#39;&#x2F;offline&#39;     #网盘里的文件夹，如果是根目录直接留空</span><br><span class="line">MinSize&#x3D;&#39;10k&#39;     #限制最低上传大小，默认10k，BT下载时可防止上传其他无用文件。会删除文件，谨慎设置。</span><br><span class="line">MaxSize&#x3D;&#39;15G&#39;     #限制最高文件大小，默认15G，OneDrive上传限制。</span><br><span class="line"></span><br><span class="line">if [ $2 -eq 0 ]; then exit 0; fi</span><br><span class="line"></span><br><span class="line">while true; do</span><br><span class="line">if [ &quot;$path&quot; &#x3D; &quot;$downloadpath&quot; ] &amp;&amp; [ $2 -eq 1 ]    #如果下载的是单个文件</span><br><span class="line">    then</span><br><span class="line">    rclone move -v &quot;$filepath&quot; $&#123;name&#125;:$&#123;folder&#125; --tpslimit 1 --buffer-size&#x3D;10M --min-size $MinSize --max-size $MaxSize</span><br><span class="line">    rm -vf &quot;$filepath&quot;.aria2    #删除残留的.aria.2文件</span><br><span class="line">    exit 0</span><br><span class="line">elif [ &quot;$path&quot; !&#x3D; &quot;$downloadpath&quot; ]    #如果下载的是文件夹</span><br><span class="line">    then</span><br><span class="line">    while [[ &quot;&#96;ls -A &quot;$path&#x2F;&quot;&#96;&quot; !&#x3D; &quot;&quot; ]]; do</span><br><span class="line">    rclone move -v &quot;$path&quot; $&#123;name&#125;:&#x2F;$&#123;folder&#125;&#x2F;&quot;$&#123;path##*&#x2F;&#125;&quot; --tpslimit 1 --buffer-size&#x3D;10M --min-size $MinSize --max-size $MaxSize --delete-empty-src-dirs</span><br><span class="line">    rclone delete -v &quot;$path&quot; --max-size $MinSize    #删除多余的文件</span><br><span class="line">    rclone rmdirs -v &quot;$downloadpath&quot; --leave-root    #删除空目录，--delete-empty-src-dirs 参数已实现，加上无所谓。</span><br><span class="line">    done</span><br><span class="line">    rm -vf &quot;$path&quot;.aria2    #删除残留的.aria2文件</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>保存后给予执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x &#x2F;root&#x2F;rcloneupload.sh</span><br></pre></td></tr></table></figure><p>然后编辑<code>Aria2</code>配置文件，在末尾加上一行<code>on-download-complete=/root/rcloneupload.sh</code>即可，后面为脚本的路径，意思是下载完成执行这个脚本，这个脚本具有变量千万不要手动执行。重启<code>CCAA</code>使<code>Aria2</code>配置文件生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;ccaa&#x2F;aria2.conf  #编辑aria2.conf</span><br><span class="line">on-download-complete&#x3D;&#x2F;root&#x2F;rcloneupload.sh  #末尾另起一行加上</span><br><span class="line">ccaa restart  #重启ccaa</span><br></pre></td></tr></table></figure><p>大功告成赶紧去下载看看吧。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
            <tag> Aria2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史上最稳科学上网姿势-宝塔+v2+ws+tls+cdn</title>
      <link href="posts/8eabdcaf/"/>
      <url>posts/8eabdcaf/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note info flat"><p>本教程仅为了提供技术交流，切勿去做违法之事(手动滑稽)</p></div><p>以前一直用的 <a href="/posts/9585444e/" title="233的一键脚本">233的一键脚本</a> 搭建v2ray的，上次不是白嫖到<code>euserv</code>家的免费ipv6小鸡。就想着搭建一下v2ray，结果一直不成功。经过一番搜索，终于使用官方原版的脚本搭建成功了</p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><p>首先，你需要准备一个域名添加A记录解析到你的服务器。<br>ssh到vps，切换到root，安装BT面板 <a href="https://www.bt.cn/">https://www.bt.cn/</a><br>成功安装后，登录宝塔，成功登录后会弹出推荐安装套件，选择一键安装相应的推荐服务，建议使用centos7。<br>安装完成后<br>接下来开始安装v2ray</p><h1 id="安装v2ray"><a href="#安装v2ray" class="headerlink" title="安装v2ray"></a>安装v2ray</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 此脚本已更新至下面的地址</span><br><span class="line">#bash &lt;(curl -L -s https:&#x2F;&#x2F;install.direct&#x2F;go.sh)</span><br><span class="line"></span><br><span class="line"># 安装脚本</span><br><span class="line">curl -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;v2fly&#x2F;fhs-install-v2ray&#x2F;master&#x2F;install-release.sh</span><br><span class="line">bash install-release.sh</span><br><span class="line"></span><br><span class="line"># 卸载v2ray</span><br><span class="line">bash install-release.sh --remove</span><br><span class="line"></span><br><span class="line"># 更新最新的geoip.dat 和 geosite.dat</span><br><span class="line">curl -O https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;v2fly&#x2F;fhs-install-v2ray&#x2F;master&#x2F;install-dat-release.sh</span><br><span class="line">bash install-dat-release.sh</span><br></pre></td></tr></table></figure><p>常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start v2ray   # 启动</span><br><span class="line">systemctl enable v2ray  # 设置开机自启</span><br><span class="line">systemctl restart v2ray # 重启</span><br><span class="line">systemctl status v2ray  # 查看运行状态</span><br></pre></td></tr></table></figure><p>服务器配置，注意去除以下配置文件中的中文注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;v2ray&#x2F;config.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;log&quot; : &#123;</span><br><span class="line">  &quot;access&quot;: &quot;&#x2F;var&#x2F;log&#x2F;v2ray&#x2F;access.log&quot;,</span><br><span class="line">  &quot;error&quot;: &quot;&#x2F;var&#x2F;log&#x2F;v2ray&#x2F;error.log&quot;,</span><br><span class="line">  &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;inbound&quot;: &#123;</span><br><span class="line">  &quot;port&quot;: 233, #自动生成的端口，须与Nignx设置的相一致，可自定义</span><br><span class="line">  &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;clients&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;id&quot;: &quot;d113539f-aef8-46a8-a570-8132baa0b680&quot;, #自动生成的UUID</span><br><span class="line">        &quot;level&quot;: 1,</span><br><span class="line">        &quot;alterId&quot;: 64</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;streamSettings&quot;: &#123;</span><br><span class="line">  &quot;network&quot;:&quot;ws&quot;,</span><br><span class="line">  &quot;wsSettings&quot;: &#123;</span><br><span class="line">  &quot;path&quot;: &quot;&#x2F;ws&quot;, #path可自定义，这里是&#x2F;ws，须与Nginx和客户端的path相一致</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">  &quot;Host&quot;: &quot;&quot; #Host可自定于任意域名，此处没有添加</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;outbound&quot;: &#123;</span><br><span class="line">  &quot;protocol&quot;: &quot;freedom&quot;,</span><br><span class="line">  &quot;settings&quot;: &#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;outboundDetour&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;protocol&quot;: &quot;blackhole&quot;,</span><br><span class="line">    &quot;settings&quot;: &#123;&#125;,</span><br><span class="line">    &quot;tag&quot;: &quot;blocked&quot;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&quot;routing&quot;: &#123;</span><br><span class="line">  &quot;strategy&quot;: &quot;rules&quot;,</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;rules&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;type&quot;: &quot;field&quot;,</span><br><span class="line">        &quot;ip&quot;: [</span><br><span class="line">          &quot;0.0.0.0&#x2F;8&quot;,</span><br><span class="line">          &quot;10.0.0.0&#x2F;8&quot;,</span><br><span class="line">          &quot;100.64.0.0&#x2F;10&quot;,</span><br><span class="line">          &quot;127.0.0.0&#x2F;8&quot;,</span><br><span class="line">          &quot;169.254.0.0&#x2F;16&quot;,</span><br><span class="line">          &quot;172.16.0.0&#x2F;12&quot;,</span><br><span class="line">          &quot;192.0.0.0&#x2F;24&quot;,</span><br><span class="line">          &quot;192.0.2.0&#x2F;24&quot;,</span><br><span class="line">          &quot;192.168.0.0&#x2F;16&quot;,</span><br><span class="line">          &quot;198.18.0.0&#x2F;15&quot;,</span><br><span class="line">          &quot;198.51.100.0&#x2F;24&quot;,</span><br><span class="line">          &quot;203.0.113.0&#x2F;24&quot;,</span><br><span class="line">          &quot;::1&#x2F;128&quot;,</span><br><span class="line">          &quot;fc00::&#x2F;7&quot;,</span><br><span class="line">          &quot;fe80::&#x2F;10&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;outboundTag&quot;: &quot;blocked&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="宝塔搭建web页面"><a href="#宝塔搭建web页面" class="headerlink" title="宝塔搭建web页面"></a>宝塔搭建web页面</h1><p>新建一个网站，配置ssl，利用宝塔Let’s Encrypt免费的ssl。<br>然后选择配置文件，在最后一个<code>&#125;</code>前一行复制如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;ws &#123;</span><br><span class="line"> proxy_redirect off;</span><br><span class="line"> proxy_pass http:&#x2F;&#x2F;127.0.0.1:233;</span><br><span class="line"> proxy_http_version 1.1;</span><br><span class="line"> proxy_set_header Upgrade $http_upgrade;</span><br><span class="line"> proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line"> proxy_set_header Host $http_host;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后重启v2ray和nginx</p><h1 id="cf自选节点"><a href="#cf自选节点" class="headerlink" title="cf自选节点"></a>cf自选节点</h1><a href="/posts/f019efb0/" title="cloudflare自选节点">cloudflare自选节点</a> ]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔搭建cloudreve并配置aria2离线下载</title>
      <link href="posts/eeb69578/"/>
      <url>posts/eeb69578/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="Cloudreve是什么"><a href="#Cloudreve是什么" class="headerlink" title="Cloudreve是什么"></a>Cloudreve是什么</h2><p>Cloudreve 是个公有网盘程序，你可以用它快速搭建起自己的网盘服务，公有云/私有云都可。Cloudreve 底层支持 本机存储、从机存储、阿里云OSS、又拍云、腾讯云COS、七牛云存储、OneDrive（国际版/世纪互联版），每种存储方式的上传下载都是客户端直传。你可以为不同用户组绑定不同存储策略，捐助获得Pro版后，可以为一个用户组分配多个存储方式，用户可以在前台自由切换。</p><h2 id="特性列表"><a href="#特性列表" class="headerlink" title="特性列表"></a>特性列表</h2><ul><li>支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端</li><li>上传/下载 支持客户端直传，支持下载限速</li><li>可对接 Aria2 离线下载（支持所有存储策略，下载完成后自动中转）</li><li>在线 压缩/解压缩、多文件打包下载（支持所有存储策略）</li><li>覆盖全部存储策略的 WebDAV 协议支持</li><li>拖拽上传、目录上传、流式上传处理</li><li>文件拖拽管理</li><li>多用户、用户组</li><li>创建文件、目录的分享链接，可设定自动过期</li><li>视频、图像、音频、文本、Office 文档在线预览</li><li>自定义配色、黑暗模式、PWA 应用、全站单页应用</li><li>All-In-One 打包，开箱即用</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>去github上下载源码包：<a href="https://github.com/cloudreve/Cloudreve/releases">https://github.com/cloudreve/Cloudreve/releases</a></p><p>解压并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#解压获取到的主程序</span><br><span class="line">tar -zxvf cloudreve_VERSION_OS_ARCH.tar.gz</span><br><span class="line"></span><br><span class="line"># 赋予执行权限</span><br><span class="line">chmod +x .&#x2F;cloudreve</span><br><span class="line"></span><br><span class="line"># 启动 Cloudreve</span><br><span class="line">.&#x2F;cloudreve</span><br></pre></td></tr></table></figure><p>Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的cloudreve.db，重新启动主程序以初始化新的管理员账户。<br>Cloudreve 默认会监听5212端口。你可以在浏览器中访问<code>http://服务器IP:521</code>进入 Cloudreve。</p><h1 id="宝塔反向代理和进程守护"><a href="#宝塔反向代理和进程守护" class="headerlink" title="宝塔反向代理和进程守护"></a>宝塔反向代理和进程守护</h1><ul><li>安装Supervisor管理器，并添加守护进程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200323122803.png"></p><ul><li>添加反向代理</li></ul><p>首先创建一个新站点</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200323123001.png"></p><p>申请ssl，并创建反向代理。要先申请ssl，再创建反向代理。不然申请ssl会不成功</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200323123215.png"></p><h1 id="安装aria2"><a href="#安装aria2" class="headerlink" title="安装aria2"></a>安装aria2</h1><p>这里使用<a href="https://www.moerats.com/">萌鼠的脚本</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;Aria2&#x2F;aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><br></pre></td></tr></table></figure><p>安装完成后，如果我们想修改密码、下载文件位置、端口的话，可以使用命令bash aria2.sh，再选择修改配置即可，这里建议使用该脚本配置自动更新<code>BT-Tracker</code>服务器，对下载BT有加成。</p><p>在cloudreve配置aria2</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200323132623.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloudreve </tag>
            
            <tag> Aria2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debian安装docker</title>
      <link href="posts/36e1b6fa/"/>
      <url>posts/36e1b6fa/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方文档：<a href="https://docs.docker.com/install/linux/docker-ce/debian/">https://docs.docker.com/install/linux/docker-ce/debian/</a></p><h1 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h1><p>旧版本被称为docker，docker.io 或docker-engine。如果已安装，请卸载它们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><h1 id="设置存储库"><a href="#设置存储库" class="headerlink" title="设置存储库"></a>设置存储库</h1><ul><li>更新apt包索引：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><ul><li>安装包以允许apt通过HTTPS使用存储库：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg2 \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><ul><li>添加Docker的官方GPG密钥：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><ul><li>验证您现在拥有带指纹的密钥</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure><ul><li>添加源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add-apt-repository \</span><br><span class="line">   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;debian \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure><h1 id="安装DOCKER-CE"><a href="#安装DOCKER-CE" class="headerlink" title="安装DOCKER CE"></a>安装DOCKER CE</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><ul><li>启动docker(如果没有启动)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><ul><li>查看版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipv4的vps获取ipv6地址</title>
      <link href="posts/2242452b/"/>
      <url>posts/2242452b/</url>
      
        <content type="html"><![CDATA[<h1 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h1><p>首先前往下面这个网站注册一个账户：</p><p><a href="https://www.tunnelbroker.net/">https://www.tunnelbroker.net</a></p><p>注册账户的过程就不说了，注册完账户之后，点击左侧的 Create Regular Tunnel，如下所示。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319110333.png"></p><h1 id="修改vps端配置"><a href="#修改vps端配置" class="headerlink" title="修改vps端配置"></a>修改vps端配置</h1><p>选择你对应的操作系统，我的是debain，所以就将下面的内容写入<code>/etc/network/interfaces</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">auto he-ipv6</span><br><span class="line">iface he-ipv6 inet6 v4tunnel</span><br><span class="line">        address 2001:470:1f06:6f3::2</span><br><span class="line">        netmask 64</span><br><span class="line">        endpoint 209.51.161.14</span><br><span class="line">        local your_ip</span><br><span class="line">        ttl 255</span><br><span class="line">        gateway 2001:470:1f06:6f3::1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319110603.png"></p><p>重启就可以访问ipv6了，<code>ping6 www.google.com</code>来测试</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ipv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipv6的小鸡安装宝塔面板</title>
      <link href="posts/ea73cc4c/"/>
      <url>posts/ea73cc4c/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天在论坛看到德国的一家vps商家有免费的ipv6小鸡，就去白嫖了一个，就是这家<a href="https://www.euserv.com/en/">euserv</a></p><h1 id="修改dns"><a href="#修改dns" class="headerlink" title="修改dns"></a>修改dns</h1><p>首先给ipv6小鸡安装好系统，我选择的<code>debain9</code>,修改dns</p><p>修改<code>/etc/resolv.conf</code>的<code>nameserver</code>值即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 2001:67c:2b0::4</span><br><span class="line">nameserver 2001:67c:2b0::6</span><br></pre></td></tr></table></figure><blockquote><p>欧洲有一些公益组织提供免费的DNS64+NAT64服务，让ipv6 only 访问ipv4的网站比如下面这两个。</p></blockquote><blockquote><p><a href="http://www.trex.fi/2011/dns64.html">http://www.trex.fi/2011/dns64.html</a><br>2001:67c:2b0::4<br>2001:67c:2b0::6</p></blockquote><blockquote><p><a href="https://go6lab.si/current-ipv6-tests/nat64dns64-public-test/">https://go6lab.si/current-ipv6-tests/nat64dns64-public-test/</a><br>2001:67c:27e4:15::6411<br>2001:67c:27e4::64</p></blockquote><h1 id="安装bt"><a href="#安装bt" class="headerlink" title="安装bt"></a>安装bt</h1><ol><li>去<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">宝塔官网</a>找到对应版本的安装命令，我的时debain，命令如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install-ubuntu_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>安装lnmp环境，进入宝塔面板会弹出一键安装页面</li></ol><h1 id="bt套cf"><a href="#bt套cf" class="headerlink" title="bt套cf"></a>bt套cf</h1><h2 id="准备域名"><a href="#准备域名" class="headerlink" title="准备域名"></a>准备域名</h2><p>你需要一个域名，并添加AAAA记录到你的ipv6小鸡</p><h2 id="bt放行8080端口"><a href="#bt放行8080端口" class="headerlink" title="bt放行8080端口"></a>bt放行8080端口</h2><p>cloudflare支持一下端口，所以要更改bt面板的端口<br>By default, Cloudflare proxies traffic destined for the HTTP/HTTPS ports listed below<br>HTTP ports supported by Cloudflare:<br>80<br>8080<br>8880<br>2052<br>2082<br>2086<br>2095<br>HTTPS ports supported by Cloudflare:<br>443<br>2053<br>2083<br>2087<br>2096</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319081913.png"></p><h2 id="修改bt端口和域名绑定"><a href="#修改bt端口和域名绑定" class="headerlink" title="修改bt端口和域名绑定"></a>修改bt端口和域名绑定</h2><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319082401.png"></p><h2 id="新建一个站点"><a href="#新建一个站点" class="headerlink" title="新建一个站点"></a>新建一个站点</h2><p>宝塔面板中新建一个站点。也不要什么php版本了，选择纯静态就可以了。域名，就是你准备好的域名。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319082956.png"></p><h2 id="设置反代"><a href="#设置反代" class="headerlink" title="设置反代"></a>设置反代</h2><p>这一步很重要，在刚刚的新建的网站里面设置一个反代。</p><p>目标URL：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319083219.png"></p><h2 id="更改解析到cf"><a href="#更改解析到cf" class="headerlink" title="更改解析到cf"></a>更改解析到cf</h2><p>可以自选节点，或者使用默认分配的节点</p><a href="/posts/f019efb0/" title="cloudflare自选节点">cloudflare自选节点</a> <h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样套了cf之后，就不需要考虑本地是否有ipv6了，因为是访问的cf的节点</p><p>2020-03-22更新：</p><div class="note info flat"><p>宝塔面板有个插件是<code>堡塔面板静态文件加速 1.0</code>，可以实现宝塔的静态文件加速，可以加快访问速度</p></div>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ipv6 </tag>
            
            <tag> 宝塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps测速及科学上网常用脚本</title>
      <link href="posts/9585444e/"/>
      <url>posts/9585444e/</url>
      
        <content type="html"><![CDATA[<h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><h2 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h2><p>逗比ssr脚本，会自动开启锐速，可配置锐速和bbr</p><h3 id="单用户脚本"><a href="#单用户脚本" class="headerlink" title="单用户脚本"></a>单用户脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/liuyaanng/SSR/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; ./ssr.sh</span><br></pre></td></tr></table></figure><h3 id="多用户管理脚本"><a href="#多用户管理脚本" class="headerlink" title="多用户管理脚本"></a>多用户管理脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></table></figure><blockquote><p>逗比的ssr脚本，安装chaccha20的那个选项是坏的，安装上chacha20，而且安装时间非常繁琐，大家可以去百度去搜索对应你系统的chacha20的安装方式。</p></blockquote><blockquote><p>介绍个黑科技 混淆选择 tls1.2_ticket_auth ，同时混淆参数使用 officecdn.microsoft.com</p></blockquote><h2 id="v2ray"><a href="#v2ray" class="headerlink" title="v2ray"></a>v2ray</h2><p>2333的v2ray脚本，会自动开启bbr，可配置bbr和锐速</p><h3 id="ipv4脚本"><a href="#ipv4脚本" class="headerlink" title="ipv4脚本"></a>ipv4脚本</h3><p>一般有ipv4的选这个就可以了，只有ipv6的vps选下面的ipv6版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apt-get update -y &amp;&amp; apt-get install curl -y</span><br><span class="line"></span><br><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>他脚本的ws+tls大部分人不能用，是脚本的问题。(我自己能用)</p></blockquote><p>推荐另一个脚本 （只有ws+tls+web的功能）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh) | tee v2ray_ins.log</span><br></pre></td></tr></table></figure><blockquote><p>不推荐使用那些带web的v2脚本，执行效率差，占用内存高，还会和宝塔等操作界面冲突，导致宝塔等打不开。</p></blockquote><h3 id="ipv6版本"><a href="#ipv6版本" class="headerlink" title="ipv6版本"></a>ipv6版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">设置时间</span><br><span class="line">cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</span><br><span class="line"></span><br><span class="line">查看是否正确</span><br><span class="line">date -R</span><br><span class="line"></span><br><span class="line">安装v2ray_ipv6</span><br><span class="line">apt-get update &amp;&amp; apt-get install curl -y</span><br><span class="line">bash &lt;(curl -sL https:&#x2F;&#x2F;scaleya.netlify.com&#x2F;share&#x2F;v2ray233_6.sh)</span><br></pre></td></tr></table></figure><blockquote><p>欧洲有一些公益组织提供免费的DNS64+NAT64服务，让ipv6 only 访问ipv4的网站比如下面这两个。</p></blockquote><blockquote><p><a href="http://www.trex.fi/2011/dns64.html">http://www.trex.fi/2011/dns64.html</a><br>2001:67c:2b0::4<br>2001:67c:2b0::6</p></blockquote><blockquote><p><a href="https://go6lab.si/current-ipv6-tests/nat64dns64-public-test/">https://go6lab.si/current-ipv6-tests/nat64dns64-public-test/</a><br>2001:67c:27e4:15::6411<br>2001:67c:27e4::64<br>一般修改/etc/resolv.conf的nameserver值即可</p></blockquote><h2 id="BBr-锐速四合一脚本"><a href="#BBr-锐速四合一脚本" class="headerlink" title="BBr/锐速四合一脚本"></a>BBr/锐速四合一脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">&quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><blockquote><p>这个四合一脚本中锐速不能使用，教大家一个使用锐速的办法，先用四合一的脚本安装上锐速内核，然后用萌咖大佬的启动方式<a href="https://moeclub.org/2017/03/09/14/?spm=33.3">https://moeclub.org/2017/03/09/14/?spm=33.3</a> 去启动锐速</p></blockquote><h2 id="bbr-锐速四合一脚本升级版"><a href="#bbr-锐速四合一脚本升级版" class="headerlink" title="bbr/锐速四合一脚本升级版"></a>bbr/锐速四合一脚本升级版</h2><p>此脚本可以一键快速安装BBR原版内核（5.4.13/5.4.14/5.5.0）、BBRplus版内核（4.14.168）、多种Lotserver(锐速)内核、xanmod版内核（5.5.1）、BBR2测试版内核（5.4.0）、Zen版内核（5.5.2）。加速方案也有多种选择：BBR+FQ加速、BBR+CAKE加速 、BBRplus+FQ版加速、Lotserver(锐速)加速、BBR2+FQ加速、BBR2+CAKE加速、BBR2+FQ+ECN加速、BBR2+CAKE+ECN加速，加速模式挺全面的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">&quot;https://github.000060000.xyz/tcpx.sh&quot;</span> &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure><p>卸载内核版本，同原作者版本，删除安装内核以外的所有内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">&quot;https://github.000060000.xyz/tcp.sh&quot;</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>支持版本:</p><p>for bbr/bbrplus</p><p>centos6,7,8<br>debian8.9.10<br>ubuntu16,18,19</p><p>锐速内核稍微更新</p><p>xanmod/Zen/BBR2 只添加了centos7,8 debian9,10</p><p>提示Abort kernel removal? 选择No</p><p>5.5内核及BBR2内核支持cake队列</p><p>双持bbr+锐速</p><p>bbr 添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>编辑锐速文件<br><code>nano /appex/etc/config</code></p><p>检测代码有BUG，如果锐速正常 运行查看<br><code>bash /appex/bin/lotServer.sh status | grep &quot;LotServer&quot;</code></p><p>检查bbr 内核默认bbr算法不会有输出<br><code>lsmod | grep bbr</code></p><p>检查centos安装内核<br><code>grubby --info=ALL|awk -F= &#39;$1==&quot;kernel&quot; &#123;print i++ &quot; : &quot; $2&#125;&#39;</code></p><p>查看当前支持TCP算法<br><code>cat /proc/sys/net/ipv4/tcp_allowed_congestion_control</code></p><p>查看当前运行的算法<br><code>cat /proc/sys/net/ipv4/tcp_congestion_control</code></p><p>查看当前队列算法<br><code>sysctl net.core.default_qdisc</code></p><p>命令： <code>uname -a</code><br>作用： 查看系统内核版本号及系统名称</p><p>命令： <code>cat /proc/version</code><br>作用： 查看目录”/proc”下version的信息，也可以得到当前系统的内核版本号及系统名称</p><p>真实队列查看？ 更改队列算法可能需要重启生效<br><code>tc -s qdisc show</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>bbrplus是适用性最广的，效果兼容性又好的加速方式，如果你不知道用啥加速，就选它。只是有的机器上会有断流的问题。</p></blockquote><blockquote><p>锐速是加速效果最好的，缺点就是内核太老，而且占用内存高，并且在线路不是很好的机器上用锐速好，线路好的话用BBR比锐速合适。</p></blockquote><blockquote><p>最稳妥的方式就是v2 ws+tls+web这类方式，是这类。目前我觉得套cf完全没必要，等到ip被墙了再套也不迟，这里有一种情况是推荐套cf的，就是你vps的线路并不好，你用起来没速度，而你的网络又和cf的兼容性比较好，这样可以套cf，这里就相当于你用的事cf啦哈哈哈，当然晚上该炸还是炸，这就是我为啥不推荐套cf的原因，晚上太差啦。</p></blockquote><blockquote><p>v2对cpu负载要求比较高，ssr不在高墙发威期间也是够用的，并且推荐使用chacha20和tls1.2_ticket_auth，谁用都说好。</p></blockquote><h1 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h1><h2 id="Bench-sh"><a href="#Bench-sh" class="headerlink" title="Bench.sh"></a>Bench.sh</h2><p>秋水逸冰大佬的写的Bench.sh脚本</p><blockquote><p>特点<br>显示当前测试的各种系统信息；<br>取自世界多处的知名数据中心的测试点，下载测试比较全面；<br>支持 IPv6 下载测速；<br>IO 测试三次，并显示平均值。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">curl -Lso- bench.sh | bash</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">wget -qO- 86.re/bench.sh | bash</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">curl -so- 86.re/bench.sh | bash</span><br></pre></td></tr></table></figure><h2 id="SuperBench-sh"><a href="#SuperBench-sh" class="headerlink" title="SuperBench.sh"></a>SuperBench.sh</h2><p>老鬼大佬的SuperBench测试脚本</p><blockquote><p>特点<br>改进了显示的模式，基本参数添加了颜色，方面区分与查找。<br>I/O测试，更改了原来默认的测试的内容，采用小文件，中等文件，大文件，分别测试IO性能，然后取平均值。<br>速度测试替换成了 Superspeed 里面的测试，第一个默认节点是，Speedtest 默认，其他分别测试到中国电信，联通，移动，各三个不同地区的速度。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bash</span><br></pre></td></tr></table></figure><h2 id="Zbench-sh"><a href="#Zbench-sh" class="headerlink" title="Zbench.sh"></a>Zbench.sh</h2><p>漏水和kirito大佬的测试脚本</p><blockquote><p>特点<br>基于SuperBench二次修改<br>增加Ping以及路由测试功能<br>可以生成测评报告，可以很方便地分享给其他朋友看自己的测评数据。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/ZBench/master/ZBench-CN.sh &amp;&amp; bash ZBench-CN.sh</span><br></pre></td></tr></table></figure><h2 id="LemonBench-sh"><a href="#LemonBench-sh" class="headerlink" title="LemonBench.sh"></a>LemonBench.sh</h2><p>LemonBench工具(别名LBench、柠檬Bench)，是一款针对Linux服务器设计的服务器性能测试工具。通过综合测试，可以快速评估服务器的综合性能，为使用者提供服务器硬件配置信息。</p><blockquote><p>特点<br>服务器基础信息(CPU信息/内存信息/Swap信息/磁盘空间信息等)<br>Speedtest网速测试 (本地到最近源及国内各地域不同线路的网速)<br>磁盘测试(4K块/1M块 直接写入测试)<br>路由追踪测试(追踪到国内和海外不同线路的路由信息)<br>Spoofer测试(获取详细网络信息，快速判断服务器接入线路)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast</span><br></pre></td></tr></table></figure><h2 id="SuperSpeed"><a href="#SuperSpeed" class="headerlink" title="SuperSpeed"></a>SuperSpeed</h2><p>测试三网速度，节点多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Lso- https:&#x2F;&#x2F;git.io&#x2F;superspeed)</span><br></pre></td></tr></table></figure><h1 id="Swap交换分区脚本"><a href="#Swap交换分区脚本" class="headerlink" title="Swap交换分区脚本"></a>Swap交换分区脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.moerats.com&#x2F;usr&#x2F;shell&#x2F;swap.sh &amp;&amp; bash swap.sh</span><br></pre></td></tr></table></figure><h1 id="PT工具安装脚本"><a href="#PT工具安装脚本" class="headerlink" title="PT工具安装脚本"></a>PT工具安装脚本</h1><blockquote><p>这个<code>Github</code>项目包含了几乎所有的PT工具脚本，其中<code>qBittorrent</code>可以使用<code>deb包</code>安装最新版,或静态编译好的来进行安装。脚本目前支持 <code>Debian 9/10</code>, <code>Ubuntu 16.04/18.04</code>. 推荐使用 <code>Debian 10</code> 或 <code>Ubuntu 18.04</code>。</p></blockquote><p><a href="https://github.com/Aniverse/inexistence">https://github.com/Aniverse/inexistence</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- https:&#x2F;&#x2F;github.com&#x2F;Aniverse&#x2F;inexistence&#x2F;raw&#x2F;master&#x2F;inexistence.sh)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装HTML5_Speedtest测试服务器到本地速度和延迟</title>
      <link href="posts/afe4c68d/"/>
      <url>posts/afe4c68d/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>HTML5 Speedtest相对于测试文件，能测的东西更多，而且不用担心多线程下载的问题，服务器测试或者买卖二手服务器是很实用的工具。</p><h1 id="宝塔面板搭建-HTML5-Speedtest"><a href="#宝塔面板搭建-HTML5-Speedtest" class="headerlink" title="宝塔面板搭建 HTML5 Speedtest"></a>宝塔面板搭建 HTML5 Speedtest</h1><p>作者源码：<a href="https://codeload.github.com/librespeed/speedtest/zip/master">https://codeload.github.com/librespeed/speedtest/zip/master</a></p><p>宝塔面板 – 网站 – 新建站点</p><p>可以使用域名也可以使用IP，如果使用IP，最好指定端口，然后在面板中放行端口即可；</p><p>注意：PHP版本至少要是7.0以上</p><p>将下载的源码压缩包上传解压至网站根目录或者直接在宝塔远程下载文件</p><p>这里需要修改下源码文件，找到 example-singleServer-pretty.html 文件</p><p>然后将文件重命名为 index.html</p><p>搭建完成，现在可以打开域名或IP即可；</p><p>截图：</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200318175450.png"></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>如果打不开，需要宝塔面板或VPS控制后台放行6688端口</p><p>搭建完成，打开 http://你VPS的IP:6688 即可</p><p>如果CentOS 7打不开，需要打开防火墙端口，或者关掉防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#打开6688端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6688&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line">#关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h1 id="go版本的speedtest"><a href="#go版本的speedtest" class="headerlink" title="go版本的speedtest"></a>go版本的speedtest</h1><p>html搭建起来很繁琐，今天推荐个一键的脚本。</p><p>GITHUB作者原项目：<a href="https://github.com/BigMangos/speedtest-go-script">https://github.com/BigMangos/speedtest-go-script</a></p><blockquote><p>支持的操作系统：CentOS 7-8、Debian 8-10、Ubuntu 16-18<br>操作系统要求64位</p></blockquote><p>一键安装脚本（使用root用户）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Lsk https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;BigMangos&#x2F;speedtest-go-script&#x2F;master&#x2F;install.sh)</span><br></pre></td></tr></table></figure><p>如果出现<code>-bash: curl: command not found</code>错误，说明<code>curl</code>命令没安装，请输入下面的命令先安装curl，再回过头来执行上面的命令再来一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Debian or Ubuntu</span><br><span class="line">apt-get -y install curl</span><br><span class="line">#CentOS</span><br><span class="line">yum -y install curl</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpeedTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServerStatus-Hotaru云探针的安装与配置</title>
      <link href="posts/c51b991a/"/>
      <url>posts/c51b991a/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>脚本来自：<a href="https://www.aptx.xin/serverstatus-hotaru.html">https://www.aptx.xin/serverstatus-hotaru.html</a></p><p>Github：<a href="https://github.com/CokeMine/ServerStatus-Hotaru">https://github.com/CokeMine/ServerStatus-Hotaru</a></p><h1 id="服务端安装"><a href="#服务端安装" class="headerlink" title="服务端安装"></a>服务端安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;CokeMine&#x2F;ServerStatus-Hotaru&#x2F;master&#x2F;status.sh</span><br><span class="line">bash status.sh </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、选择1，配置服务端</span><br><span class="line"></span><br><span class="line">2、没什么需求的话，端口建议默认就好</span><br><span class="line"></span><br><span class="line">3、如果本地没装别的如Nginx或者Apache之类的，直接Y就好，如果希望在bt管理，选择n，并记录网站的目录位置</span><br><span class="line"></span><br><span class="line">4、绑定域名或IP访问</span><br><span class="line"></span><br><span class="line">5、端口自主选择</span><br><span class="line"></span><br><span class="line">6、添加客户端：选择7后选1</span><br><span class="line"></span><br><span class="line">剩下的信息自己填就好了</span><br><span class="line"></span><br><span class="line">7、删除（修改）服务端：选7后在选择</span><br></pre></td></tr></table></figure><h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash status.sh c</span><br></pre></td></tr></table></figure><p>后选1然后按照服务端填写的即可</p><blockquote><p>主要思路就是安装客户端和服务端</p></blockquote><h1 id="宝塔管理"><a href="#宝塔管理" class="headerlink" title="宝塔管理"></a>宝塔管理</h1><p>其实我们可以选择宝塔来管理这个页面，安装服务端时会让你选择是否自动部署，选择否，并记录网站目录。记得在宝塔放行当时选择的端口，默认是35601</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319090236.png"></p><h1 id="ipv6客户端"><a href="#ipv6客户端" class="headerlink" title="ipv6客户端"></a>ipv6客户端</h1><blockquote><p>当服务端是<code>ipv6 only</code>时,其他服务器安装客户端的操作</p></blockquote><p>安装好客户端后还需要：</p><p>替换文件status-client.py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -f &#x2F;usr&#x2F;local&#x2F;ServerStatus&#x2F;client&#x2F;status-client.py</span><br><span class="line"></span><br><span class="line">wget -O &#x2F;usr&#x2F;local&#x2F;ServerStatus&#x2F;client&#x2F;status-client.py https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;CokeMine&#x2F;ServerStatus-Hotaru&#x2F;master&#x2F;clients&#x2F;status-client_ipv6.py</span><br><span class="line"></span><br><span class="line">bash status.sh c #修改配置</span><br></pre></td></tr></table></figure><h1 id="相关开源项目"><a href="#相关开源项目" class="headerlink" title="相关开源项目"></a>相关开源项目</h1><ul><li>ServerStatus-Toyo：<a href="https://github.com/ToyoDAdoubiBackup/ServerStatus-Toyo">https://github.com/ToyoDAdoubiBackup/ServerStatus-Toyo</a></li><li>ServerStatus：<a href="https://github.com/BotoX/ServerStatus">https://github.com/BotoX/ServerStatus</a></li><li>mojeda: <a href="https://github.com/mojeda">https://github.com/mojeda</a></li><li>mojeda’s ServerStatus: <a href="https://github.com/mojeda/ServerStatus">https://github.com/mojeda/ServerStatus</a></li><li>BlueVM’s project: <a href="http://www.lowendtalk.com/discussion/comment/169690#Comment_169690">http://www.lowendtalk.com/discussion/comment/169690#Comment_169690</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ServerStatus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TestRace-VPS回程路由一键测试脚本</title>
      <link href="posts/bcc8a0c7/"/>
      <url>posts/bcc8a0c7/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这是一个用于在Linux上测试回程路由的脚本，这里的回程路由是指从你的机器出发到指定节点的路由。</p><p>Github地址：<a href="https://github.com/nanqinlang-script/testrace">https://github.com/nanqinlang-script/testrace</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>运行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;nanqinlang-script&#x2F;testrace&#x2F;master&#x2F;testrace.sh</span><br><span class="line">bash testrace.sh</span><br></pre></td></tr></table></figure><p>在运行脚本后，会出现三个选项供以选择：</p><pre><code>- 选择一个节点进行测试- 四网路由快速测试- 手动输入ip进行测试</code></pre><p>选项说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1、选择一个节点进行测试</span><br><span class="line">本脚本以内置移动&#x2F;联通&#x2F;电信&#x2F;教育网四网的多个节点。</span><br><span class="line">选择1回车后，会列出这些节点的列表。</span><br><span class="line">选择其中一个测试完成后，可以继续选择节点测试。</span><br><span class="line"></span><br><span class="line">2、四网路由快速测试</span><br><span class="line">此模式会对以下几个节点进行回程路由测试。</span><br><span class="line">此模式测试的节点包括：</span><br><span class="line">电信</span><br><span class="line">上海电信(天翼云)</span><br><span class="line">厦门电信CN2</span><br><span class="line">联通</span><br><span class="line">浙江杭州联通</span><br><span class="line">移动</span><br><span class="line">浙江杭州移动</span><br><span class="line">教育网</span><br><span class="line">北京教育网</span><br><span class="line"></span><br><span class="line">3、手动输入ip进行测试</span><br><span class="line">此模式是由用户 手动输入要测试的目标ip</span><br><span class="line">每次测试完成后，可选择继续测试其它ip</span><br></pre></td></tr></table></figure><h1 id="相关目录"><a href="#相关目录" class="headerlink" title="相关目录"></a>相关目录</h1><p>脚本的安装目录位于<code>/home/testrace</code><br>测试完成并退出脚本后，会生成测试的记录文件于<code>/home/testrace/testrace.log</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TestRace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用heroku搭建免费的onemanager</title>
      <link href="posts/7386aa8e/"/>
      <url>posts/7386aa8e/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在上一篇文章中，我搭建了一个<code>rclone</code> 实现onedrive在windows中上传下载文件，按理说是可以触发office的api的，在网上爬文，发现了<code>onemanager</code>。<br>onemanager是一款强大的OneDrive目录列表程序，支持的功能比OneIndex更多。支持无服务器一键搭建，支持腾讯SCF服务搭建，基本上能用的搭建方式都支持，而且支持OneDrive商业版、OneDrive个人版和世纪互联版。支持多盘绑定，支持访客上传文件，图床模式，可以让访客上传文件做为图床使用，非常的方便。</p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>GitHub开源网址：<a href="https://github.com/qkqpttgf/OneManager-php">https://github.com/qkqpttgf/OneManager-php</a></p><p>进入到github中，可以看到这个醒目的button，这篇文章正是利用heroku搭建免费的onemanager，不需要其他的服务器和主机。<br>点击那个按钮，进入注册（需要富强，注册引入了google人机验证），qq邮箱已被屏蔽，推荐使用gmail</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306104640.png"></p><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><ul><li>在“App name”填写您的应用名称，“Choose a region”选择一个服务区域选择“United States”。 注意：“App name”填写的应用名称就是您次域名.herokuapp.com的前缀，名称必须以小写字母开头</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102109.png"></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102147.png"></p><ul><li><p>点击“Deploy app”部署应用稍等片刻即可完成初始化。再点击“Manager APP”管理应用程序</p></li><li><p>点击“Setting”设置应用，直接往下拉在“Domains”处可以看到您的次域名（如果您已经填加了信用卡账户已验证，可以绑定自己的域名）点击您的次域名。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102226.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102251.png"></p><ul><li>单击此处“Click to install the project”安装OneManager-PHP项目</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102314.png"></p><ul><li>点击“新建API Key”获得API，在“API Key”处点击后面的“Reveal”显示您的API Key，复制API Key粘贴至API Key。“Set admin password”设置管理员密码，点击“确认”。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102617.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102421.png"></p><ul><li>安装完成后登陆➠管理➠设置，添加OneDrive盘。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102705.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102705.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102808.png"></p><ul><li>选择“MSC:国际版，自己申请应用ID与机密”，点击“申请应用ID与机密”。申请教育版的OneDrive账户即可申请获取ID和钥密，目前普通帐号也已经可以申请获取应用ID和钥密。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102854.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306102940.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306103008.png"></p><ul><li>将获取的应用机密和应用ID分别填入client_secret和client_id，点击“确认”。之后就会跳转到下买你的界面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306103100.png"></p><h1 id="反向代理-自选cloudflare节点"><a href="#反向代理-自选cloudflare节点" class="headerlink" title="反向代理,自选cloudflare节点"></a>反向代理,自选cloudflare节点</h1><p>由于heroku不绑定信用卡，就不能自定义域名。我觉得在heroku上绑卡没必要。所以我利用了cloudflare的workers功能实现了自定义域名。</p><p>首先你需要把域名添加进cloudflare，有两种方式，一种是通过dns接入，这种方式完全把域名交给cloudflare了。另一方式是通过cloudflare Partners的方式，这种方式可以不用dns接入。我是用的是<a href="https://cdn.moeelf.com/">萌精灵</a>，详细的cf自选节点方法参见：<a href="/posts/f019efb0/" title="cloudflare自选节点">cloudflare自选节点</a> </p><ul><li><p>进入萌精灵，登录你的cloudflare账号，添加域名。</p></li><li><p>添加好域名后就需要进入<a href="https://www.cloudflare.com/">cloudflare</a>,进入你刚才添加的域名中，找到<code>workers</code>-&gt;<code>manager workers</code>，第一次要叫你设置一个域名<code>你需要设置的前缀（默认为你邮箱前缀）.workers.dev</code></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306134315.png"></p></li><li><p>点<code>create a worker</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306134429.png"></p><ul><li>将下面的代码加入左边方框中，注意修改为自己的app名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(</span><br><span class="line">  &quot;fetch&quot;,event &#x3D;&gt; &#123;</span><br><span class="line">     let url&#x3D;new URL(event.request.url);</span><br><span class="line">     url.hostname&#x3D;&quot;应用名称.herokuapp.com&quot;;</span><br><span class="line">     let request&#x3D;new Request(url,event.request);</span><br><span class="line">     event. respondWith(</span><br><span class="line">       fetch(request)</span><br><span class="line">     )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306134915.png"></p><ul><li>完成后返回这里，点击添加<code>route</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306134315.png"></p><ul><li>添加一个<code>route</code>,格式为<code>前缀.你的域名/*</code>，比如<code>pan.gyh.im/*</code>,worker选择你刚才创建的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306135459.png"></p><ul><li><p>回到萌精灵中添加一个cname记录，将你添加的route域名，解析到分配的workers域名中。</p></li><li><p>然后在你的域名dns提供商哪里，添加下面的解析记录</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200306140521.png"></p><ul><li>最后你可以指定clodflare的访问节点，不需要用cloudflare分配的节点了，分配的节点一般较慢。只需再添加一个A记录，比如我这里是添加的<code>pan.gyh.im</code> A记录到<code>1.0.0.1</code></li><li>具体可以指定到哪些节点可参考<a href="https://ofvps.com/201907510">这里</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">适合电信的节点</span><br><span class="line">104.23.240.*</span><br><span class="line">走欧洲各国出口 英国德国荷兰等 延迟比美国高一些 适合源站在欧洲的网站</span><br><span class="line">172.64.32.*</span><br><span class="line">虽然去程走新加坡，但是回程线路的绕路的，实际效果不好，不推荐</span><br><span class="line">104.16.160.*</span><br><span class="line">圣何塞的线路，比洛杉矶要快一点，推荐</span><br><span class="line">108.162.236.*</span><br><span class="line">亚特兰大线路，延迟稳定，但是延迟较高</span><br><span class="line"></span><br><span class="line">适合移动的节点</span><br><span class="line">162.158.133.* 走的丹麦，这一段ip只有部分能用，可以自己试一下。绕美国。</span><br><span class="line">198.41.214.*</span><br><span class="line">198.41.212.*</span><br><span class="line">198.41.208.*</span><br><span class="line">198.41.209.*</span><br><span class="line">172.64.32.*</span><br><span class="line">141.101.115.*</span><br><span class="line">移动走香港的IP段有很多，以上并不是全部。CF移动走香港的分直连和走ntt的效果都挺不错的，不过部分地区晚上还是会丢包。</span><br><span class="line">172.64.0. 这是走圣何塞的，一般用香港的就行</span><br><span class="line">172.64.16.* 欧洲线路.绕</span><br><span class="line"></span><br><span class="line">1.0.0.1效果较好</span><br><span class="line">电信部分</span><br><span class="line">大多数省直接使用1.0.0.0即可，延迟低，丢包少，</span><br><span class="line">少部分还是需要换ip</span><br></pre></td></tr></table></figure><h1 id="https访问"><a href="#https访问" class="headerlink" title="https访问"></a>https访问</h1><p>添加如下页面规则</p><p><code>http://domain/*</code>也可换成<code>domain/*</code>,也就是可以不要下图中的<code>http</code></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200319095023.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/qkqpttgf/OneManager-php">onemanager文档</a></li><li><a href="https://ibcl.us/Heroku-V2Ray_20191014/">在 Heroku 搭建 V2Ray</a></li><li><a href="https://bili33.top/2019/10/25/CloudFlare-Workers-Section1/">Cloudflare Workers反代实战（上）</a></li><li><a href="https://bili33.top/2020/01/17/Cloudflare-Workers-Section2/">Cloudflare Workers反代实战（下）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OneDrive </tag>
            
            <tag> OneManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rclone挂载OneDrive方法-自建API</title>
      <link href="posts/c4f1574a/"/>
      <url>posts/c4f1574a/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇说到申请office 365 E5的方法。但是他需要调用微软的一些api才能续订。所以我们可以在azure创建应用，来调用他的api。</p><p>这里介绍一款<code>Rclone</code>的应用，它可以调用onedrive的接口。</p><h1 id="创建-OneDrive-API"><a href="#创建-OneDrive-API" class="headerlink" title="创建 OneDrive API"></a>创建 OneDrive API</h1><h2 id="获取-Client-ID"><a href="#获取-Client-ID" class="headerlink" title="获取 Client ID"></a>获取 Client ID</h2><p>进入<a href="https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade">Microsoft Azure</a> 应用注册页面。点击新注册。</p><p>名称随意，账户类型选择最后一个，重定向 URL 填写<code>http://localhost</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305130452.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305130528.png"></p><p>创建成功后你会看到 Client ID（客户端 ID），复制并保存好。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305130617.png"></p><h2 id="获取-Client-secret"><a href="#获取-Client-secret" class="headerlink" title="获取 Client secret"></a>获取 Client secret</h2><p>点击<code>证书和密码</code>，按照图中序号的顺序操作添加密码。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305130817.png"></p><p>然后你会看到 Client secret（客户端密码），复制并保存好。</p><h2 id="设置-API-权限"><a href="#设置-API-权限" class="headerlink" title="设置 API 权限"></a>设置 API 权限</h2><p>点击<code>API 权限</code>，按照图示进行操作，添加<code>Files.Read</code>、<code>Files.ReadWrite</code>、<code>Files.Read.All</code>、<code>Files.ReadWrite.All</code>、<code>offline_access</code>、<code>User.Read</code>这些权限。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305131305.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305131334.png"></p><h1 id="获取-token"><a href="#获取-token" class="headerlink" title="获取 token"></a>获取 token</h1><p>在本地电脑上下载 <a href="https://rclone.org/downloads/">rclone</a>。<br>以 Windows 为例子，解压并进入<code>rclone.exe</code>所在文件夹，在资源管理器地址栏输入cmd，回车就会在当前路径打开命令提示符。<br>替换以下命令中的<code>Client_ID</code>、<code>Client_secret</code>并执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone authorize &quot;onedrive&quot; &quot;Client_ID&quot; &quot;Client_secret&quot;</span><br></pre></td></tr></table></figure><p>接下来会弹出浏览器，要求你登录账号进行授权。授权完后命令提示符窗口会出现以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">If your browser doesn&#39;t open automatically go to the following link: http:&#x2F;&#x2F;127.0.0.1:53682&#x2F;auth</span><br><span class="line">Log in and authorize rclone for access</span><br><span class="line">Waiting for code...</span><br><span class="line">Got code</span><br><span class="line">Paste the following into your remote machine ---&gt;</span><br><span class="line">&#123;&quot;access_token&quot;:&quot;xxxxxxxxxxxxxxxxxx&quot;,&quot;expiry&quot;:&quot;2020-02-22T21:18:39.5036298+08:00&quot;&#125;</span><br><span class="line">&lt;---End paste</span><br></pre></td></tr></table></figure><p><code>&#123;&quot;access_token&quot;:&quot;xxxxxxxxxxxxxxxxxx&quot;,&quot;expiry&quot;:&quot;2020-02-22T21:18:39.5036298+08:00&quot;&#125;</code>整个内容（包含括号）就是 to­ken ，复制并保存好。</p><h1 id="Rclone-连接-OneDrive"><a href="#Rclone-连接-OneDrive" class="headerlink" title="Rclone 连接 OneDrive"></a>Rclone 连接 OneDrive</h1><p>输入 <code>rclone config</code> 命令，会出现以下信息，参照下面的注释进行操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">$ rclone config</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; n # 输入 n，新建</span><br><span class="line">name&gt; od-e5-api # 输入网盘名称，类似于标签，用于区分不同的网盘。</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> 1 &#x2F; 1Fichier</span><br><span class="line">   \ &quot;fichier&quot;</span><br><span class="line"> 2 &#x2F; Alias for an existing remote</span><br><span class="line">   \ &quot;alias&quot;</span><br><span class="line"> 3 &#x2F; Amazon Drive</span><br><span class="line">   \ &quot;amazon cloud drive&quot;</span><br><span class="line"> 4 &#x2F; Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc)</span><br><span class="line">   \ &quot;s3&quot;</span><br><span class="line"> 5 &#x2F; Backblaze B2</span><br><span class="line">   \ &quot;b2&quot;</span><br><span class="line"> 6 &#x2F; Box</span><br><span class="line">   \ &quot;box&quot;</span><br><span class="line"> 7 &#x2F; Cache a remote</span><br><span class="line">   \ &quot;cache&quot;</span><br><span class="line"> 8 &#x2F; Citrix Sharefile</span><br><span class="line">   \ &quot;sharefile&quot;</span><br><span class="line"> 9 &#x2F; Dropbox</span><br><span class="line">   \ &quot;dropbox&quot;</span><br><span class="line">10 &#x2F; Encrypt&#x2F;Decrypt a remote</span><br><span class="line">   \ &quot;crypt&quot;</span><br><span class="line">11 &#x2F; FTP Connection</span><br><span class="line">   \ &quot;ftp&quot;</span><br><span class="line">12 &#x2F; Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ &quot;google cloud storage&quot;</span><br><span class="line">13 &#x2F; Google Drive</span><br><span class="line">   \ &quot;drive&quot;</span><br><span class="line">14 &#x2F; Google Photos</span><br><span class="line">   \ &quot;google photos&quot;</span><br><span class="line">15 &#x2F; Hubic</span><br><span class="line">   \ &quot;hubic&quot;</span><br><span class="line">16 &#x2F; JottaCloud</span><br><span class="line">   \ &quot;jottacloud&quot;</span><br><span class="line">17 &#x2F; Koofr</span><br><span class="line">   \ &quot;koofr&quot;</span><br><span class="line">18 &#x2F; Local Disk</span><br><span class="line">   \ &quot;local&quot;</span><br><span class="line">19 &#x2F; Mail.ru Cloud</span><br><span class="line">   \ &quot;mailru&quot;</span><br><span class="line">20 &#x2F; Mega</span><br><span class="line">   \ &quot;mega&quot;</span><br><span class="line">21 &#x2F; Microsoft Azure Blob Storage</span><br><span class="line">   \ &quot;azureblob&quot;</span><br><span class="line">22 &#x2F; Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">23 &#x2F; OpenDrive</span><br><span class="line">   \ &quot;opendrive&quot;</span><br><span class="line">24 &#x2F; Openstack Swift (Rackspace Cloud Files, Memset Memstore, OVH)</span><br><span class="line">   \ &quot;swift&quot;</span><br><span class="line">25 &#x2F; Pcloud</span><br><span class="line">   \ &quot;pcloud&quot;</span><br><span class="line">26 &#x2F; Put.io</span><br><span class="line">   \ &quot;putio&quot;</span><br><span class="line">27 &#x2F; QingCloud Object Storage</span><br><span class="line">   \ &quot;qingstor&quot;</span><br><span class="line">28 &#x2F; SSH&#x2F;SFTP Connection</span><br><span class="line">   \ &quot;sftp&quot;</span><br><span class="line">29 &#x2F; Transparently chunk&#x2F;split large files</span><br><span class="line">   \ &quot;chunker&quot;</span><br><span class="line">30 &#x2F; Union merges the contents of several remotes</span><br><span class="line">   \ &quot;union&quot;</span><br><span class="line">31 &#x2F; Webdav</span><br><span class="line">   \ &quot;webdav&quot;</span><br><span class="line">32 &#x2F; Yandex Disk</span><br><span class="line">   \ &quot;yandex&quot;</span><br><span class="line">33 &#x2F; http Connection</span><br><span class="line">   \ &quot;http&quot;</span><br><span class="line">34 &#x2F; premiumize.me</span><br><span class="line">   \ &quot;premiumizeme&quot;</span><br><span class="line">Storage&gt; 22 # 选择 Microsoft OneDrive ，截止2020年2月23日序号为 22</span><br><span class="line">** See help for onedrive backend at: https:&#x2F;&#x2F;rclone.org&#x2F;onedrive&#x2F; **</span><br><span class="line"></span><br><span class="line">Microsoft App Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_id&gt; # 输入 Client Id （客户端 ID）</span><br><span class="line">Microsoft App Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">client_secret&gt; # 输入 Client Secret （客户端密码）</span><br><span class="line">Edit advanced config? (y&#x2F;n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n # 输入 n</span><br><span class="line">Remote config</span><br><span class="line">Make sure your Redirect URL is set to &quot;http:&#x2F;&#x2F;localhost:53682&#x2F;&quot; in your custom config.</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; n # 输入 n</span><br><span class="line">For this to work, you will need rclone available on a machine that has a web browser available.</span><br><span class="line">Execute the following on your machine (same rclone version recommended) :</span><br><span class="line">    rclone authorize &quot;onedrive&quot; &quot;client_id&quot; &quot;client_secret&quot;</span><br><span class="line">Then paste the result below:</span><br><span class="line">result&gt; &#123;&quot;access_token&quot;:&quot;XXXXXXXXX&quot;,&quot;expiry&quot;:&quot;2020-02-22T21:18:39.5036298+08:00&quot;&#125;   # 输入 token</span><br><span class="line">Choose a number from below, or type in an existing value</span><br><span class="line"> 1 &#x2F; OneDrive Personal or Business</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line"> 2 &#x2F; Root Sharepoint site</span><br><span class="line">   \ &quot;sharepoint&quot;</span><br><span class="line"> 3 &#x2F; Type in driveID</span><br><span class="line">   \ &quot;driveid&quot;</span><br><span class="line"> 4 &#x2F; Type in SiteID</span><br><span class="line">   \ &quot;siteid&quot;</span><br><span class="line"> 5 &#x2F; Search a Sharepoint site</span><br><span class="line">   \ &quot;search&quot;</span><br><span class="line">Your choice&gt; 1 # # 这里问你要选择的类型，因为是使用 OneDrive ，所以输入 1</span><br><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0: OneDrive (business) id&#x3D;xxxxxxxxxxxxxx</span><br><span class="line">Chose drive to use:&gt; 0 # 检测到了网盘，这里编号是 0 ，所以输入 0</span><br><span class="line">Found drive &#39;root&#39; of type &#39;business&#39;, URL: https:&#x2F;&#x2F;p3terx-my.sharepoint.com&#x2F;personal&#x2F;xxxxxx&#x2F;Documents</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line">y&#x2F;n&gt; y # 问你是否确认，如果没问题则输入 y</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line">[od-e5-api]</span><br><span class="line">type &#x3D; onedrive</span><br><span class="line">client_id &#x3D; xxxxxxxxxx</span><br><span class="line">client_secret &#x3D; xxxxxxxxxxxxxxxx</span><br><span class="line">token &#x3D; &#123;&quot;access_token&quot;:&quot;xxxxxxxxxxxxxxxxxx&quot;,&quot;expiry&quot;:&quot;2020-02-22T21:18:39.5036298+08:00&quot;&#125;</span><br><span class="line">drive_id &#x3D; xxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">drive_type &#x3D; business</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line">y&#x2F;e&#x2F;d&gt; y # 最后会显示网盘的配置信息并询问你是否正确，如果没问题则输入 y</span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;                 &#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">od-e5-api            onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line">e&#x2F;n&#x2F;d&#x2F;r&#x2F;c&#x2F;s&#x2F;q&gt; q # 输入 q 退出</span><br></pre></td></tr></table></figure><p>最后验证一下是否能正常使用，替换以下命令中的 <code>od-e5-api</code> 并执行，注意最后有<code>:</code>(冒号)。网盘中出现 <code>test</code> 文件即表示成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch test &amp;&amp; rclone move test od-e5-api:</span><br></pre></td></tr></table></figure><h1 id="挂载为磁盘"><a href="#挂载为磁盘" class="headerlink" title="挂载为磁盘"></a>挂载为磁盘</h1><p>首先安装<code>fuse</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Debian&#x2F;Ubuntu系统</span><br><span class="line">apt-get install fuse -y</span><br><span class="line">#CentOS系统</span><br><span class="line">yum install fuse -y</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#新建本地文件夹，路径自己定，即下面的LocalFolder</span><br><span class="line">mkdir &#x2F;od</span><br><span class="line">#挂载为磁盘，下面的DriveName、Folder、LocalFolder参数根据说明自行替换</span><br><span class="line">rclone mount DriveName:Folder LocalFolder --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000</span><br></pre></td></tr></table></figure><p><code>DriveName</code>为初始化配置填的name，<code>Folder</code>为OneDrive里的文件夹，<code>LocalFolder</code>为VPS上的本地文件夹。</p><p>挂载成功后，输入<code>df -h</code>命令查看即可！</p><h1 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h1><p>先新建<code>systemd</code>配置文件，适用<code>CentOS 7</code>、<code>Debian 8+</code>、<code>Ubuntu 16+</code>。</p><p><code>DriveName</code>为<code>Rclone</code>的配置名称，比如你配置<code>rclone</code>的时候，<code>Name</code>填的<code>od</code><br><code>Folder</code>为网盘里的文件夹路径，如果你要挂载整个网盘，直接填<code>/</code>挂载整个根目录<br><code>LocalFolder</code>为本地服务器上的挂载文件夹，如果你需要将网盘的文件夹挂载到服务器上的<code>/Drive</code>文件夹，那就填<code>/Drive</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#以下是一整条命令，先修改DriveName:Folder和LocalFolder(有三处地方)的值，再一起复制到SSH客户端运行</span><br><span class="line"></span><br><span class="line">cat &gt; &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;rclone.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Rclone</span><br><span class="line">AssertPathIsDirectory&#x3D;LocalFolder</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;rclone mount DriveName:Folder LocalFolder \</span><br><span class="line"> --umask 0000 \</span><br><span class="line"> --default-permissions \</span><br><span class="line"> --allow-non-empty \</span><br><span class="line"> --allow-other \</span><br><span class="line"> --buffer-size 32M \</span><br><span class="line"> --dir-cache-time 12h \</span><br><span class="line"> --vfs-read-chunk-size 64M \</span><br><span class="line"> --vfs-read-chunk-size-limit 1G</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;fusermount -u LocalFolder</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line">User&#x3D;root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;default.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>开始启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rclone</span><br></pre></td></tr></table></figure><p>设置开机自启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable rclone</span><br></pre></td></tr></table></figure><p>其他命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">重启：systemctl restart rclone</span><br><span class="line">停止：systemctl stop rclone</span><br><span class="line">状态：systemctl status rclone</span><br></pre></td></tr></table></figure><div class="note info flat"><p>至此，Rclone 已成功使用自建 API 连接到了 OneDrive 网盘。如果需要在vps上挂载，你需要在本地获取token，然后再在vps上配置rclone链接OneDrive</p></div><h1 id="Windows下可视化上传下载-RcloneBrowser"><a href="#Windows下可视化上传下载-RcloneBrowser" class="headerlink" title="Windows下可视化上传下载 RcloneBrowser"></a>Windows下可视化上传下载 RcloneBrowser</h1><p>windows下可选，非必须，感觉OneDrive自己的客户端都很好用了</p><p><code>RcloneBrowser</code>是基于<code>rclone</code>来实现<code>OneDrive</code>文件的上传下载，个人觉得微软自己的<code>OneDrive</code>客户端还不错没必要用这个.但是如果为了调用<code>API</code>保活，这大概是最简单的方法了</p><p>在 <a href="https://github.com/kapitainsky/RcloneBrowser/releases">https://github.com/kapitainsky/RcloneBrowser/releases</a> 下载RcloneBrowser</p><p>在 <a href="http://www.secfs.net/winfsp/download/">http://www.secfs.net/winfsp/download/</a> 下载必要插件,这个插件是挂载onedrive到某个盘符要用到的</p><p>下载好后进行安装，然后进行配置。配置 <code>rclone.exe</code>的路径还有 <code>rclone.conf</code> 配置文件的路径。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305142403.png"></p><p>上传文件</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305142458.png"></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305142506.png"></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305142517.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
            <tag> Rclone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费申请office365E5-附自动订阅保活方法</title>
      <link href="posts/e968e4c0/"/>
      <url>posts/e968e4c0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前的Office 365开发者试用订阅（简称E3）有效期只有一年，一年过后数据都没了。</p><p>现在微软推出的新版订阅有效时间位90天，可自动进行订阅<br>官方教程(手动复制打开)：<a href="https://docs.microsoft.com/en-us/office/developer-program/office-365-developer-program">https://docs.microsoft.com/en-us/office/developer-program/office-365-developer-program</a></p><blockquote><ul><li>包括 25 个用于开发目的的用户许可证</li><li>访问核心 Microsoft 365 工作负载和功能（不包括 Windows），包括：</li><li>所有 Office 365 应用，包括 SharePoint、OneDrive、Outlook/Exchange、Teams、Planner、Word、Excel、PowerPoint 等</li><li>Office 365 高级威胁防护</li><li>Power BI 高级分析</li><li>用于合规性和信息保护的企业移动性 + 安全性 (EMS)</li><li>用于构建高级标识和访问管理解决方案的 Azure Active Directory</li></ul></blockquote><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><ol><li>首先进入<a href="https://developer.microsoft.com/zh-cn/office">Office开发人员中心</a>登录你的微软帐号之后，点击立即加入；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305090732.png"></p><ol start="2"><li>开通Office开发者账号，并且完善个人信息；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305090906.png"></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305091111.png"></p><ol start="3"><li>进入个人中心，点击设置订阅；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305092235.png"></p><ol start="4"><li><p>填写设置开发者订阅相关的信息；(这里要富强，不然接收不到验证码)<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305092411.png"></p></li><li><p>这样就注册好了，接下来需要对自己的账号添加许可证，不然用不了的。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305092544.png"></p><ol start="6"><li><p>添加许可证</p><p>点击上图的 Go to subscription ，进入后台</p></li></ol><p>管理 – &gt; 用户 -&gt; 活跃用户 -&gt; 点击用户名 -&gt; 许可证和用户 ,添加好后点击应用就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305093316.png"></p><ol start="7"><li>增大onedrive容量</li></ol><p>在<a href="https://admin.onedrive.com/">onedrive管理</a>中，找到储存</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200305095148.png"></p><h1 id="保活方法"><a href="#保活方法" class="headerlink" title="保活方法"></a>保活方法</h1><p>看了些大佬的方法，主要采取的还是利用onedrive和outlook，其实只要你去调用了他的api就可以保活。</p><p>保活教程见下一期。。。</p><p>这两篇都是调用的onedrive的api，一篇是基于rclone，另一篇是基于onemanager</p><a href="/posts/c4f1574a/" title="Rclone挂载OneDrive方法-自建API">Rclone挂载OneDrive方法-自建API</a><a href="/posts/7386aa8e/" title="利用heroku搭建免费的onemanager">利用heroku搭建免费的onemanager</a><p>听说调用outlook的api，对已经过期的账户，两天就自动续期了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装ohmyzsh</title>
      <link href="posts/29ade658/"/>
      <url>posts/29ade658/</url>
      
        <content type="html"><![CDATA[<h1 id="安装zsh和git"><a href="#安装zsh和git" class="headerlink" title="安装zsh和git"></a>安装zsh和git</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install zsh git</span><br></pre></td></tr></table></figure><h1 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh my zsh"></a>安装oh my zsh</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>在 <code>.zshrc</code>文件中，修改<code>ZSH_THEME</code>,主题展示可见官方<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">themes</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找到对应行改为你喜欢的主题</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure><h1 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h1><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>这个插件的作用是：连按两次Esc添加或去掉sudo<br>这个插件官方已经集成，直接在<code>.zshrc</code>中开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins&#x3D;(</span><br><span class="line">  git</span><br><span class="line">  sudo</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)  </span><br></pre></td></tr></table></figure><h2 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h2><p>这个插件作用是：高亮可用命令</p><p>首先下载插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>修改<code>.zshrc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  sudo</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  )  </span><br></pre></td></tr></table></figure><h2 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h2><p>这个插件作用是：记录上一条命令，并自动建议</p><p>同样的需要下载插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>然后修改<code>.zshrc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  sudo</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  )  </span><br></pre></td></tr></table></figure><h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h2><p>自带插件，不用再使用复杂的tar来解压压缩包了</p><p>激活: 添加到~/.zshrc的plugins列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  sudo</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  extract</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://ohmyz.sh/">oh my zsh 官网</a><br>2.<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">oh my zsh 主题仓库</a><br>3.<a href="https://github.com/ohmyzsh/ohmyzsh/">oh my zsh 源码仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Coding_CI实现Hexo的持续集成与Github和Coding的同步部署</title>
      <link href="posts/51df657a/"/>
      <url>posts/51df657a/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网上关于 <code>Hexo</code>持续集成的文章大多是使用<code>Travis CI</code>，也有不少同步部署到<code>Github</code>和<code>Coding</code>的教程，不过<code>Travis</code>只对<code>Github</code>的仓库提供CI服务，由于某些原因，<code>Github</code>在国内的访问速度并不理想，所以采用<code>Coding CI</code>进行部署。</p><h1 id="什么是持续集成-CI-："><a href="#什么是持续集成-CI-：" class="headerlink" title="什么是持续集成(CI)："></a>什么是持续集成(CI)：</h1><blockquote><p>持续集成（Continuous Integration，简称CI）是一种软件开发实践，在实践中指只要代码有变更，就自动运行构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p></blockquote><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="获取GitHub和coding的访问令牌"><a href="#获取GitHub和coding的访问令牌" class="headerlink" title="获取GitHub和coding的访问令牌"></a>获取GitHub和coding的访问令牌</h2><h3 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h3><p>在coding的个人设置中，找到访问令牌，并创建它<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221174003.png"></p><p>点击创建访问令牌，描述可以随便填写，勾选<code>project:depot</code>的复选框即可。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221174219.png"></p><p>密钥只显示一次，请将获取到的密钥复制保存下来，并以<code>用户名:密钥</code>的方式组合起来。</p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>和coding类似，在<code>Settings-&gt;Developer settings-&gt;Personal access tokens</code>创建<a href="https://github.com/settings/tokens">github访问令牌</a></p><p>点击创建令牌<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221174649.png"></p><p>名称随意，勾选<code>reop</code>复选框<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221175002.png"></p><p>注意保存密钥，并以<code>用户名:密钥</code>的方式组合起来。</p><h2 id="配置构建脚本"><a href="#配置构建脚本" class="headerlink" title="配置构建脚本"></a>配置构建脚本</h2><p>回到Coding，进入项目仓库，点击构建，点击下方的新建构建计划配置<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221175248.png"></p><p>我的博客源代码在github所以选择github，勾选静态配置Jenkinsfile文件，选择自定义构建过程，勾选前往配置详情，并点击确定。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221175530.png"></p><blockquote><p>源码在github需要关联外部仓库，可根据提示来配置</p></blockquote><p>点击文本编辑器，清空内容。将下方代码填入其中，注意更改其中的用户名，邮箱，仓库等。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221175937.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(&#39;拉取源码&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        checkout([$class: &#39;GitSCM&#39;,branches: [[name: env.GIT_BUILD_REF]],userRemoteConfigs: [[url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;安装Hexo&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#39;正在安装Hexo-cli...&#39;</span><br><span class="line">        sh &#39;npm install -g hexo-cli&#39;</span><br><span class="line">        sh &#39;npm install hexo@4.1.1 --save&#39;</span><br><span class="line">        sh &#39;npm install&#39;</span><br><span class="line">        echo &#39;安装完成.&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;生成静态文件&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#39;生成静态文件中...&#39;</span><br><span class="line">        sh &#39;hexo clean&#39;</span><br><span class="line">        sh &#39;hexo g&#39;</span><br><span class="line">        echo &#39;已生成静态文件，准备推送部署.&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#39;推送部署&#39;) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        echo &#39;正在推送静态文件...&#39;</span><br><span class="line">        dir(path: &#39;public&#39;) &#123;</span><br><span class="line">          script &#123;</span><br><span class="line">            writeFile(file: &#39;CNAME&#39;, text: &#39;域名&#39;)</span><br><span class="line">            sh &#39;git init&#39;</span><br><span class="line">            sh &#39;git add -A&#39;</span><br><span class="line">            sh &#39;git config user.name &quot;用户名&quot;&#39;</span><br><span class="line">            sh &#39;git config user.email &quot;邮箱&quot;&#39;</span><br><span class="line">            sh &#39;git commit -m CI&#39;</span><br><span class="line">            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;GH_Token&#125;@github.com&#x2F;用户名&#x2F;仓库.git master&#39;</span><br><span class="line">            sh &#39;git push -f https:&#x2F;&#x2F;$&#123;CO_Token&#125;@e.coding.net&#x2F;用户名&#x2F;仓库.git master&#39;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        echo &#39;已完成文件推送.&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如若未使用自定义域名，可删除第30行内容。</p></blockquote><p>点击变量与缓存，增加环境变量，分别为：<br>变量名称：CO_Token，类型：字符串，默认值为上一步Coding令牌的组合。<br>变量名称：GH_Token，类型：字符串，默认值为上一步Github令牌的组合。</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221180246.png"></p><h2 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h2><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200221180443.png"></p><p>稍等片刻，即可看到构建成功。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用coding在线编辑hexo博客</title>
      <link href="posts/87a2932/"/>
      <url>posts/87a2932/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在看这篇博客前，你应该具备以下基础，如果是小白，请参考我之前的博文。</p><blockquote><ul><li>自己搭建过hexo，并且发布过文章</li><li>使用过github和coding</li><li>熟悉Linux命令和git命令</li><li>拥有自己的博客源码仓库</li></ul></blockquote><p>腾讯出了一个叫<code>cloud studio</code> 的在线环境，可以部署ubuntu，hexo等开发环境。所以我们可以利用这么一个方便的环境来在线编辑我们的博客。</p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><ol><li><p>登录你的coding账户，进入<code>cloud studio</code><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219204846.png"></p></li><li><p>点击设置，将这串SSH 公钥添加到你的源码仓库中<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219205449.png"></p></li></ol><p>我的源码是在github中，下面我以github为例：</p><ul><li><p>在你的源码仓库中点击设置 -&gt; deploy keys<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219205805.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219205933.png"></p></li><li><p>添加ssh 公钥，注意勾选下面的权限<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219210318.png"></p></li></ul><ol start="3"><li>新建工作空间<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219205116.png"></li></ol><ul><li>设置工作空间名字，选择nodejs的环境，输入你源码仓库的 <strong>SSH 协议的仓库地址</strong><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219210700.png"></li></ul><ol start="4"><li><p>进入工作空间，第一次可能会有点慢，进入后他会自动克隆你的源码仓库<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219211153.png"></p></li><li><p>安装hexo<br>在终端中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo@4.1.1 --save</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219211730.png"></p></li></ol><p>我这里因为有个插件需要特定版本的hexo，所以需要指定版本,如果不需要特定版本只需 <code>npm install hexo --save</code></p><ol start="6"><li>写文章</li></ol><p>我们可以执行<code>hexo new test</code> 测试我们的环境<br>然后和本地写文章一样，生成文章发布文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219212335.png"></p><p>执行完<code>hexo g</code>之后可以看到已经生成<code>public</code>文件夹了</p><p>在执行<code>hexo d</code>之前需要设置git用户名和邮箱<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219212605.png"></p><p>可以看到，他提醒输入用户名邮箱。<code>.deploy_git</code>文件夹也生成了</p><p>在我们的博客中页有了这个页面<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219213012.png"></p><ol start="7"><li>将刚才写好的博客源码<code>push</code>到<code>github</code>中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;update&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li>在本地同步<br>你可以使用<code>git pull</code>同步仓库的文件（如果你的电脑上有这个源码仓库），如果没有源码仓库，也可以单独clone你的源码仓库<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200219214052.png"></li></ol><p>因为这篇博文是在本地电脑上写的，还没发出去，所以我克隆到本地仓库。可以看到创建的<code>test.md</code>已经在本地电脑上了</p><blockquote><p>像这样切换环境写作，写之前最好<code>git pull</code>一下，写完后记得push到仓库中</p></blockquote><p>同样的你与要安装插件，执行<code>npm install hexo --save</code><br>再进行编写文章<br>写好之后部署你的博客，以及push到源码仓库</p><h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><ol><li>这个在线环境每天只能用两个小时。。。</li><li>在切换终端操作后，可能有push不成功的现象，这里涉及到git协同工作的问题了。因为你没有<code>git pull</code>仓库里更新了的代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github和coding实现301重定向</title>
      <link href="posts/32baccf/"/>
      <url>posts/32baccf/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用不蒜子进行站点访问统计的时候，发现带www的域名和不带www的域名统计不一样。</p><p>带www和不带www的搜索引擎会认为是两个网站，会影响seo，所以要进行统一。将www域名定向到顶级域名，或者把顶级域名定向到www域名</p><h1 id="github重定向"><a href="#github重定向" class="headerlink" title="github重定向"></a>github重定向</h1><ol><li>在仓库根目录下添加一个CNAME文件,没有后缀名,里面内容为你主打的域名，例如我主打顶级域名，就写<code>gyhnice.top</code>;</li><li>域名解析那里，将@和www CNAME记录的记录值同时设置为username.github.io即可完成github pages301重定向，就是那么简单。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200215103849.png"></p><h1 id="coding重定向"><a href="#coding重定向" class="headerlink" title="coding重定向"></a>coding重定向</h1><p>添加www域名和顶级域名，设置一个首选域名，在另一个域名后面勾选<code>跳转至首选</code><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200215103538.png"></p><blockquote><p>如果ssl证书申请不了，先把github的域名解析先暂停</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.arao.me/website/github-pages-araome-301-www.html">Github Pages301重定向简单的让我有点接受唔到咯</a></li><li><a href="https://www.jianshu.com/p/35a6ad08ea44">hexo设置301重定向</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客开启pwa</title>
      <link href="posts/805d5d89/"/>
      <url>posts/805d5d89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Progressive Web App</code>, 简称<code> PWA</code>，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。</p><p><code>PWA</code> 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><p>PWA 的主要特点包括下面三点：</p><ul><li>可靠 - 即使在不稳定的网络环境下，也能瞬间加载并展现</li><li>体验 - 快速响应，并且有平滑的动画响应用户的操作</li><li>粘性 - 像设备上的原生应用，具有沉浸式的用户体验，用户可以添加到桌面</li></ul><p>PWA 本身强调渐进式，并不要求一次性达到安全、性能和体验上的所有要求，开发者可以通过 PWA Checklist 查看现有的特征。</p><div class="note warning flat"><p>开始pwa之前，全站必须支持HTTPS<br>开始pwa之前，全站必须支持HTTPS<br>开始pwa之前，全站必须支持HTTPS</p></div><h1 id="安装pwa"><a href="#安装pwa" class="headerlink" title="安装pwa"></a>安装pwa</h1><p><code>hexo@4.2.0</code> 目前赞不兼容 <code>hexo-pwa</code>,使用 <code>hexo@4.2.0</code> 版本的用户推荐降级到 <code>hexo@4.1.1</code></p><ol><li>使用<code>sudo hexo -version</code> 查看版本</li><li>安装指定版本 <code>sudo npm install hexo@4.1.1 --save</code></li><li>安装<code>hexo-pwa</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-pwa --save</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1></li></ol><h2 id="添加manifest-json"><a href="#添加manifest-json" class="headerlink" title="添加manifest.json"></a>添加manifest.json</h2><p>在<code>manifest.json</code><a href="https://app-manifest.firebaseapp.com/">生成网站</a>生成manifest.json<br>首先你需要准备一个你喜欢的图标，填写香相关选项，并上传图标，将生成的manifest.json文件，放到 <strong>博客根目录下</strong><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200214153454.png"></p><p>我生成的如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;YH&#39;s Blog&quot;,</span><br><span class="line">  &quot;short_name&quot;: &quot;YH&#39;s Blog&quot;,</span><br><span class="line">  &quot;theme_color&quot;: &quot;#2196f3&quot;,</span><br><span class="line">  &quot;background_color&quot;: &quot;#2196f3&quot;,</span><br><span class="line">  &quot;display&quot;: &quot;standalone&quot;,</span><br><span class="line">  &quot;Scope&quot;: &quot;&#x2F;&quot;,</span><br><span class="line">  &quot;start_url&quot;: &quot;&#x2F;&quot;,</span><br><span class="line">  &quot;icons&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-72x72.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;72x72&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-96x96.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;96x96&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-128x128.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;128x128&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-144x144.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;144x144&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-152x152.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;152x152&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-192x192.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;192x192&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-384x384.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;384x384&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;src&quot;: &quot;images&#x2F;icons&#x2F;icon-512x512.png&quot;,</span><br><span class="line">      &quot;sizes&quot;: &quot;512x512&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;splash_pages&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数解释</strong></p><ul><li><p>name: {string} 应用名称，用于安装横幅、启动画面显示</p></li><li><p>short_name: {string} 应用短名称，用于主屏幕显示</p></li><li><p>theme_color: {Color} css色值theme_color 属性可以指定 PWA 的主题颜色。可以通过该属性来控制浏览器 UI 的颜色。比如 PWA 启动画面上状态栏、内容页中状态栏、地址栏的颜色，会被 theme_color 所影响。</p></li><li><p>background_color: {Color} css色值 可以指定启动画面的背景颜色。</p></li><li><p>display: {string} 显示类型</p></li><li><p>fullscreen 应用的显示界面将占满整个屏幕</p></li><li><p>standalone 浏览器相关UI（如导航栏、工具栏等）将会被隐藏</p></li><li><p>minimal-ui 显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</p></li><li><p>browser 浏览器模式，与普通网页在浏览器中打开的显示一致</p></li><li><p>scope: {string} 作用域</p><blockquote><p>scope 应遵循如下规则：<br>如果没有在 manifest 中设置 scope，则默认的作用域为 manifest.json 所在文件夹；<br>scope 可以设置为 ../ 或者更高层级的路径来扩大PWA的作用域；</p></blockquote></li><li><p>start_url 必须在作用域范围内；</p><blockquote><p>如果 start_url 为相对地址，其根路径受 scope 所影响；<br>如果 start_url 为绝对地址（以 / 开头），则该地址将永远以 / 作为根地址；</p></blockquote></li><li><p>start_url: {string} 应用启动地址</p></li><li><p>icons: {Array.} 应用图标列表</p></li><li><p>src: {string} 图标 url</p><blockquote><p>sizes {string} 图标尺寸，格式为widthxheight，宽高数值以 css 的 px 为单位。如果需要填写多个尺寸，则使用空格进行间隔，如”48x48 96x96 128x128”<br>type {string} 图标的 mime 类型，非必填项，该字段可让浏览器快速忽略掉不支持的图标类型</p></blockquote></li></ul><h2 id="添加sw-js"><a href="#添加sw-js" class="headerlink" title="添加sw.js"></a>添加sw.js</h2><p>新建一个名为sw.js的文件，放在<strong>站点根目录下</strong>，在文件里填入一下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">importScripts(&#39;https:&#x2F;&#x2F;g.alicdn.com&#x2F;kg&#x2F;workbox&#x2F;3.3.0&#x2F;workbox-sw.js&#39;);</span><br><span class="line">​</span><br><span class="line">if (workbox) &#123;</span><br><span class="line">    workbox.setConfig(&#123; modulePathPrefix: &#39;https:&#x2F;&#x2F;g.alicdn.com&#x2F;kg&#x2F;workbox&#x2F;3.3.0&#x2F;&#39; &#125;);</span><br><span class="line">​</span><br><span class="line">    workbox.precaching.precache([&#39;&#x2F;&#39;, &#39;&#x2F;index.html&#39;]);</span><br><span class="line">​</span><br><span class="line">    workbox.routing.registerRoute(new RegExp(&#39;^https?:&#x2F;&#x2F;gyh.im&#x2F;?$&#39;), workbox.strategies.networkFirst());</span><br><span class="line">​</span><br><span class="line">    workbox.routing.registerRoute(new RegExp(&#39;.*.html&#39;), workbox.strategies.networkFirst());</span><br><span class="line">​</span><br><span class="line">    workbox.routing.registerRoute(new RegExp(&#39;.*.(?:js|css|jpg|png|gif)&#39;), workbox.strategies.staleWhileRevalidate());</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>将其中域名改为你自己主页的域名：<code>https?://gyh.im/</code> 改为你的域名，格式要和我的一样。</p></blockquote><h3 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h3><p>首先将生成的<code>images</code>文件复制到 <code>/source</code> 文件夹下<br>将下面的配置代码复制到你的站点根目录配置文件 <code>_config.yml</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;lavas-project&#x2F;hexo-pwa</span><br><span class="line">pwa:</span><br><span class="line">  manifest:</span><br><span class="line">    path: &#x2F;manifest.json</span><br><span class="line">    body:</span><br><span class="line">      name: YH&#39;s Blog</span><br><span class="line">      short_name: YH&#39;s Blog</span><br><span class="line">      theme_color: #2196f3</span><br><span class="line">      background_color: #2196f3</span><br><span class="line">      display: standalone</span><br><span class="line">      orientation: portrait</span><br><span class="line">      scope: &#x2F;</span><br><span class="line">      start_url: &#x2F;</span><br><span class="line">      icons:</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-72x72.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 72x72</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-96x96.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 96x96</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-128x128.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 128x128</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-144x144.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 144x144</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-152x152.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 152x152</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-192x192.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 192x192</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-384x384.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 384x384</span><br><span class="line">        - src: &#x2F;images&#x2F;icons&#x2F;icon-512x512.png</span><br><span class="line">          type: image&#x2F;png</span><br><span class="line">          sizes: 512x512</span><br><span class="line">  serviceWorker:</span><br><span class="line">    path: &#x2F;sw.js</span><br><span class="line">    preload:</span><br><span class="line">      urls:</span><br><span class="line">        - &#x2F;</span><br><span class="line">      posts: 12</span><br><span class="line">    opts:</span><br><span class="line">      networkTimeoutSeconds: 30</span><br><span class="line">    routes:</span><br><span class="line">      - pattern: !!js&#x2F;regexp &#x2F;hm.baidu.com&#x2F;</span><br><span class="line">        strategy: networkOnly</span><br><span class="line">      - pattern: !!js&#x2F;regexp &#x2F;www.google-analytics.com&#x2F;</span><br><span class="line">        strategy: networkOnly</span><br><span class="line">      - pattern: !!js&#x2F;regexp &#x2F;.*\.(js|css|jpg|jpeg|png|gif)$&#x2F;</span><br><span class="line">        strategy: cacheFirst</span><br><span class="line">      - pattern: !!js&#x2F;regexp &#x2F;\&#x2F;&#x2F;</span><br><span class="line">        strategy: networkFirst</span><br><span class="line">  priority: 5</span><br></pre></td></tr></table></figure><h1 id="检查pwa部署是否成功"><a href="#检查pwa部署是否成功" class="headerlink" title="检查pwa部署是否成功"></a>检查pwa部署是否成功</h1><p>执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><p>然后在浏览器输入localhost:4000，查看效果。</p><p>按F12，然后选择<code>Application—&gt;Service Workers</code>，查看是否成功？<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200214154647.png"></p><blockquote><p>成功状态提示：Status #xxx activated and is running</p></blockquote><p><strong>谷歌浏览器安装PWA</strong></p><p>前面的步骤操作没错，配置也没问题，则在本地运行试，浏览器地址栏中会出现一个类似 ➕ 加号的图标，点击它会出现一个弹出框，就说明配置成功，当然你可以选择安装，安装过后桌面会出现一个图标，点击就可以访问，但是如果你本地服务关闭的话，再点击这个图标，有些页面可以访问，但有些页面访问不了。如果需要它都能够全部访问的话，你需要开启本地服务，也就是<code>hexo s</code></p><p>如果你的地址栏没有出现这个加号，首先在新的标签页上的地址栏输入<code>Chrome://flags</code>，然后再搜索栏输入<code>PWAS</code>进行查找，会出现两个选项一个为<code>Desktop PWAs local updating</code>，另一个为<code>Desktop PWAs installable from the omnibox</code>，将其设为<code>Enabled</code>，然后点击<code>Relaunch</code>，进行浏览器的重启，再查看<code>localhost:4000</code>，就会出现加号了。</p><h1 id="部署到github和coding"><a href="#部署到github和coding" class="headerlink" title="部署到github和coding"></a>部署到github和coding</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean</span><br><span class="line">sudo hexo g</span><br><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1580238">Hexo添加PWA支持</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly使用小技巧</title>
      <link href="posts/85f489f0/"/>
      <url>posts/85f489f0/</url>
      
        <content type="html"><![CDATA[<h1 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h1><p>修改 <code>themes\Butterfly\source\css\var.styl </code> 找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Global Variables</span><br><span class="line">$font-size &#x3D; 14px</span><br></pre></td></tr></table></figure><p>我修改成了16px</p><h1 id="qq在线"><a href="#qq在线" class="headerlink" title="qq在线"></a>qq在线</h1><ol><li><p>打开<a href="https://shang.qq.com/v3/widget.html">此链接</a></p></li><li><p>然后点击立即免费开通服务就好了，进入到下面的界面可以复制其代码生成图片<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200211140211.png"></p></li><li><p>在 <code>butterfly.yml</code> 文件中找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  fa fa-github: https:&#x2F;&#x2F;github.com&#x2F;imgyh</span><br><span class="line">  fa fa-envelope: mailto:gyhnice@163.com</span><br><span class="line">  fa fa-qq: https:&#x2F;&#x2F;wpa.qq.com&#x2F;msgrd?v&#x3D;3&amp;uin&#x3D;1974355683&amp;site&#x3D;qq&amp;menu&#x3D;yes</span><br><span class="line">  fa fa-rss: &#x2F;atom.xml</span><br></pre></td></tr></table></figure><p>修改 <code>fa-qq</code> 这一项为你自己的链接就可以了</p></li></ol><h1 id="POST-Front-matter写法"><a href="#POST-Front-matter写法" class="headerlink" title="POST Front_matter写法"></a>POST Front_matter写法</h1><h2 id="post和page模板"><a href="#post和page模板" class="headerlink" title="post和page模板"></a>post和page模板</h2><p>在博客根目录下的<code>scaffolds</code>文件夹中修改<code>post.md</code>和<code>page.md</code></p><h3 id="page-md模板"><a href="#page-md模板" class="headerlink" title="page.md模板"></a>page.md模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">comments:true</span><br><span class="line">description:</span><br><span class="line">top_img: </span><br><span class="line">katex:true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="post-md模板"><a href="#post-md模板" class="headerlink" title="post.md模板"></a>post.md模板</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">description: </span><br><span class="line">top_img: </span><br><span class="line">comments: true</span><br><span class="line">cover:</span><br><span class="line">toc: true</span><br><span class="line">toc_number: true</span><br><span class="line">copyright: true</span><br><span class="line">katex: false</span><br><span class="line">top: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="tags写法"><a href="#tags写法" class="headerlink" title="tags写法"></a>tags写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">- tags1</span><br><span class="line">- tags2</span><br></pre></td></tr></table></figure><h3 id="categories写法"><a href="#categories写法" class="headerlink" title="categories写法"></a>categories写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">单个分类，了解一下:</span><br><span class="line">categories:</span><br><span class="line">- Linux</span><br><span class="line">并列分类，了解一下：</span><br><span class="line">categories:</span><br><span class="line">- [Linux]</span><br><span class="line">- [Tools]</span><br><span class="line"></span><br><span class="line">并列+子分类([]中linux是父分类，hexo是子分类)，再了解一下：</span><br><span class="line">categories:</span><br><span class="line">- [Linux, Hexo]</span><br><span class="line">- [Tools, PHP]</span><br></pre></td></tr></table></figure><h1 id="解决代码块渲染问题"><a href="#解决代码块渲染问题" class="headerlink" title="解决代码块渲染问题"></a>解决代码块渲染问题</h1><p>在代码块中输入html代码，hexo会把html代码渲染出来，而我只想看到代码是什么样子。<br>解决方法：只需要安装 <code>cheerio</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install cheerio@0.22.0 --save</span><br></pre></td></tr></table></figure><h1 id="代码框高亮，显示行号"><a href="#代码框高亮，显示行号" class="headerlink" title="代码框高亮，显示行号"></a>代码框高亮，显示行号</h1><p>在站点配置文件 <code>_config.yml</code> 中修改这一项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: true</span><br><span class="line">  tab_replace: &#39;&#39;</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br></pre></td></tr></table></figure><h1 id="coding-申请ssl认证失败"><a href="#coding-申请ssl认证失败" class="headerlink" title="coding 申请ssl认证失败"></a>coding 申请ssl认证失败</h1><p>Coding的 SSL/TLS 证书每次申请只能使用90天</p><p>申请 SSL/TLS 证书时，要将指向Coding的线路类型设为为默认，然后把指向到Github的域名关掉，就可以成功申请了。</p><p>因为Coding申请 SSL/TLS 证书需要通过 Let’s Encrypt 的 HTTP 方式验证域名所有权。因为 Let’s Encrypt是国外网络，如果不更改域名设置，验证域名所有权时不能正确指向到Coding而是指向到Github，所以就会导致申请失败。</p><h1 id="引用同站点的文章"><a href="#引用同站点的文章" class="headerlink" title="引用同站点的文章"></a>引用同站点的文章</h1><p>在写文章的过程中，有时候需要引用站内的其他文章。可以通过内置的标签插件的语法post_link来实现引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure><p>举例 引用 Hello.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link Hello %&#125;</span><br><span class="line">或者</span><br><span class="line">&#123;% post_link Hello 你好 %&#125;</span><br></pre></td></tr></table></figure><h1 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h1><p>用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125; </span><br><span class="line">Any content (support inline tags too.io). </span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class] : default | primary | success | info | warning | danger. </span><br><span class="line">[no-icon] : Disable icon in note.</span><br><span class="line"></span><br><span class="line">All parameters are optional.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125; </span><br><span class="line">default提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125; </span><br><span class="line">primary提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125; </span><br><span class="line">success提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125; </span><br><span class="line">info提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125; </span><br><span class="line">warning提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125; </span><br><span class="line">danger提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h1 id="Gallery-相册"><a href="#Gallery-相册" class="headerlink" title="Gallery 相册"></a>Gallery 相册</h1><p>写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125; </span><br><span class="line">markdown图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125; </span><br><span class="line">![](https:&#x2F;&#x2F;gratisography.com&#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;10&#x2F;gratisography-scary-pumpkin-hand-900x600.jpg) </span><br><span class="line">![](https:&#x2F;&#x2F;gratisography.com &#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;10&#x2F;gratisography-fresh-fish-dinner-900x600.jpg) </span><br><span class="line">![](https:&#x2F;&#x2F;gratisography.com&#x2F;wp-content&#x2F;uploads&#x2F;2019&#x2F;10&#x2F;gratisography-mountain-cloud -landscape-900x600.jpg) </span><br><span class="line">![](https:&#x2F;&#x2F;picjumbo.com&#x2F;wp-content&#x2F;uploads&#x2F;iphone-free-stock-photos-2210x3315.jpg) </span><br><span class="line">![](https:&#x2F;&#x2F;picjumbo.com&#x2F;wp -content&#x2F;uploads&#x2F;young-millennial-girl-drinking-lemonade-and-overlooking-the-city-2210x1473.jpg) </span><br><span class="line">![](https:&#x2F;&#x2F;picjumbo.com&#x2F;wp-content&#x2F;uploads&#x2F;modern-graphic-designer -essentials _free_ stock _photos_ picjumbo_HNCK4919-2210x1474.jpg) </span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><h1 id="Gallery-相册图库"><a href="#Gallery-相册图库" class="headerlink" title="Gallery 相册图库"></a>Gallery 相册图库</h1><p>配合<code>Gallery 相册</code>一起使用</p><p>写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt; </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125; </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125; </span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125; </span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt; </span><br><span class="line">&#123;% galleryGroup &#39;壁纸&#39; &#39;收藏的一些壁纸&#39; &#39;&#x2F;Gallery&#x2F;wallpaper&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;11&#x2F;10&#x2F;T7Mu8Aod3egmC4Q.png % &#125; </span><br><span class="line">&#123;% galleryGroup &#39;漫威&#39; &#39;关于漫威的图片&#39; &#39;&#x2F;Gallery&#x2F;marvel&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;8t97aVlp4hgyBGu.jpg %&#125; </span><br><span class="line">&#123;% galleryGroup &#39;OH MY GIRL&#39; &#39;关于OH MY GIRL的图片&#39; &#39;&#x2F;Gallery&#x2F;ohmygirl&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;hOqbQ3BIwa6KWpo.jpg %&#125; </span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h1 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h1><p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文档</a></p><p>写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125; </span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125; </span><br><span class="line">pie </span><br><span class="line">    title Key elements in Product X </span><br><span class="line">    &quot;Calcium&quot; : 42.96 </span><br><span class="line">    &quot;Potassium&quot; : 50.05 </span><br><span class="line">    &quot;Magnesium&quot; : 10.01 </span><br><span class="line">    &quot;Iron&quot; : 5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><h1 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id&#39;s as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post&#x2F;page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It&#39;s will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (full-name, look like &#39;fas fa-font&#39;)</span><br><span class="line">                Can be specified with or without space; e.g. &#39;Tab caption @icon&#39; similar to &#39;Tab caption@icon&#39;.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></table></figure><blockquote><p>Demo 1 - 预设选择第一个【默认】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 2 - 预设选择tabs</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 3 - 没有预设值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line">**tab名字为第一个Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有图标 没有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line">                      按钮字体和边框顔色(outline时)</span><br><span class="line">                      default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green</span><br><span class="line">[style]       : [可选] 按钮样式 默认实心</span><br><span class="line">                      outline&#x2F;留空</span><br><span class="line">[layout]      : [可选] 按钮佈局 默认为line</span><br><span class="line">                      block&#x2F;留空</span><br><span class="line">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span><br><span class="line">                      center&#x2F;right&#x2F;留空</span><br><span class="line">[size]        : [可选] 按钮大小</span><br><span class="line">                      larger&#x2F;留空</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客 %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify button--animated " href="https://gyh.im"   title="元洪博客"><span>元洪博客</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://gyh.im"   title="元洪博客"><span>元洪博客</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated block" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated block center larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated block right outline larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify button--animated larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated blue larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated pink larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated red larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated purple larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated orange larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated green larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;btn-center&quot;&gt;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#39;https:&#x2F;&#x2F;gyh.im&#39;,元洪博客,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated outline blue larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated outline pink larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated outline red larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated outline purple larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated outline orange larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a><a class="btn-beautify button--animated outline green larger" href="https://gyh.im"   title="元洪博客"><i class="far fa-hand-point-right fa-fw"></i><span>元洪博客</span></a></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine配置评论提醒服务</title>
      <link href="posts/caa4f244/"/>
      <url>posts/caa4f244/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://valine.js.org/">Valine</a>是一款支持匿名的评论系统，已经集成到了hexo上面。<a href="https://deserts.io/valine-admin-document/">Valine Admin</a>则是对 Valine 评论系统的拓展应用，可增强 Valine 的邮件通知功能。基于 Leancloud 的云引擎与云函数。可以提供邮件 <code>通知站长</code> 和 <code>@ 通知</code> 的功能，而且还支持自定义邮件通知模板。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ul><li><p>在这之前你已经在你的hexo上部署好了Valine，如果没有请参考<a href="https://valine.js.org/quickstart.html">这里</a></p></li><li><p>然后进入 <a href="https://leancloud.cn/dashboard/applist.html#/apps">Leancloud</a> 对应的 Valine 应用中。</p></li><li><p>点击 <code>云引擎 -&gt; 设置</code>填写代码库并保存：<code>https://github.com/zhaojun1998/Valine-Admin</code><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209231806.png"></p></li><li><p>在设置页面，设置环境变量以及 Web 二级域名。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209231807.png"><br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209231808.png"></p></li></ul><table><thead><tr><th align="center">变量</th><th align="center">示例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SITE_NAME</td><td align="center">Deserts</td><td align="center">必填]博客名称</td></tr><tr><td align="center">SITE_URL</td><td align="center"><a href="https://panjunwen.com/">https://panjunwen.com</a></td><td align="center">[必填]首页地址</td></tr><tr><td align="center">SMTP_SERVICE</td><td align="center">QQ</td><td align="center">[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 更多</td></tr><tr><td align="center">SMTP_USER</td><td align="center"><a href="mailto:&#x78;&#x78;&#120;&#120;&#120;&#x78;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;">&#x78;&#x78;&#120;&#120;&#120;&#x78;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a></td><td align="center">[必填]SMTP登录用户</td></tr><tr><td align="center">SMTP_PASS</td><td align="center">ccxxxxxxxxch</td><td align="center">[必填]SMTP登录密码(QQ邮箱需要获取独立密码)</td></tr><tr><td align="center">SENDER_NAME</td><td align="center">Deserts</td><td align="center">[必填]发件人</td></tr><tr><td align="center">SENDER_EMAIL</td><td align="center"><a href="mailto:&#x78;&#x78;&#120;&#120;&#120;&#120;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#x78;&#x78;&#120;&#120;&#120;&#120;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a></td><td align="center">[必填]发件邮箱</td></tr><tr><td align="center">ADMIN_URL</td><td align="center"><a href="https://xxx.leanapp.cn/">https://xxx.leanapp.cn/</a></td><td align="center">[建议]Web主机二级域名，用于自动唤醒</td></tr><tr><td align="center">BLOGGER_EMAIL</td><td align="center"><a href="mailto:&#120;&#x78;&#120;&#120;&#120;&#x40;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#120;&#x78;&#120;&#120;&#120;&#x40;&#x67;&#109;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></td><td align="center">[可选]博主通知收件地址，默认使用SENDER_EMAIL</td></tr><tr><td align="center">AKISMET_KEY</td><td align="center">xxxxxxxxxxxx</td><td align="center">[可选]Akismet Key 用于垃圾评论检测，设为MANUAL_REVIEW开启人工审核，留空不使用反垃圾</td></tr><tr><td align="center">MAIL_SUBJECT</td><td align="center">见下文</td><td align="center">[可选]@通知邮件主题（标题）模板</td></tr><tr><td align="center">MAIL_TEMPLATE</td><td align="center">见下文</td><td align="center">[可选]@通知邮件内容模板</td></tr><tr><td align="center">MAIL_SUBJECT_ADMIN</td><td align="center">见下文</td><td align="center">[可选]博主邮件通知主题模板</td></tr><tr><td align="center">MAIL_TEMPLATE_ADMIN</td><td align="center">见下文</td><td align="center">[可选]博主邮件通知内容模板</td></tr></tbody></table><p><strong>参数解释</strong></p><hr><ul><li>ADMIN_URL：二级域名用于评论后台管理，如<a href="https://xxxx.leanapp.cn/">https://xxxx.leanapp.cn</a> 。<br>Web主机二级域名，用于自动唤醒，会默认分配给你一个二级域名（<code>云引擎 -&gt; 设置路径下</code>），当然你也可以绑定一个<strong>已备案</strong>的域名，如图：<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209232739.png"></li></ul><p><strong>垃圾评论检测</strong></p><blockquote><p>Akismet (Automattic Kismet)是应用广泛的一个垃圾留言过滤系统，其作者是大名鼎鼎的WordPress 创始人 Matt Mullenweg，Akismet也是WordPress默认安装的插件，其使用非常广泛，设计目标便是帮助博客网站来过滤留言Spam。有了Akismet之后，基本上不用担心垃圾留言的烦恼了。<br>启用Akismet后，当博客再收到留言会自动将其提交到Akismet并与Akismet上的黑名单进行比对，如果名列该黑名单中，则该条留言会被标记为垃圾评论且不会发布。</p></blockquote><ul><li>AKISMET_KEY：如果还没有Akismet Key，你可以去 <a href="https://akismet.com/development/">AKISMET FOR DEVELOPERS</a> 免费申请一个,此时你会获取一串AKISMET API密钥，填入变量值中；当AKISMET_KEY设为MANUAL_REVIEW时，开启人工审核模式；如果你不需要反垃圾评论，Akismet Key 环境变量可以忽略。</li><li>MAIL_SUBJECT: @通知邮件主题模板，请设置为: <code>$&#123;PARENT_NICK&#125;，您在$&#123;SITE_NAME&#125;上的评论收到了回复</code> </li><li>MAIL_TEMPLATE：@通知邮件内容模板,请设置为:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-radius: 10px 10px 10px 10px;font-size:13px;    color: #555555;width: 666px;font-family:&#39;Century Gothic&#39;,&#39;Trebuchet MS&#39;,&#39;Hiragino Sans GB&#39;,微软雅黑,&#39;Microsoft Yahei&#39;,Tahoma,Helvetica,Arial,&#39;SimSun&#39;,sans-serif;margin:50px auto;border:1px solid #eee;max-width:100%;background: #ffffff repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 1px 5px rgba(0, 0, 0, 0.15);&quot;&gt;&lt;div style&#x3D;&quot;width:100%;background:#49BDAD;color:#ffffff;border-radius: 10px 10px 0 0;background-image: -moz-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));background-image: -webkit-linear-gradient(0deg, rgb(67, 198, 184), rgb(255, 209, 244));height: 66px;&quot;&gt;&lt;p style&#x3D;&quot;font-size:15px;word-break:break-all;padding: 23px 32px;margin:0;background-color: hsla(0,0%,100%,.4);border-radius: 10px 10px 0 0;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #ffffff;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot;&gt; $&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的留言有新回复啦！&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;div style&#x3D;&quot;margin:40px auto;width:90%&quot;&gt;&lt;p&gt;$&#123;PARENT_NICK&#125; 同学，您曾在文章上发表评论：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;&quot;&gt;$&#123;PARENT_COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;$&#123;NICK&#125; 给您的回复如下：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background: #fafafa repeating-linear-gradient(-45deg,#fff,#fff 1.125rem,transparent 1.125rem,transparent 2.25rem);box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);margin:20px 0px;padding:15px;border-radius:5px;font-size:14px;color:#555555;&quot;&gt;$&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;#comments&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;，欢迎再次光临&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot;                href&#x3D;&quot;$&#123;SITE_URL&#125;&quot;&gt; $&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;a:link&#123;text-decoration:none&#125;a:visited&#123;text-decoration:none&#125;a:hover&#123;text-decoration:none&#125;a:active&#123;text-decoration:none&#125;&lt;&#x2F;style&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><ul><li>MAIL_SUBJECT_ADMIN: 博主邮件通知主题模板,请设置为: <code>$&#123;SITE_NAME&#125;上有新评论了</code></li><li>MAIL_TEMPLATE_ADMIN：博主邮件通知内容模板,请设置为:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;&quot;&gt;&lt;h2 style&#x3D;&quot;border-bottom:1px solid #DDD;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;&quot;&gt;您在&lt;a style&#x3D;&quot;text-decoration:none;color: #12ADDB;&quot; href&#x3D;&quot;$&#123;SITE_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;$&#123;SITE_NAME&#125;&lt;&#x2F;a&gt;上的文章有了新的评论&lt;&#x2F;h2&gt;&lt;p&gt;&lt;strong&gt;$&#123;NICK&#125;&lt;&#x2F;strong&gt;回复说：&lt;&#x2F;p&gt;&lt;div style&#x3D;&quot;background-color: #f5f5f5;padding: 10px 15px;margin:18px 0;word-wrap:break-word;&quot;&gt; $&#123;COMMENT&#125;&lt;&#x2F;div&gt;&lt;p&gt;您可以点击&lt;a style&#x3D;&quot;text-decoration:none; color:#12addb&quot; href&#x3D;&quot;$&#123;POST_URL&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;查看回复的完整內容&lt;&#x2F;a&gt;&lt;br&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>如果你还想自定义邮件通知模板,以及上面四个参数的具体值（这里的代码它会自动渲染，看不到源代码，哈哈哈哈，大家还是去看他的博客文档吧）  <a href="https://deserts.io/valine-admin-document/#%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%E6%A8%A1%E6%9D%BF">参考这里</a></p><hr><ul><li>切换到部署标签页，分支使用 master，点击部署即可:<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209234211.png"></li></ul><p>第一次会很慢，可能会出错。如果出现依赖错误，请勾选 <strong>下载最新依赖</strong></p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209234307.png"></p><ul><li>评论管理。访问设置的二级域名https://二级域名.leanapp.cn/sign-up，注册管理员登录信息，如：<a href="https://xxxx.leanapp.cn/sign-up">https://xxxx.leanapp.cn/sign-up</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209234648.png"></p><p>此后，可以通过<code>https://二级域名.leanapp.cn/</code> 管理评论。</p><ul><li>定时任务设置<br>目前实现了两种云函数定时任务：(1)自动唤醒，定时访问Web APP二级域名防止云引擎休眠；(2)每天定时检查24小时内漏发的邮件通知。<strong>两个都要设置</strong></li></ul><p>进入云引擎-定时任务中，创建定时器，创建两个定时任务。</p><p>选择self-wake云函数，Cron表达式为<code>0 0/30 7-23 * * ?</code>，表示每天早6点到晚23点每隔30分钟访问云引擎，<code>ADMIN_URL</code>环境变量务必设置正确：</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209234835.png"></p><p>选择resend-mails云函数，Cron表达式为 <code> 0 0 8 * * ?</code> ，表示每天早8点检查过去24小时内漏发的通知邮件并补发：</p><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209234935.png"></p><ul><li>添加定时器后记得点击启动方可生效。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200209235059.png"></p><ul><li>至此全部结束，可打开https://二级域名.leanapp.cn/管理评论</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/zhaojun1998/Valine-Admin">Valine Admin 文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Valine </tag>
            
            <tag> LeanCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中的一些小插件</title>
      <link href="posts/58a32e43/"/>
      <url>posts/58a32e43/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-abbrlink"><a href="#Hexo-abbrlink" class="headerlink" title="Hexo-abbrlink"></a>Hexo-abbrlink</h1><p>在做次优化之前，hexo文章链接默认的生成规则是：:year/:month/:day/:title，是按照年、月、日、标题来生成的。<br>比如：<code>https://www.xxx.com/2019/08/12/hello-world/</code>这样，如果文章标题是中文的话，URL链接是也会是中文，</p><p>为了让url地址不变，有了接下来这个插件<code>hexo-abbrlink</code></p><p>详情见这篇文章<a href="/posts/553fb3c9/" title="Hexo-abbrlink生成唯一永久文章链接">Hexo-abbrlink生成唯一永久文章链接</a></p><h1 id="hexo-generator-feed"><a href="#hexo-generator-feed" class="headerlink" title="hexo-generator-feed"></a>hexo-generator-feed</h1><p>这是一款生成rss订阅文件的插件</p><p>详情见这篇文章<a href="/posts/b5427f21/" title="博客SEO优化">博客SEO优化</a></p><h1 id="hexo-generator-sitemap-和-hexo-generator-baidu-sitemap"><a href="#hexo-generator-sitemap-和-hexo-generator-baidu-sitemap" class="headerlink" title="hexo-generator-sitemap 和 hexo-generator-baidu-sitemap"></a>hexo-generator-sitemap 和 hexo-generator-baidu-sitemap</h1><p>这是生成站点地图的插件</p><p>详情见这篇文章<a href="/posts/b5427f21/" title="博客SEO优化">博客SEO优化</a></p><h1 id="hexo-baidu-url-submit"><a href="#hexo-baidu-url-submit" class="headerlink" title="hexo-baidu-url-submit"></a>hexo-baidu-url-submit</h1><p>百度自动提交，推送自己网站的插件，你在输入 <code>hexo d</code> 就会自动提交你的url</p><p>详情见这篇文章<a href="/posts/b5427f21/" title="博客SEO优化">博客SEO优化</a></p><h1 id="hexo-tag-aplayer"><a href="#hexo-tag-aplayer" class="headerlink" title="hexo-tag-aplayer"></a>hexo-tag-aplayer</h1><p>hexo-tag-aplayer是将aplay嵌入博客页面的hexo插件<br>原先 hexo-tag-aplayer 不支持 MetingJS，使得需要图片url，音乐url等等参数，操作起来都很麻烦，需要去音乐网站扒音乐播放链接或者下载下来存储在七牛云或本地。but, now…</p><p>MeingJS 支持 (3.0 新功能)<br>MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><p>详情见这篇文章<a href="/posts/6b33fe6/" title="Hexo添加音乐播放功能">Hexo添加音乐播放功能</a></p><h1 id="hexo-helper-live2d"><a href="#hexo-helper-live2d" class="headerlink" title="hexo-helper-live2d"></a>hexo-helper-live2d</h1><p>详情见这篇文章<a href="/posts/2805db8d/" title="hexo博客添加live2d看板娘">hexo博客添加live2d看板娘</a></p><h1 id="hexo-generator-index-pin-top"><a href="#hexo-generator-index-pin-top" class="headerlink" title="hexo-generator-index-pin-top"></a>hexo-generator-index-pin-top</h1><p>这是一款文章置顶插件<br>在butterfly主题中，你需要<code>sudo npm uninstall hexo-generator-index --save</code> 然后 <code>sudo npm install hexo-generator-index-pin-top --save</code></p><p>你要在文章的front-matter区域里添加top: True属性来把这篇文章置顶。</p><p>你可以参考 <a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a>这个仓库来了解更多细节。</p><h1 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h1><p>这是一款Hexo 页面静态资源压缩插件<br>我们自己添加的 css 和 js 文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说是没有用的，甚至还会降低渲染页面的速度。同时，由于 Markdown 转成 html 的 bug，会导致页面存在大量的空白，我们可以通过查看页面源代码发现这些大量的空白符，这也会造成页面渲染的性能问题。</p><p>因此，我们需要对页面的静态资源进行压缩，包括 css、js 和 html 等文件。</p><h2 id="安装hexo-neat"><a href="#安装hexo-neat" class="headerlink" title="安装hexo-neat"></a>安装<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a></h2><p>在博客根目录下输入<br><code>sudo npm install hexo-neat --save</code></p><h2 id="站点配置文件添加相关配置"><a href="#站点配置文件添加相关配置" class="headerlink" title="站点配置文件添加相关配置"></a>站点配置文件添加相关配置</h2><p>然后我们需要在站点配置文件<code>_config.yml</code> 中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#39;**&#x2F;*.min.css&#39;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#39;**&#x2F;*.min.js&#39;</span><br><span class="line">    - &#39;**&#x2F;jquery.fancybox.pack.js&#39;</span><br><span class="line">    - &#39;**&#x2F;index.js&#39;</span><br><span class="line">    - &#39;**&#x2F;fireworks.js&#39;</span><br><span class="line">    - &#39;**&#x2F;js&#x2F;main.js&#39;</span><br></pre></td></tr></table></figure><h2 id="几个小问题"><a href="#几个小问题" class="headerlink" title="几个小问题"></a>几个小问题</h2><h3 id="跳过压缩文件的正确配置方式"><a href="#跳过压缩文件的正确配置方式" class="headerlink" title="跳过压缩文件的正确配置方式"></a>跳过压缩文件的正确配置方式</h3><p>如果按照官方插件的文档说明来配置 exclude，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#39;**&#x2F;*.min.css&#39;</span><br></pre></td></tr></table></figure><h3 id="压缩-html-时不要跳过-Markdown-文件"><a href="#压缩-html-时不要跳过-Markdown-文件" class="headerlink" title="压缩 html 时不要跳过 Markdown 文件"></a>压缩 html 时不要跳过 Markdown 文件</h3><p>如果跳过压缩<code>.md</code> 文件，而你又刚好在文章中使用到了自带的 tab 标签，那么当 Hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><h3 id="压缩-html-时不要跳过-swig-文件"><a href="#压缩-html-时不要跳过-swig-文件" class="headerlink" title="压缩 html 时不要跳过.swig 文件"></a>压缩 html 时不要跳过.swig 文件</h3><p><code>.swig</code> 文件是模板引擎文件，简单的说 Hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。</p><h3 id="页面加载性能测试"><a href="#页面加载性能测试" class="headerlink" title="页面加载性能测试"></a>页面加载性能测试</h3><p>现在我们可以测试下页面加载性能。</p><p>Google PageSpeed Insights 可用于帮助分析网页加载速度瓶颈，该网站将会针对指定域名进行在线测试，并提供一份详细的页面加载分析报告，报告中还会根据页面资源加载情况给出合理的优化建议及预期优化效果，因此用户可以有的放矢的进行性能优化专项整改。</p><p><a href="https://developers.google.com/speed/pagespeed/insights/">Google PageSpeed Insights</a></p><h1 id="hexo-tag-dplayer"><a href="#hexo-tag-dplayer" class="headerlink" title="hexo-tag-dplayer"></a>hexo-tag-dplayer</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer">hexo-tag-dplayer</a> 是<a href="https://github.com/MoePlayer/DPlayer"> APlayer</a>播放器的 Hexo 标签插件，可以十分方便地在文章内插入视频播放器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装 hexo-tag-dplayer 插件十分简单，只需要在博客目录执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-tag-dplayer -s</span><br></pre></td></tr></table></figure><p>修改 Hexo 的配置文件 <code>_config.yml</code> ，增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo-tag-dplayer:</span><br><span class="line">  cdn:</span><br><span class="line">    - https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;dplayer&#x2F;dist&#x2F;DPlayer.min.js</span><br><span class="line">    - https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;dplayer&#x2F;dist&#x2F;DPlayer.min.css</span><br><span class="line">  default: </span><br><span class="line">    api: https:&#x2F;&#x2F;api.prprpr.me&#x2F;dplayer&#x2F;</span><br><span class="line">    loop: yes</span><br><span class="line">    screenshot: yes</span><br><span class="line">    autoplay: false</span><br><span class="line">    # 后面还可以接着写其他默认配置</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用 hexo-tag-dplayer 非常简单，只需要在 MarkDown 文件中插入正确的标记就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url&#x3D;http:&#x2F;&#x2F;blog.gisersqdai.top&#x2F;shanghaiurbandevlopment.mp4&quot; %&#125; </span><br></pre></td></tr></table></figure><p>如果还需要其他配置，尽管在上面写就好，详情可以看<a href="https://github.com/MoePlayer/hexo-tag-dplayer">这里</a>，下面有一个简单的示例可以看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url&#x3D;http:&#x2F;&#x2F;blog.gisersqdai.top&#x2F;shanghaiurbandevlopment.mp4&quot; &quot;id&#x3D;46190A32F63DFF2CF0A3BB0F3293636C&quot; &quot;addition&#x3D;https:&#x2F;&#x2F;api.prprpr.me&#x2F;dplayer&#x2F;v3&#x2F;bilibili?aid&#x3D;17150441 &quot; %&#125; </span><br></pre></td></tr></table></figure><p>可选的一些参数：</p><table><thead><tr><th align="center">选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">必须值</td><td align="center">视频地址</td></tr><tr><td align="center">loop</td><td align="center">false</td><td align="center">视频循环播放</td></tr><tr><td align="center">volume</td><td align="center">0.7</td><td align="center">播放器音量</td></tr><tr><td align="center">hotkey</td><td align="center">true</td><td align="center">开启热键</td></tr><tr><td align="center">autoplay</td><td align="center">true</td><td align="center">自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td align="center">logo</td><td align="center">-</td><td align="center">在左上角展示一个 logo，你可以通过 CSS 调整它的大小和位置</td></tr><tr><td align="center">mutex</td><td align="center">true</td><td align="center">该选项开启时，如果同页面有其他播放，该播放器会暂停</td></tr><tr><td align="center">highlight</td><td align="center">[]</td><td align="center">自定义进度条提示点</td></tr><tr><td align="center">preload</td><td align="center">auto</td><td align="center">视频文件预载入模式，可选项： none, metadata, auto</td></tr><tr><td align="center">theme</td><td align="center">#ad7a86</td><td align="center">播放器风格色彩设置</td></tr></tbody></table><h3 id="使用弹幕"><a href="#使用弹幕" class="headerlink" title="使用弹幕"></a>使用弹幕</h3><p>上面的示例中已经写了怎么使用弹幕了，使用弹幕首先需要有一个 ID ，建议使用视频的哈希值作为ID，这样可以尽可能保证 ID 唯一，防止重复，接下来要配置弹幕接口，官方免费的弹幕接口能用，但是不稳定，如果有特殊需求，推荐个人自己搭建弹幕服务器。</p><p>解析 BiliBiLi 弹幕，这个上面的示例也已经有了，同样，免费的服务不一定稳定，有特殊需求的请自己搭建弹幕服务器。</p><p>增加外部弹幕列表，同解析 BiliBiLi 弹幕一样，只要将外部弹幕的地址写进<code>addition</code>就可以了。</p><h3 id="使用字幕"><a href="#使用字幕" class="headerlink" title="使用字幕"></a>使用字幕</h3><p>增加参数<code>&quot;subtitle=字幕文件地址&quot;</code>就可以了，如需修改字幕颜色或者字体大小，仿照其他参数写就可以了。</p><h1 id="hexo-pwa"><a href="#hexo-pwa" class="headerlink" title="hexo-pwa"></a>hexo-pwa</h1><p>Progressive Web App, 简称PWA，是提升 Web App 的体验的一种新方法，能给用户原生应用的体验。</p><p>PWA 能做到原生应用的体验不是靠特指某一项技术，而是经过应用一些新技术进行改进，在安全、性能和体验三个方面都有很大提升，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，兼具 Web App 和 Native App 的优点。</p><p>详情见这篇文章<a href="/posts/805d5d89/" title="hexo博客开启pwa">hexo博客开启pwa</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客添加live2d看板娘</title>
      <link href="posts/2805db8d/"/>
      <url>posts/2805db8d/</url>
      
        <content type="html"><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p>在博客根目录输入<code>npm install --save hexo-helper-live2d</code><br>打开博客站点配置文件<code>_config.yml</code> 添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Live2D</span><br><span class="line">## https:&#x2F;&#x2F;github.com&#x2F;EYHN&#x2F;hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  # enable: false</span><br><span class="line">  scriptFrom: local # 默认</span><br><span class="line">  pluginRootPath: live2dw&#x2F; # 插件在站点上的根目录(相对路径)</span><br><span class="line">  pluginJsPath: lib&#x2F; # 脚本文件相对与插件根目录路径</span><br><span class="line">  pluginModelPath: assets&#x2F; # 模型文件相对与插件根目录路径</span><br><span class="line">  # scriptFrom: jsdelivr # jsdelivr CDN</span><br><span class="line">  # scriptFrom: unpkg # unpkg CDN</span><br><span class="line">  # scriptFrom: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget@3.x&#x2F;lib&#x2F;L2Dwidget.min.js # 你的自定义 url</span><br><span class="line">  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span><br><span class="line">  debug: false # 调试, 是否在控制台输出日志</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-tororo # 白猫 # npm-module package name</span><br><span class="line">    #live2d-widget-model-hijiki 黑猫</span><br><span class="line">    # use: wanko # 博客根目录&#x2F;live2d_models&#x2F; 下的目录名</span><br><span class="line">    # use: .&#x2F;wives&#x2F;wanko # 相对于博客根目录的路径</span><br><span class="line">    # use: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;live2d-widget-model-wanko@1.0.5&#x2F;assets&#x2F;wanko.model.json # 你的自定义 url</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    superSample: 2</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">    position: right</span><br><span class="line">    hOffset: 0</span><br><span class="line">    vOffset: -50</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br><span class="line">    scale: 0.5</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.7</span><br><span class="line">    opacityOnHover: 0.2</span><br></pre></td></tr></table></figure><p>代码含义具体可参考<a href="https://github.com/EYHN/hexo-helper-live2d">live2d官方文档</a></p><h1 id="添加模型"><a href="#添加模型" class="headerlink" title="添加模型"></a>添加模型</h1><p>做完上面那一步之后，你是见不到你的老婆的（滑稽）<br>还需要下载模型</p><p>进入这个网址<a href="https://huaji8.top/post/live2d-plugin-2.0/">预览</a> 有哪些模型</p><p>然后再安装模型<br>参见这个网址去<a href="https://github.com/xiazeyu/live2d-widget-models">安装</a></p><p>enjoy it！</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://github.com/EYHN/hexo-helper-live2d">live2d官方文档</a><br>2.<a href="https://rickeeyzhou.github.io/2018/04/30/5-HexoLive2d/">5.Hexo_基于live2d插件的动态猫猫设置</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> live2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加音乐播放功能</title>
      <link href="posts/6b33fe6/"/>
      <url>posts/6b33fe6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a>是将<a href="https://github.com/MoePlayer/APlayer">aplay</a>嵌入博客页面的hexo插件<br>原先 hexo-tag-aplayer 不支持 MetingJS，使得需要图片url，音乐url等等参数，操作起来都很麻烦，需要去音乐网站扒音乐播放链接或者下载下来存储在七牛云或本地。but, now…</p><p>MeingJS 支持 (3.0 新功能)<br><a href="https://github.com/metowolf/MetingJS">MetingJS</a> 是基于<a href="https://github.com/metowolf/Meting">Meting API</a> 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><p>在hexo的博客根目录下你只需写入以下代码就可以安装他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>要想使用它你需要在站点配置文件<code>_config.yml</code>中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><h2 id="标签参数"><a href="#标签参数" class="headerlink" title="标签参数"></a>标签参数</h2><ul><li>title : 曲目标题</li><li>author: 曲目作者</li><li>url: 音乐文件 URL 地址</li><li>picture_url: (可选) 音乐对应的图片地址</li><li>narrow: （可选）播放器袖珍风格</li><li>autoplay: (可选) 自动播放，移动端浏览器暂时不支持此功能</li><li>width:xxx: (可选) 播放器宽度 (默认: 100%)</li><li>lrc:xxx: （可选）歌词文件 URL 地址</li></ul><p>当开启 Hexo 的 文章资源文件夹 功能时，可以将图片、音乐文件、歌词文件放入与文章对应的资源文件夹中，然后直接引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;caffeine.mp3&quot; &quot;picture.jpg&quot; &quot;lrc:caffeine.txt&quot; %&#125;</span><br></pre></td></tr></table></figure><h2 id="歌词标签"><a href="#歌词标签" class="headerlink" title="歌词标签"></a>歌词标签</h2><p>除了使用标签 lrc 选项来设定歌词，你也可以直接使用 aplayerlrc 标签来直接插入歌词文本在博客中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlrc &quot;title&quot; &quot;author&quot; &quot;url&quot; &quot;autoplay&quot; %&#125;</span><br><span class="line">[00:00.00]lrc here</span><br><span class="line">&#123;% endaplayerlrc %&#125;</span><br></pre></td></tr></table></figure><h2 id="播放列表"><a href="#播放列表" class="headerlink" title="播放列表"></a>播放列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayerlist %&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;narrow&quot;: false,                          &#x2F;&#x2F; （可选）播放器袖珍风格</span><br><span class="line">    &quot;autoplay&quot;: true,                         &#x2F;&#x2F; （可选) 自动播放，移动端浏览器暂时不支持此功能</span><br><span class="line">    &quot;mode&quot;: &quot;random&quot;,                         &#x2F;&#x2F; （可选）曲目循环类型，有 &#39;random&#39;（随机播放）, &#39;single&#39; (单曲播放), &#39;circulation&#39; (循环播放), &#39;order&#39; (列表播放)， 默认：&#39;circulation&#39; </span><br><span class="line">    &quot;showlrc&quot;: 3,                             &#x2F;&#x2F; （可选）歌词显示配置项，可选项有：1,2,3</span><br><span class="line">    &quot;mutex&quot;: true,                            &#x2F;&#x2F; （可选）该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</span><br><span class="line">    &quot;theme&quot;: &quot;#e6d0b2&quot;,                      &#x2F;&#x2F; （可选）播放器风格色彩设置，默认：#b7daff</span><br><span class="line">    &quot;preload&quot;: &quot;metadata&quot;,                    &#x2F;&#x2F; （可选）音乐文件预载入模式，可选项： &#39;none&#39; &#39;metadata&#39; &#39;auto&#39;, 默认: &#39;auto&#39;</span><br><span class="line">    &quot;listmaxheight&quot;: &quot;513px&quot;,                 &#x2F;&#x2F; (可选) 该播放列表的最大长度</span><br><span class="line">    &quot;music&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;CoCo&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;Jeff Williams&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;caffeine.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;caffeine.jpeg&quot;,</span><br><span class="line">            &quot;lrc&quot;: &quot;caffeine.txt&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;title&quot;: &quot;アイロニ&quot;,</span><br><span class="line">            &quot;author&quot;: &quot;鹿乃&quot;,</span><br><span class="line">            &quot;url&quot;: &quot;irony.mp3&quot;,</span><br><span class="line">            &quot;pic&quot;: &quot;irony.jpg&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure><h1 id="MeingJS-支持-3-0-新功能"><a href="#MeingJS-支持-3-0-新功能" class="headerlink" title="MeingJS 支持 (3.0 新功能)"></a>MeingJS 支持 (3.0 新功能)</h1><p>例如打开网易云音乐网站找到这首<code>coldplay</code>的《Viva la Vida》，复制他的分享链接，从url中可以得到其id为3986040，按下面格式即可使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;3986040&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure><p>下面是歌单的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;7334369613&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure><p>我们来看看这里面的参数是什么意思<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208224646.png"></p><h1 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h1><ul><li><p>有些音乐使用 <code>meting</code> 无法加载出来</p></li><li><p><code>meting</code> 和 <code>aplayer</code> 不能存在一个页面中，否则会出现 <code>aplayer</code>不会出现的情况</p></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://blog.csdn.net/hushhw/article/details/88092728">Hexo主题插入音乐之aplayer音乐播放器</a><br>2.<a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> Aplayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用jsDelivr加速GitHub仓库图片</title>
      <link href="posts/dc1f1b6b/"/>
      <url>posts/dc1f1b6b/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>jsDelivr 是国外的一家优秀的公共 CDN 服务提供商，也是首个「打通中国大陆（网宿公司运营）与海外的免费 CDN 服务。jsDelivr 有一个十分好用的功能——它可以加速 Github 仓库的文件。我们可以借此搭建一个免费、全球访问速度超快的图床。<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208160652.png" alt="如图"></p><h1 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208162726.png" alt="创建仓库"></p><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><p>访问<a href="https://github.com/settings/tokens">这里</a><br>点击创建token<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208163008.png" alt="生成token"><br>分配token权限<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208163225.png"><br>最后拉到最下面，生成token，并复制</p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><ol><li>点击<a href="https://github.com/Molunerfinn/PicGo/releases">此处</a></li><li>打开picgo并配置，点图床设置-&gt;github图床<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208163552.png"></li></ol><blockquote><p>设定仓库名：填入你上面创建的仓库名，格式为：用户名/仓库名；<br>设定分支名：一般填写 master 就行了；<br>设定 Token：将 Github 配置中得到的 Token 粘贴进去；<br>指定存储路径：你想要把图片放在仓库的哪个位置，比如我是：/img，Github 对应的是：<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208163835.png"></p></blockquote><h1 id="jsDelivr-配置"><a href="#jsDelivr-配置" class="headerlink" title="jsDelivr 配置"></a>jsDelivr 配置</h1><p>我设定的是这样<br><code>https://cdn.jsdelivr.net/gh/imgyh/cdn</code></p><blockquote><p>gh表示github,不需要改<br>imgyh 是你自己的用户名<br>cdn表示自己的仓库</p></blockquote><h1 id="Imagine"><a href="#Imagine" class="headerlink" title="Imagine"></a>Imagine</h1><p><a href="https://github.com/meowtec/Imagine">Imagine</a>是一款用于压缩 PNG 和 JPEG 的桌面应用程序，具有现代友好的 UI。配合之前讲过的 PicGo 我的图片压缩以及上传环节变得极为有效率！</p><ul><li>多格式（JPEG，PNG，WebP）</li><li>格式转换</li><li>跨平台</li><li>GUI</li><li>批量优化</li><li>多语言支持</li><li>功能（支持批量操作：导入、处理、保存）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200214174405.png"></p><p>总的来说压缩率还是很高的。</p><h1 id="enjoy-it"><a href="#enjoy-it" class="headerlink" title="enjoy it !"></a>enjoy it !</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://blog.iljw.me/2019/05/jsdelivr-cdn-github.html">使用 jsDelivr CDN 加速 Github 仓库的图片，以作为博客的图床</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> jsDelivr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客SEO优化</title>
      <link href="posts/b5427f21/"/>
      <url>posts/b5427f21/</url>
      
        <content type="html"><![CDATA[<h1 id="安装RSS插件生成atom-xml"><a href="#安装RSS插件生成atom-xml" class="headerlink" title="安装RSS插件生成atom.xml"></a>安装RSS插件生成atom.xml</h1><p>进入本地hexo目录，输入以下命令:<br><code>sudo npm install hexo-generator-feed</code><br>在博客目录的_config.yml中添加如下代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">    type: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    limit: 20</span><br></pre></td></tr></table></figure><p>因为我使用的是butterfly主题，已经集成了rss功能，所以设置到这一步就可以了。如果你的主题里面没有rss相关设置，也可以添加如下代码：<br><code>rss： /atom.xml</code></p><h1 id="百度google推送"><a href="#百度google推送" class="headerlink" title="百度google推送"></a>百度google推送</h1><h2 id="让百度收录"><a href="#让百度收录" class="headerlink" title="让百度收录"></a>让百度收录</h2><p>查看百度是否收录可以在百度搜索引擎中输入<code>site:你的域名</code>查看</p><h3 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h3><p>登录<a href="https://ziyuan.baidu.com/site/index#/">百度站长平台</a>, 只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击添加网站然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</p><p>在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的layout:false，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要），其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~</p><h3 id="生成网站地图"><a href="#生成网站地图" class="headerlink" title="生成网站地图"></a>生成网站地图</h3><p>我们需要安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>然后修改博客配置文件<br>在根目录配置文件中修改url为你的站点地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class="line">url: https:&#x2F;&#x2F;www.gyh.im</span><br><span class="line">root: &#x2F;</span><br><span class="line">permalink: posts&#x2F;:abbrlink.html  # :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;</span><br><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br></pre></td></tr></table></figure><p>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件</p><blockquote><p>然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p></blockquote><blockquote><p>通常主动推送&gt;自动推送&gt;sitemap</p></blockquote><h3 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h3><p>我们这里介绍主动推送<br>安装插件<code>sudo npm install hexo-baidu-url-submit --save</code><br>在根目录_config.yml中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 100 # 提交最新的一个链接</span><br><span class="line">  host: gyh.im # 在百度站长平台中注册的域名</span><br><span class="line">  token:  # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p>加入新的deploy，将原来的deploy改成下面这样的格式，有两个type时要在前面添加<code>-</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: </span><br><span class="line">        github: </span><br><span class="line">        coding:</span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">- type: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>设置主动推送，这个一般在主题配置文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#百度推送</span><br><span class="line">baidu_push:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>这样执行hexo deploy的时候，新的链接就会被推送了<br>推送成功时,会有如下终端提示,各种不同的推送反馈字段说明在这里查看,一般来说,推送失败都是地址不相符造成的,我们只需对比baidu_url_submit在public中生成的baidu_urls.txt的地址<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208171135.png"></p><h3 id="sitemap提交"><a href="#sitemap提交" class="headerlink" title="sitemap提交"></a>sitemap提交</h3><p>将我们上一步生成的sitemap文件提交到百度就可以了~</p><h2 id="google收录"><a href="#google收录" class="headerlink" title="google收录"></a>google收录</h2><p>登录<a href="https://www.google.com/webmasters">google站长平台</a> 点添加属性，按要求添加即可</p><p>添加 sitemap : 进入 Google Search Console - 抓取 - 站点地图,点击「添加/测试站点地图」,输入你的博客网址. 若无报错则站点地图提交成功<br>提交 robots.txt:</p><blockquote><p>robots.txt 是一种存放于网站根目录下的 ASCII 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。robots.txt 放在博客目录下的 source 文件夹中，博客生成后在站点目录 /public/ 下。<br>具体可参考以下配置，你也可以</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: *</span><br><span class="line">Allow: &#x2F;</span><br><span class="line"></span><br><span class="line"># 可选</span><br><span class="line">###########################</span><br><span class="line">Allow: &#x2F;archives&#x2F;</span><br><span class="line">Allow: &#x2F;categories&#x2F;</span><br><span class="line">Allow: &#x2F;about&#x2F;</span><br><span class="line"></span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;js&#x2F;</span><br><span class="line">Disallow: &#x2F;css&#x2F;</span><br><span class="line">Disallow: &#x2F;fonts&#x2F;</span><br><span class="line">Disallow: &#x2F;vendors&#x2F;</span><br><span class="line">Disallow: &#x2F;fancybox&#x2F;</span><br><span class="line">###########################</span><br><span class="line"></span><br><span class="line">Sitemap: https:&#x2F;&#x2F;gyh.im&#x2F;sitemap.xml</span><br><span class="line">Sitemap: https:&#x2F;&#x2F;gyh.im&#x2F;baidusitemap.xml</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>1.<a href="https://darler.gitee.io/post/livere/">rss</a><br>2.<a href="https://www.jianshu.com/p/efaf72aab32e">Hexo 博客从搭建部署到SEO优化等详细教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-abbrlink生成唯一永久文章链接</title>
      <link href="posts/553fb3c9/"/>
      <url>posts/553fb3c9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在做次优化之前，hexo文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。<br>比如：<code>https://www.xxx.com/2019/08/12/hello-world/</code> 这样，如果文章标题是中文的话，URL链接是也会是中文，</p><p>为了让url地址不变，有了接下来这个插件<a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a></p><p>此插件根据文章的<code>title</code>项来得到永久链接的。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h2 id="修改站点配置文件-config-yml"><a href="#修改站点配置文件-config-yml" class="headerlink" title="修改站点配置文件_config.yml"></a>修改站点配置文件_config.yml</h2><p>定位到 <code>permalink: :year/:month/:day/:title/</code><br>把这行代码修改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts&#x2F;:abbrlink&#x2F;</span><br><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  #support crc16(default) and crc32</span><br><span class="line">  rep: hex    #support dec(default) and hex</span><br></pre></td></tr></table></figure><p>修改 alg 和rep参数有四种组合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;65535.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;1690090958.html</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink的GitHub</a><br>2.<a href="https://www.jianshu.com/p/c7de2ae59975">Hexo-abbrlink生成唯一永久文章链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo在github和coding上双线部署实现百度收录</title>
      <link href="posts/bdd85b8e/"/>
      <url>posts/bdd85b8e/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 <a href="#">Post not found: githubPage搭建hexo博客 githubPage搭建hexo博客</a> 这篇文章中，介绍了如何利用github和hexo部署个人博客。<br>但是众所周知，github在国内访问速度很慢。所以我们在coding上部署一个镜像站点，实现双线访问。</p><h1 id="coding注册"><a href="#coding注册" class="headerlink" title="coding注册"></a>coding注册</h1><p>coding 1月20号开始凌晨更新，好多地方和原来不一样了，现在只能注册团队用户</p><ol><li>进入<a href="https://coding.net/">coding官网</a> 点击免费注册</li><li>创建项目，选择DecOps项目。项目名和项目标识以及仓库名一致</li><li>配置公钥，以实现部署时免密。与github一样，个人设置–&gt;增添公钥，<br>但是你现在没有公钥，使用 <code>ssh-keygen -t rsa -C &quot;yourEmail@example.com&quot;</code> 生成，在用户目录下 .ssh 中到id_rsa.pub文件，复制到框中。</li></ol><p>在命令行输入 <code>ssh -T git@e.coding.net&amp;nbsp</code>;来检查是否配置成功，</p><p>若出现以下提示，则证明配置成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coding 提示: Hello XXX, You&#39;ve connected to Coding.net via SSH. This is a personal key.</span><br><span class="line">XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span><br></pre></td></tr></table></figure><h1 id="配置根目录下的-config-yml"><a href="#配置根目录下的-config-yml" class="headerlink" title="配置根目录下的_config.yml"></a>配置根目录下的_config.yml</h1><p>通过修改站点配置文件，实现github和coding的同时部署。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">        github: https:&#x2F;&#x2F;github.com&#x2F;imgyh&#x2F;imgyh.github.io.git</span><br><span class="line">        coding: https:&#x2F;&#x2F;e.coding.net&#x2F;imgyh&#x2F;imgyh.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>这里可以用SSH的那个链接也就是这种的<a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a>:imgyh/imgyh.github.io.git以及<a href="mailto:&#x67;&#105;&#x74;&#64;&#x65;&#x2e;&#99;&#111;&#100;&#105;&#110;&#103;&#x2e;&#x6e;&#x65;&#x74;">&#x67;&#105;&#x74;&#64;&#x65;&#x2e;&#99;&#111;&#100;&#105;&#110;&#103;&#x2e;&#x6e;&#x65;&#x74;</a>:imgyh/imgyh.git<br>这两种好像是配合上面的公钥来使用的，就不用输密码了，<br>但是我没成功，执行<code>sudo hexo d</code>一直在报<code>Permission denied (publickey). fatal: Could not read from remote repository.</code>这个错误<br>后来我换成HTTP后问题又来了，HTTP向远端推送时需要输入用户名和密码，可是coding的已经取消了用户名这样的唯一标识（github用户名唯一）他的用户名变成了邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username for &#39;https:&#x2F;&#x2F;e.coding.net&#39;: xxx@qq.com  </span><br><span class="line">Password for &#39;https:&#x2F;&#x2F;xxx@qq.com@e.coding.net&#39;: </span><br></pre></td></tr></table></figure><p>解决了以上问题后，就可以push代码了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo clean</span><br><span class="line">sudo hexo g</span><br><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure><h1 id="开启coding-page和aliyun解析"><a href="#开启coding-page和aliyun解析" class="headerlink" title="开启coding page和aliyun解析"></a>开启coding page和aliyun解析</h1><p><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208171438.png"><br>再开启自定义域名<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208171507.png"></p><p>首先要有一个域名，可以去阿里云买<a href="https://wanwang.aliyun.com/?spm=5176.12825654.eofdhaal5.9.2e482c4af1gZ19&aly_as=IC99_D7X">域名</a><br>然后添加解析<br><img src="https://cdn.jsdelivr.net/gh/imgyh/cdn/img/20200208171947.png"></p><p>github的域名解析线路选择境外，coding_page域名解析线路选择默认,也可以再添加一个解析线路选择百度，让百度的爬虫去爬</p><h2 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h2><p>使用了CNAME需要在hexo本地博客的<code>source</code>文件夹中创建CNAME文件，无后缀。在里面写入自己的域名</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a><br>2.<a href="https://www.cnblogs.com/lfri/p/12260144.html">Hexo 双线部署以实现百度收录</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装openVPN</title>
      <link href="posts/66650f51/"/>
      <url>posts/66650f51/</url>
      
        <content type="html"><![CDATA[<h1 id="openVPN搭建"><a href="#openVPN搭建" class="headerlink" title="openVPN搭建"></a>openVPN搭建</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="安装openVPN"><a href="#安装openVPN" class="headerlink" title="安装openVPN"></a>安装openVPN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Nyr&#x2F;openvpn-install.git</span><br></pre></td></tr></table></figure><h2 id="运行openVPN"><a href="#运行openVPN" class="headerlink" title="运行openVPN"></a>运行openVPN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">cd openvpn-install&#x2F;</span><br><span class="line">ls</span><br><span class="line">chmod +x openvpn-install.sh</span><br><span class="line">sudo .&#x2F;openvpn-install.sh</span><br><span class="line">将收到一些提示，以更改或确认安装的默认设置：</span><br><span class="line"></span><br><span class="line">Welcome to this OpenVPN &quot;road warrior&quot; installer!</span><br><span class="line"></span><br><span class="line">I need to ask you a few questions before starting the setup.</span><br><span class="line"></span><br><span class="line">You can leave the default options and just press enter if you are ok with them.</span><br><span class="line"></span><br><span class="line">First, provide the IPv4 address of the network interface you want OpenVPN</span><br><span class="line"></span><br><span class="line">listening to.</span><br><span class="line"></span><br><span class="line">IP address: 192.168.10.2</span><br><span class="line"></span><br><span class="line">Which protocol do you want for OpenVPN connections?</span><br><span class="line"></span><br><span class="line">1) UDP (recommended)</span><br><span class="line"></span><br><span class="line">2) TCP</span><br><span class="line"></span><br><span class="line">Protocol [1-2]: 1</span><br><span class="line"></span><br><span class="line">What port do you want OpenVPN listening to?</span><br><span class="line"></span><br><span class="line">Port: 1194</span><br><span class="line"></span><br><span class="line">Which DNS do you want to use with the VPN?</span><br><span class="line"></span><br><span class="line">1) Current system resolvers</span><br><span class="line"></span><br><span class="line">2) 1.1.1.1</span><br><span class="line"></span><br><span class="line">3) Google</span><br><span class="line"></span><br><span class="line">4) OpenDNS</span><br><span class="line"></span><br><span class="line">5) Verisign</span><br><span class="line"></span><br><span class="line">DNS [1-5]: 1</span><br><span class="line"></span><br><span class="line">Finally, tell me your name for the client certificate.</span><br><span class="line"></span><br><span class="line">Please, use one word only, no special characters.</span><br><span class="line"></span><br><span class="line">Client name: client</span><br><span class="line"></span><br><span class="line">Okay, that was all I needed. We are ready to set up your OpenVPN server now.</span><br><span class="line"></span><br><span class="line">Press any key to continue... &lt;Enter&gt;</span><br></pre></td></tr></table></figure><p>回答完问题后按enter开始安装成功后，收到成功消息</p><h2 id="创建虚拟接口"><a href="#创建虚拟接口" class="headerlink" title="创建虚拟接口"></a>创建虚拟接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ip ad | grep tun0</span><br><span class="line"></span><br><span class="line">ip route | grep tun0</span><br><span class="line"></span><br><span class="line">测试要安装</span><br><span class="line">sudo apt-get install traceroute</span><br><span class="line"></span><br><span class="line">然后</span><br><span class="line">traceroute 10.8.0.1</span><br></pre></td></tr></table></figure><h2 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;openvpn-install.sh </span><br></pre></td></tr></table></figure><p>把配置文件保存到客户端</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenVpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机中断详解</title>
      <link href="posts/d9d9afd1/"/>
      <url>posts/d9d9afd1/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机中断详解"><a href="#51单片机中断详解" class="headerlink" title="51单片机中断详解"></a>51单片机中断详解</h1><h2 id="常用寄存器"><a href="#常用寄存器" class="headerlink" title="常用寄存器"></a>常用寄存器</h2><h2 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h2><p><code>EA -– ET2 ES ET1 EX1 ET0 EX0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">作用:</span><br><span class="line">EA&#x3D;1,打开总中断。</span><br><span class="line">ES&#x3D;1,打开串口中断。</span><br><span class="line">ET0&#x2F;1,打开定时器0&#x2F;1中断。</span><br><span class="line">EX0&#x2F;1,打开外部中断0&#x2F;1。</span><br></pre></td></tr></table></figure><p>中断优先级:从右到左依次递减。</p><h2 id="TMOD"><a href="#TMOD" class="headerlink" title="TMOD"></a>TMOD</h2><p><code>GATE C/T M1 M0 GATE C/T M1 M0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">作用:</span><br><span class="line">高四位控制定时器1模式，低四位控制定时器0。</span><br><span class="line">GATE&#x3D;0仅由TR0&#x2F;1控制，GATE&#x3D;1由TR0&#x2F;1和外部中断引脚控制。</span><br><span class="line">C&#x2F;T&#x3D;0定时模式。C&#x2F;T&#x3D;1计数模式。</span><br><span class="line">M1 M0 为：</span><br><span class="line">00 方式0，13位定时&#x2F;计数器</span><br><span class="line">01 方式1，16位定时&#x2F;计数器</span><br><span class="line">10 方式2，8位初值自动重装初值的8位定时&#x2F;计数器</span><br><span class="line">11 方式3，仅T0,分成两个8位定时&#x2F;计数器，T1停止</span><br></pre></td></tr></table></figure><h2 id="TCON"><a href="#TCON" class="headerlink" title="TCON"></a>TCON</h2><p><code>TF1 TR1 TF0 TR0 IE1 IT1 IE0 IT0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TF，定时器溢出标志位，无需操作，硬件控制。</span><br><span class="line">TR，定时器运行控制位。</span><br><span class="line">IE,外部中断溢出标志位。</span><br><span class="line">IT,外部中断允许。IT&#x3D;1，下降沿触发，IT&#x3D;0，低电平触发。</span><br></pre></td></tr></table></figure><h2 id="PCON"><a href="#PCON" class="headerlink" title="PCON"></a>PCON</h2><p>8位寄存器，最高位为SMOD=1串行方式123波特率加倍。SMOD=0串行方式123正常波特率。</p><p>上电后初始化PCON=0X00</p><h2 id="SCON"><a href="#SCON" class="headerlink" title="SCON"></a>SCON</h2><p><code>SM0 SM1 SM2 REN TB8 RB8 TI RI</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SM0 SM1为：</span><br><span class="line">00 方式0，同步移位寄存方式，通常用于扩展I&#x2F;O</span><br><span class="line">01 方式1，10位异步首发(8位数据)，波特率可调(由定时器1溢出率控制)。</span><br><span class="line">10 方式2，11位异步收发(9位数据)，波特率固定。</span><br><span class="line">11 方式3，11位异步收发(9位数据)，波特率可调(由定时器1溢出率控制)</span><br><span class="line"></span><br><span class="line">SM2 多机通信控制位，用于方式2，3</span><br><span class="line"></span><br><span class="line">REN&#x3D;1，允许串行接受数据</span><br><span class="line"></span><br><span class="line">REN&#x3D;0,禁止串行接受数据。</span><br><span class="line"></span><br><span class="line">TB8，方式2，3发送第九位数据</span><br><span class="line"></span><br><span class="line">RB0, 方式2，3接受第九位数据</span><br><span class="line"></span><br><span class="line">TI,发送数据中断标志位，由硬件置1，发送中断，需要软件清零，解除中断。</span><br><span class="line"></span><br><span class="line">RI 接受数据中断标志位，由硬件置1，发送中断，需要软件清零，解除中断。</span><br></pre></td></tr></table></figure><h2 id="中断控制写法"><a href="#中断控制写法" class="headerlink" title="中断控制写法"></a>中断控制写法</h2><h2 id="外部中断0-1："><a href="#外部中断0-1：" class="headerlink" title="外部中断0/1："></a>外部中断0/1：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EX0&#x2F;1&#x3D;1;  &#x2F;&#x2F;打开中断</span><br><span class="line">IT0&#x2F;1&#x3D;0&#x2F;1;   &#x2F;&#x2F;为0低电平触发，为1下降沿触发</span><br><span class="line">EA&#x3D;1;   &#x2F;&#x2F;打开总中断</span><br></pre></td></tr></table></figure><h2 id="定时器0方式1"><a href="#定时器0方式1" class="headerlink" title="定时器0方式1"></a>定时器0方式1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TMOD&#x3D;0x01; &#x2F;&#x2F;确定定时器工作方式和使用哪个定时器。</span><br><span class="line">TH0&#x3D;(65536-N)&#x2F;256; &#x2F;&#x2F;赋初值</span><br><span class="line">TL0&#x3D;(65536-N)%256;</span><br><span class="line">EA&#x3D;1;  &#x2F;&#x2F;打开总中断</span><br><span class="line">ET0&#x3D;1;   &#x2F;&#x2F;打开定时器0中断</span><br><span class="line">TR0&#x3D;1;  &#x2F;&#x2F;启动定时器</span><br></pre></td></tr></table></figure><h2 id="串口通信方式1"><a href="#串口通信方式1" class="headerlink" title="串口通信方式1"></a>串口通信方式1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TMOD&#x3D;0x20;  &#x2F;&#x2F;定时器1方式2</span><br><span class="line">TH1&#x3D; ;  &#x2F;&#x2F;根据波特率计算</span><br><span class="line">TL1&#x3D;;</span><br><span class="line">TR1&#x3D;1; &#x2F;&#x2F;启动定时器1，不需要ET1&#x3D;1,不用打开中断</span><br><span class="line">SCON&#x3D;0x50;  &#x2F;&#x2F;确定串行方式1打开REN允许位，这里要对SCON操作，不要对SM1 SM0 REN赋值，有时会出错。</span><br><span class="line">EA&#x3D;1;  &#x2F;&#x2F;打开总中断</span><br><span class="line">ES&#x3D;1;  &#x2F;&#x2F;打开串口中断</span><br></pre></td></tr></table></figure><h2 id="波特率计算"><a href="#波特率计算" class="headerlink" title="波特率计算"></a>波特率计算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式0波特率&#x3D;f&#x2F;12</span><br><span class="line">方式1波特率&#x3D;(2^SMOD&#x2F;32)×T1溢出率</span><br><span class="line">方式2波特率&#x3D;(2^SMOD&#x2F;64)×f</span><br><span class="line">方式3波特率&#x3D;(2^SMOD&#x2F;32)×T1溢出率</span><br><span class="line"></span><br><span class="line">f为晶振频率，SMOD为PCON最高位</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Learn </category>
          
          <category> Embedded </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedded </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GithubPage搭建Hexo博客</title>
      <link href="posts/dadde4c0/"/>
      <url>posts/dadde4c0/</url>
      
        <content type="html"><![CDATA[<h1 id="安装nodejs-npm和hexo"><a href="#安装nodejs-npm和hexo" class="headerlink" title="安装nodejs,npm和hexo"></a>安装nodejs,npm和hexo</h1><h2 id="安装nvm，npm"><a href="#安装nvm，npm" class="headerlink" title="安装nvm，npm"></a>安装nvm，npm</h2><blockquote><p>nvm 全称 <code>Node Version Manager</code> 是 Nodejs 版本管理器，它让我们能方便的对 Nodejs 的版本进行切换。可以在他的<a href="https://github.com/nvm-sh/nvm">github仓库</a>中查看详细信息</p></blockquote><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install build-essential libssl-dev</span><br></pre></td></tr></table></figure><p>在终端执行下面的命令即可安装nvm,安装时会自动安装npm模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>安装好nvm后就可以使用nvm安装nodejs了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nvm ls-remote         <span class="comment">#查看远端仓库中的nodejs版本 </span></span><br><span class="line">nvm ls                <span class="comment">#查看本地安装的nodejs版本</span></span><br><span class="line">nvm install [version] <span class="comment">#安装指定版本的nodejs</span></span><br><span class="line">nvm install latest    <span class="comment">#安装最新版本的node</span></span><br><span class="line">nvm use [version]     <span class="comment">#切换到某个版本，如nvm use v5.3.0</span></span><br><span class="line">nvm uninstall [version] <span class="comment">#卸载node</span></span><br></pre></td></tr></table></figure><p>查看nodejs有很多版本，我这里选择的是<code>nvm install v12.16.1</code></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><p>更详细安装教程请查看<a href="https://hexo.io/zh-cn/docs/">hexo文档</a></p></blockquote><h1 id="安装git并配置"><a href="#安装git并配置" class="headerlink" title="安装git并配置"></a>安装git并配置</h1><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="github新建仓库"><a href="#github新建仓库" class="headerlink" title="github新建仓库"></a>github新建仓库</h2><p>创建个人仓库格式<a href="https://github.com/imgyh/imgyh.github.io">username.github.io</a></p><h2 id="生成SSH添加到github"><a href="#生成SSH添加到github" class="headerlink" title="生成SSH添加到github"></a>生成SSH添加到github</h2><blockquote><p>ssh是非必须的，你可以使用http的方式来推送代码，只是推送代码时需要输入密码</p></blockquote><p>回到bash中,配置git账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>创建SSH,一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，<br>id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，<br>这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，<br>才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><h1 id="部署hexo到github"><a href="#部署hexo到github" class="headerlink" title="部署hexo到github"></a>部署hexo到github</h1><h2 id="初始化本地blog"><a href="#初始化本地blog" class="headerlink" title="初始化本地blog"></a>初始化本地blog</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog //进入这个myblog文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><p>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件</p><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo g </span><br><span class="line">sudo hexo s</span><br></pre></td></tr></table></figure><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>注意deploy时可能要你输入username和password。</p><p>过一会儿就可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><h1 id="hexo基本配置"><a href="#hexo基本配置" class="headerlink" title="hexo基本配置"></a>hexo基本配置</h1><p>在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration">官方</a>的配置描述。</p><h2 id="新建文章post"><a href="#新建文章post" class="headerlink" title="新建文章post"></a>新建文章post</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo new paper_name</span><br></pre></td></tr></table></figure><h2 id="新建page"><a href="#新建page" class="headerlink" title="新建page"></a>新建page</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo new page page_name</span><br></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个page_name文件夹，以及page_name文件夹中的index.md，这样你访问的page_name对应的链接就是<a href="http://xxx.xxx/page_name">http://xxx.xxx/page_name</a></p><h2 id="新建草稿draft"><a href="#新建草稿draft" class="headerlink" title="新建草稿draft"></a>新建草稿draft</h2><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft newpage</span><br></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>到这一步，如果你觉得默认的landscape主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。点<a href="https://hexo.io/themes/">这里</a><br>个人觉得好看的主题<br>1.<a href="https://github.com/theme-next/hexo-theme-next">next</a><br>2.<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a><br>3.<a href="https://jerryc.me/">butterfly</a><br>4.<a href="https://github.com/honjun/hexo-theme-sakura">sakura</a><br>具体配置参见各主题readme，我用的<a href="https://jerryc.me/">butterfly</a>这个主题，文档点<a href="https://jerryc.me/posts/21cfbf15/">这里</a></p><h1 id="源代码储存"><a href="#源代码储存" class="headerlink" title="源代码储存"></a>源代码储存</h1><h2 id="git多分支"><a href="#git多分支" class="headerlink" title="git多分支"></a>git多分支</h2><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><p>机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。<br>也就是上传的是在本地目录里自动生成的.deploy_git里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><p>首先，先在github上新建一个hexo分支，<br>然后在本地的任意目录下，打开git bash，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/username.github.io.git</span><br></pre></td></tr></table></figure><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的username.github.io中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中node_modules、public、db.json已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><h2 id="建立私有仓库"><a href="#建立私有仓库" class="headerlink" title="建立私有仓库"></a>建立私有仓库</h2><p>如果觉得多分支管理对站点配置文件<code>_config.yml</code> 的隐私保护不是很好，可以考虑新建一个私有仓库，其他操作步骤同上</p><h1 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h1><p>和之前一样，安装git，nodejs，npm，hexo，设置sshkey<br>在任意文件夹下克隆hexo分支<br>然后进入克隆到的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx.github.io</span><br><span class="line">sudo npm install</span><br><span class="line">sudo npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hexo generate</span><br><span class="line">sudo hexo d</span><br></pre></td></tr></table></figure><p>最好上传一下源文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure><p>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>1.<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a><br>2.<a href="https://jerryc.me/posts/21cfbf15/">hexo-theme-butterfly安装文档</a><br>3.<a href="https://hexo.io/zh-cn/docs/configuration">hexo官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
